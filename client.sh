#!/usr/bin/env bash

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# ! Note:
# !
# ! THIS SCRIPT HAS BEEN AUTOMATICALLY GENERATED USING
# ! swagger-codegen (https://github.com/swagger-api/swagger-codegen)
# ! FROM SWAGGER SPECIFICATION IN JSON.
# !
# ! Generated on: 2017-08-15T13:13:07.922-04:00
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#
# This is a Bash client for Knetik Platform API Documentation latest.
#
# LICENSE:
# https://knetikcloud.com
#
# CONTACT:
# support@knetik.com
#
# MORE INFORMATION:
# 
#

# For improved pattern matching in case statemets
shopt -s extglob

###############################################################################
#
# Make sure Bash is at least in version 4.3
#
###############################################################################
if ! ( (("${BASH_VERSION:0:1}" == "4")) && (("${BASH_VERSION:2:1}" >= "3")) ) \
  && ! (("${BASH_VERSION:0:1}" >= "5")); then
    echo ""
    echo "Sorry - your Bash version is ${BASH_VERSION}"
    echo ""
    echo "You need at least Bash 4.3 to run this script."
    echo ""
    exit 1
fi

###############################################################################
#
# Global variables
#
###############################################################################

##
# The filename of this script for help messages
script_name=`basename "$0"`

##
# Map for headers passed after operation as KEY:VALUE
declare -A header_arguments


##
# Map for operation parameters passed after operation as PARAMETER=VALUE
# These will be mapped to appropriate path or query parameters
# The values in operation_parameters are arrays, so that multiple values
# can be provided for the same parameter if allowed by API specification
declare -A operation_parameters

##
# Declare colors with autodection if output is terminal
if [ -t 1 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    MAGENTA="$(tput setaf 5)"
    CYAN="$(tput setaf 6)"
    WHITE="$(tput setaf 7)"
    BOLD="$(tput bold)"
    OFF="$(tput sgr0)"
else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    MAGENTA=""
    CYAN=""
    WHITE=""
    BOLD=""
    OFF=""
fi

declare -a result_color_table=( "$WHITE" "$WHITE" "$GREEN" "$YELLOW" "$WHITE" "$MAGENTA" "$WHITE" )

##
# This array stores the minimum number of required occurences for parameter
# 0 - optional
# 1 - required
declare -A operation_parameters_minimum_occurences
operation_parameters_minimum_occurences["getOAuthToken:::grant_type"]=1
operation_parameters_minimum_occurences["getOAuthToken:::client_id"]=1
operation_parameters_minimum_occurences["getOAuthToken:::client_secret"]=0
operation_parameters_minimum_occurences["getOAuthToken:::username"]=0
operation_parameters_minimum_occurences["getOAuthToken:::password"]=0
operation_parameters_minimum_occurences["createActivity:::activity_resource"]=0
operation_parameters_minimum_occurences["createActivityOccurrence:::test"]=0
operation_parameters_minimum_occurences["createActivityOccurrence:::activity_occurrence_resource"]=0
operation_parameters_minimum_occurences["createActivityTemplate:::activity_template_resource"]=0
operation_parameters_minimum_occurences["deleteActivity:::id"]=1
operation_parameters_minimum_occurences["deleteActivityTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteActivityTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getActivities:::filter_template"]=0
operation_parameters_minimum_occurences["getActivities:::filter_name"]=0
operation_parameters_minimum_occurences["getActivities:::filter_id"]=0
operation_parameters_minimum_occurences["getActivities:::size"]=0
operation_parameters_minimum_occurences["getActivities:::page"]=0
operation_parameters_minimum_occurences["getActivities:::order"]=0
operation_parameters_minimum_occurences["getActivity:::id"]=1
operation_parameters_minimum_occurences["getActivityTemplate:::id"]=1
operation_parameters_minimum_occurences["getActivityTemplates:::size"]=0
operation_parameters_minimum_occurences["getActivityTemplates:::page"]=0
operation_parameters_minimum_occurences["getActivityTemplates:::order"]=0
operation_parameters_minimum_occurences["setActivityOccurrenceResults:::activity_occurrence_id"]=1
operation_parameters_minimum_occurences["setActivityOccurrenceResults:::activity_occurrence_results"]=0
operation_parameters_minimum_occurences["updateActivity:::id"]=1
operation_parameters_minimum_occurences["updateActivity:::activity_resource"]=0
operation_parameters_minimum_occurences["updateActivityOccurrence:::activity_occurrence_id"]=1
operation_parameters_minimum_occurences["updateActivityOccurrence:::activity_cccurrence_status"]=0
operation_parameters_minimum_occurences["updateActivityTemplate:::id"]=1
operation_parameters_minimum_occurences["updateActivityTemplate:::activity_template_resource"]=0
operation_parameters_minimum_occurences["getDownloadURL:::bucket"]=0
operation_parameters_minimum_occurences["getDownloadURL:::path"]=0
operation_parameters_minimum_occurences["getDownloadURL:::expiration"]=0
operation_parameters_minimum_occurences["getSignedS3URL:::filename"]=0
operation_parameters_minimum_occurences["getSignedS3URL:::content_type"]=0
operation_parameters_minimum_occurences["createClient:::client_resource"]=0
operation_parameters_minimum_occurences["deleteClient:::client_key"]=1
operation_parameters_minimum_occurences["getClient:::client_key"]=1
operation_parameters_minimum_occurences["getClients:::size"]=0
operation_parameters_minimum_occurences["getClients:::page"]=0
operation_parameters_minimum_occurences["getClients:::order"]=0
operation_parameters_minimum_occurences["setClientGrantTypes:::client_key"]=1
operation_parameters_minimum_occurences["setClientGrantTypes:::grant_list"]=0
operation_parameters_minimum_occurences["setClientRedirectUris:::client_key"]=1
operation_parameters_minimum_occurences["setClientRedirectUris:::redirect_list"]=0
operation_parameters_minimum_occurences["updateClient:::client_key"]=1
operation_parameters_minimum_occurences["updateClient:::client_resource"]=0
operation_parameters_minimum_occurences["createPermission:::permission_resource"]=0
operation_parameters_minimum_occurences["deletePermission:::permission"]=1
operation_parameters_minimum_occurences["deletePermission:::force"]=0
operation_parameters_minimum_occurences["getPermission:::permission"]=1
operation_parameters_minimum_occurences["getPermissions:::size"]=0
operation_parameters_minimum_occurences["getPermissions:::page"]=0
operation_parameters_minimum_occurences["getPermissions:::order"]=0
operation_parameters_minimum_occurences["updatePermission:::permission"]=1
operation_parameters_minimum_occurences["updatePermission:::permission_resource"]=0
operation_parameters_minimum_occurences["createRole:::role_resource"]=0
operation_parameters_minimum_occurences["deleteRole:::role"]=1
operation_parameters_minimum_occurences["deleteRole:::force"]=0
operation_parameters_minimum_occurences["getClientRoles:::client_key"]=1
operation_parameters_minimum_occurences["getRole:::role"]=1
operation_parameters_minimum_occurences["getRoles:::filter_name"]=0
operation_parameters_minimum_occurences["getRoles:::filter_role"]=0
operation_parameters_minimum_occurences["getRoles:::size"]=0
operation_parameters_minimum_occurences["getRoles:::page"]=0
operation_parameters_minimum_occurences["getRoles:::order"]=0
operation_parameters_minimum_occurences["getUserRoles:::user_id"]=1
operation_parameters_minimum_occurences["setClientRoles:::client_key"]=1
operation_parameters_minimum_occurences["setClientRoles:::roles_list"]=0
operation_parameters_minimum_occurences["setPermissionsForRole:::role"]=1
operation_parameters_minimum_occurences["setPermissionsForRole:::permissions_list"]=0
operation_parameters_minimum_occurences["setUserRoles:::user_id"]=1
operation_parameters_minimum_occurences["setUserRoles:::roles_list"]=0
operation_parameters_minimum_occurences["updateRole:::role"]=1
operation_parameters_minimum_occurences["updateRole:::role_resource"]=0
operation_parameters_minimum_occurences["deleteTokens:::username"]=0
operation_parameters_minimum_occurences["deleteTokens:::client_id"]=0
operation_parameters_minimum_occurences["getToken:::username"]=1
operation_parameters_minimum_occurences["getToken:::client_id"]=1
operation_parameters_minimum_occurences["getTokens:::filter_client_id"]=0
operation_parameters_minimum_occurences["getTokens:::filter_username"]=0
operation_parameters_minimum_occurences["getTokens:::size"]=0
operation_parameters_minimum_occurences["getTokens:::page"]=0
operation_parameters_minimum_occurences["getTokens:::order"]=0
operation_parameters_minimum_occurences["getBREActions:::filter_category"]=0
operation_parameters_minimum_occurences["getBREActions:::filter_name"]=0
operation_parameters_minimum_occurences["getBREActions:::filter_tags"]=0
operation_parameters_minimum_occurences["getBREActions:::filter_search"]=0
operation_parameters_minimum_occurences["createBRECategoryTemplate:::template"]=0
operation_parameters_minimum_occurences["deleteBRECategoryTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteBRECategoryTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getBRECategories:::size"]=0
operation_parameters_minimum_occurences["getBRECategories:::page"]=0
operation_parameters_minimum_occurences["getBRECategory:::name"]=1
operation_parameters_minimum_occurences["getBRECategoryTemplate:::id"]=1
operation_parameters_minimum_occurences["getBRECategoryTemplates:::size"]=0
operation_parameters_minimum_occurences["getBRECategoryTemplates:::page"]=0
operation_parameters_minimum_occurences["getBRECategoryTemplates:::order"]=0
operation_parameters_minimum_occurences["updateBRECategory:::name"]=1
operation_parameters_minimum_occurences["updateBRECategory:::category"]=0
operation_parameters_minimum_occurences["updateBRECategoryTemplate:::id"]=1
operation_parameters_minimum_occurences["updateBRECategoryTemplate:::template"]=0
operation_parameters_minimum_occurences["sendBREEvent:::bre_event"]=0
operation_parameters_minimum_occurences["createBREGlobal:::bre_global_resource"]=0
operation_parameters_minimum_occurences["deleteBREGlobal:::id"]=1
operation_parameters_minimum_occurences["getBREGlobal:::id"]=1
operation_parameters_minimum_occurences["getBREGlobals:::filter_system"]=0
operation_parameters_minimum_occurences["getBREGlobals:::size"]=0
operation_parameters_minimum_occurences["getBREGlobals:::page"]=0
operation_parameters_minimum_occurences["updateBREGlobal:::id"]=1
operation_parameters_minimum_occurences["updateBREGlobal:::bre_global_resource"]=0
operation_parameters_minimum_occurences["createBRERule:::bre_rule"]=0
operation_parameters_minimum_occurences["deleteBRERule:::id"]=1
operation_parameters_minimum_occurences["getBREExpressionAsString:::expression"]=0
operation_parameters_minimum_occurences["getBRERule:::id"]=1
operation_parameters_minimum_occurences["getBRERules:::filter_name"]=0
operation_parameters_minimum_occurences["getBRERules:::filter_enabled"]=0
operation_parameters_minimum_occurences["getBRERules:::filter_system"]=0
operation_parameters_minimum_occurences["getBRERules:::filter_trigger"]=0
operation_parameters_minimum_occurences["getBRERules:::filter_action"]=0
operation_parameters_minimum_occurences["getBRERules:::filter_condition"]=0
operation_parameters_minimum_occurences["getBRERules:::size"]=0
operation_parameters_minimum_occurences["getBRERules:::page"]=0
operation_parameters_minimum_occurences["setBRERule:::id"]=1
operation_parameters_minimum_occurences["setBRERule:::enabled"]=0
operation_parameters_minimum_occurences["updateBRERule:::id"]=1
operation_parameters_minimum_occurences["updateBRERule:::bre_rule"]=0
operation_parameters_minimum_occurences["createBRETrigger:::bre_trigger_resource"]=0
operation_parameters_minimum_occurences["deleteBRETrigger:::event_name"]=1
operation_parameters_minimum_occurences["getBRETrigger:::event_name"]=1
operation_parameters_minimum_occurences["getBRETriggers:::filter_system"]=0
operation_parameters_minimum_occurences["getBRETriggers:::filter_category"]=0
operation_parameters_minimum_occurences["getBRETriggers:::filter_tags"]=0
operation_parameters_minimum_occurences["getBRETriggers:::filter_name"]=0
operation_parameters_minimum_occurences["getBRETriggers:::filter_search"]=0
operation_parameters_minimum_occurences["getBRETriggers:::size"]=0
operation_parameters_minimum_occurences["getBRETriggers:::page"]=0
operation_parameters_minimum_occurences["updateBRETrigger:::event_name"]=1
operation_parameters_minimum_occurences["updateBRETrigger:::bre_trigger_resource"]=0
operation_parameters_minimum_occurences["getBREVariableValues:::name"]=1
operation_parameters_minimum_occurences["getBREVariableValues:::filter_name"]=0
operation_parameters_minimum_occurences["getBREVariableValues:::size"]=0
operation_parameters_minimum_occurences["getBREVariableValues:::page"]=0
operation_parameters_minimum_occurences["addChallengeToCampaign:::id"]=1
operation_parameters_minimum_occurences["addChallengeToCampaign:::challenge_id"]=0
operation_parameters_minimum_occurences["createCampaign:::campaign_resource"]=0
operation_parameters_minimum_occurences["createCampaignTemplate:::campaign_template_resource"]=0
operation_parameters_minimum_occurences["deleteCampaign:::id"]=1
operation_parameters_minimum_occurences["deleteCampaignTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteCampaignTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getCampaign:::id"]=1
operation_parameters_minimum_occurences["getCampaignChallenges:::id"]=1
operation_parameters_minimum_occurences["getCampaignChallenges:::filter_start_date"]=0
operation_parameters_minimum_occurences["getCampaignChallenges:::filter_end_date"]=0
operation_parameters_minimum_occurences["getCampaignChallenges:::size"]=0
operation_parameters_minimum_occurences["getCampaignChallenges:::page"]=0
operation_parameters_minimum_occurences["getCampaignChallenges:::order"]=0
operation_parameters_minimum_occurences["getCampaignTemplate:::id"]=1
operation_parameters_minimum_occurences["getCampaignTemplates:::size"]=0
operation_parameters_minimum_occurences["getCampaignTemplates:::page"]=0
operation_parameters_minimum_occurences["getCampaignTemplates:::order"]=0
operation_parameters_minimum_occurences["getCampaigns:::filter_active"]=0
operation_parameters_minimum_occurences["getCampaigns:::size"]=0
operation_parameters_minimum_occurences["getCampaigns:::page"]=0
operation_parameters_minimum_occurences["getCampaigns:::order"]=0
operation_parameters_minimum_occurences["removeChallengeFromCampaign:::campaign_id"]=1
operation_parameters_minimum_occurences["removeChallengeFromCampaign:::id"]=1
operation_parameters_minimum_occurences["updateCampaign:::id"]=1
operation_parameters_minimum_occurences["updateCampaign:::campaign_resource"]=0
operation_parameters_minimum_occurences["updateCampaignTemplate:::id"]=1
operation_parameters_minimum_occurences["updateCampaignTemplate:::campaign_template_resource"]=0
operation_parameters_minimum_occurences["createChallenge:::challenge_resource"]=0
operation_parameters_minimum_occurences["createChallengeActivity:::challenge_id"]=1
operation_parameters_minimum_occurences["createChallengeActivity:::challenge_activity_resource"]=0
operation_parameters_minimum_occurences["createChallengeActivity:::validateSettings"]=0
operation_parameters_minimum_occurences["createChallengeActivityTemplate:::challengeActivity_template_resource"]=0
operation_parameters_minimum_occurences["createChallengeTemplate:::challenge_template_resource"]=0
operation_parameters_minimum_occurences["deleteChallenge:::id"]=1
operation_parameters_minimum_occurences["deleteChallengeActivity:::id"]=1
operation_parameters_minimum_occurences["deleteChallengeActivity:::challenge_id"]=1
operation_parameters_minimum_occurences["deleteChallengeActivityTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteChallengeActivityTemplate:::cascade"]=0
operation_parameters_minimum_occurences["deleteChallengeEvent:::id"]=1
operation_parameters_minimum_occurences["deleteChallengeTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteChallengeTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getChallenge:::id"]=1
operation_parameters_minimum_occurences["getChallengeActivities:::challenge_id"]=1
operation_parameters_minimum_occurences["getChallengeActivities:::size"]=0
operation_parameters_minimum_occurences["getChallengeActivities:::page"]=0
operation_parameters_minimum_occurences["getChallengeActivities:::order"]=0
operation_parameters_minimum_occurences["getChallengeActivity:::id"]=1
operation_parameters_minimum_occurences["getChallengeActivity:::challenge_id"]=1
operation_parameters_minimum_occurences["getChallengeActivityTemplate:::id"]=1
operation_parameters_minimum_occurences["getChallengeActivityTemplates:::size"]=0
operation_parameters_minimum_occurences["getChallengeActivityTemplates:::page"]=0
operation_parameters_minimum_occurences["getChallengeActivityTemplates:::order"]=0
operation_parameters_minimum_occurences["getChallengeEvent:::id"]=1
operation_parameters_minimum_occurences["getChallengeEvents:::filter_start_date"]=0
operation_parameters_minimum_occurences["getChallengeEvents:::filter_end_date"]=0
operation_parameters_minimum_occurences["getChallengeEvents:::filter_campaigns"]=0
operation_parameters_minimum_occurences["getChallengeEvents:::filter_challenge"]=0
operation_parameters_minimum_occurences["getChallengeEvents:::size"]=0
operation_parameters_minimum_occurences["getChallengeEvents:::page"]=0
operation_parameters_minimum_occurences["getChallengeEvents:::order"]=0
operation_parameters_minimum_occurences["getChallengeTemplate:::id"]=1
operation_parameters_minimum_occurences["getChallengeTemplates:::size"]=0
operation_parameters_minimum_occurences["getChallengeTemplates:::page"]=0
operation_parameters_minimum_occurences["getChallengeTemplates:::order"]=0
operation_parameters_minimum_occurences["getChallenges:::filter_template"]=0
operation_parameters_minimum_occurences["getChallenges:::filter_active_campaign"]=0
operation_parameters_minimum_occurences["getChallenges:::filter_start_date"]=0
operation_parameters_minimum_occurences["getChallenges:::filter_end_date"]=0
operation_parameters_minimum_occurences["getChallenges:::size"]=0
operation_parameters_minimum_occurences["getChallenges:::page"]=0
operation_parameters_minimum_occurences["getChallenges:::order"]=0
operation_parameters_minimum_occurences["updateChallenge:::id"]=1
operation_parameters_minimum_occurences["updateChallenge:::challenge_resource"]=0
operation_parameters_minimum_occurences["updateChallengeActivity:::id"]=1
operation_parameters_minimum_occurences["updateChallengeActivity:::challenge_id"]=1
operation_parameters_minimum_occurences["updateChallengeActivity:::challenge_activity_resource"]=0
operation_parameters_minimum_occurences["updateChallengeActivityTemplate:::id"]=1
operation_parameters_minimum_occurences["updateChallengeActivityTemplate:::challengeActivity_template_resource"]=0
operation_parameters_minimum_occurences["updateChallengeTemplate:::id"]=1
operation_parameters_minimum_occurences["updateChallengeTemplate:::challenge_template_resource"]=0
operation_parameters_minimum_occurences["createRewardSet:::reward_set_resource"]=0
operation_parameters_minimum_occurences["deleteRewardSet:::id"]=1
operation_parameters_minimum_occurences["getRewardSet:::id"]=1
operation_parameters_minimum_occurences["getRewardSets:::size"]=0
operation_parameters_minimum_occurences["getRewardSets:::page"]=0
operation_parameters_minimum_occurences["getRewardSets:::order"]=0
operation_parameters_minimum_occurences["updateRewardSet:::id"]=1
operation_parameters_minimum_occurences["updateRewardSet:::reward_set_resource"]=0
operation_parameters_minimum_occurences["createCategory:::category"]=0
operation_parameters_minimum_occurences["createCategoryTemplate:::template"]=0
operation_parameters_minimum_occurences["deleteCategory:::id"]=1
operation_parameters_minimum_occurences["deleteCategoryTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteCategoryTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getCategories:::filter_search"]=0
operation_parameters_minimum_occurences["getCategories:::filter_active"]=0
operation_parameters_minimum_occurences["getCategories:::size"]=0
operation_parameters_minimum_occurences["getCategories:::page"]=0
operation_parameters_minimum_occurences["getCategories:::order"]=0
operation_parameters_minimum_occurences["getCategory:::id"]=1
operation_parameters_minimum_occurences["getCategoryTemplate:::id"]=1
operation_parameters_minimum_occurences["getCategoryTemplates:::size"]=0
operation_parameters_minimum_occurences["getCategoryTemplates:::page"]=0
operation_parameters_minimum_occurences["getCategoryTemplates:::order"]=0
operation_parameters_minimum_occurences["getTags:::size"]=0
operation_parameters_minimum_occurences["getTags:::page"]=0
operation_parameters_minimum_occurences["updateCategory:::id"]=1
operation_parameters_minimum_occurences["updateCategory:::category"]=0
operation_parameters_minimum_occurences["updateCategoryTemplate:::id"]=1
operation_parameters_minimum_occurences["updateCategoryTemplate:::template"]=0
operation_parameters_minimum_occurences["createConfig:::config"]=0
operation_parameters_minimum_occurences["deleteConfig:::name"]=1
operation_parameters_minimum_occurences["getConfig:::name"]=1
operation_parameters_minimum_occurences["getConfigs:::filter_search"]=0
operation_parameters_minimum_occurences["getConfigs:::size"]=0
operation_parameters_minimum_occurences["getConfigs:::page"]=0
operation_parameters_minimum_occurences["getConfigs:::order"]=0
operation_parameters_minimum_occurences["updateConfig:::name"]=1
operation_parameters_minimum_occurences["updateConfig:::config"]=0
operation_parameters_minimum_occurences["createArticle:::article_resource"]=0
operation_parameters_minimum_occurences["createArticleTemplate:::article_template_resource"]=0
operation_parameters_minimum_occurences["deleteArticle:::id"]=1
operation_parameters_minimum_occurences["deleteArticleTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteArticleTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getArticle:::id"]=1
operation_parameters_minimum_occurences["getArticleTemplate:::id"]=1
operation_parameters_minimum_occurences["getArticleTemplates:::size"]=0
operation_parameters_minimum_occurences["getArticleTemplates:::page"]=0
operation_parameters_minimum_occurences["getArticleTemplates:::order"]=0
operation_parameters_minimum_occurences["getArticles:::filter_active_only"]=0
operation_parameters_minimum_occurences["getArticles:::filter_category"]=0
operation_parameters_minimum_occurences["getArticles:::filter_tagset"]=0
operation_parameters_minimum_occurences["getArticles:::filter_tag_intersection"]=0
operation_parameters_minimum_occurences["getArticles:::filter_tag_exclusion"]=0
operation_parameters_minimum_occurences["getArticles:::filter_title"]=0
operation_parameters_minimum_occurences["getArticles:::size"]=0
operation_parameters_minimum_occurences["getArticles:::page"]=0
operation_parameters_minimum_occurences["getArticles:::order"]=0
operation_parameters_minimum_occurences["updateArticle:::id"]=1
operation_parameters_minimum_occurences["updateArticle:::article_resource"]=0
operation_parameters_minimum_occurences["updateArticleTemplate:::id"]=1
operation_parameters_minimum_occurences["updateArticleTemplate:::article_template_resource"]=0
operation_parameters_minimum_occurences["addComment:::comment_resource"]=0
operation_parameters_minimum_occurences["deleteComment:::id"]=1
operation_parameters_minimum_occurences["getComment:::id"]=1
operation_parameters_minimum_occurences["getComments:::context"]=1
operation_parameters_minimum_occurences["getComments:::context_id"]=1
operation_parameters_minimum_occurences["getComments:::size"]=0
operation_parameters_minimum_occurences["getComments:::page"]=0
operation_parameters_minimum_occurences["searchComments:::query"]=0
operation_parameters_minimum_occurences["searchComments:::size"]=0
operation_parameters_minimum_occurences["searchComments:::page"]=0
operation_parameters_minimum_occurences["updateComment:::id"]=1
operation_parameters_minimum_occurences["updateComment:::content"]=0
operation_parameters_minimum_occurences["answerPoll:::id"]=1
operation_parameters_minimum_occurences["answerPoll:::answer_key"]=0
operation_parameters_minimum_occurences["createPoll:::poll_resource"]=0
operation_parameters_minimum_occurences["createPollTemplate:::poll_template_resource"]=0
operation_parameters_minimum_occurences["deletePoll:::id"]=1
operation_parameters_minimum_occurences["deletePollTemplate:::id"]=1
operation_parameters_minimum_occurences["deletePollTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getPoll:::id"]=1
operation_parameters_minimum_occurences["getPollAnswer:::id"]=1
operation_parameters_minimum_occurences["getPollTemplate:::id"]=1
operation_parameters_minimum_occurences["getPollTemplates:::size"]=0
operation_parameters_minimum_occurences["getPollTemplates:::page"]=0
operation_parameters_minimum_occurences["getPollTemplates:::order"]=0
operation_parameters_minimum_occurences["getPolls:::filter_category"]=0
operation_parameters_minimum_occurences["getPolls:::filter_tagset"]=0
operation_parameters_minimum_occurences["getPolls:::filter_text"]=0
operation_parameters_minimum_occurences["getPolls:::size"]=0
operation_parameters_minimum_occurences["getPolls:::page"]=0
operation_parameters_minimum_occurences["getPolls:::order"]=0
operation_parameters_minimum_occurences["updatePoll:::id"]=1
operation_parameters_minimum_occurences["updatePoll:::poll_resource"]=0
operation_parameters_minimum_occurences["updatePollTemplate:::id"]=1
operation_parameters_minimum_occurences["updatePollTemplate:::poll_template_resource"]=0
operation_parameters_minimum_occurences["createCurrency:::currency"]=0
operation_parameters_minimum_occurences["deleteCurrency:::code"]=1
operation_parameters_minimum_occurences["getCurrencies:::filter_enabled_currencies"]=0
operation_parameters_minimum_occurences["getCurrencies:::filter_type"]=0
operation_parameters_minimum_occurences["getCurrencies:::size"]=0
operation_parameters_minimum_occurences["getCurrencies:::page"]=0
operation_parameters_minimum_occurences["getCurrencies:::order"]=0
operation_parameters_minimum_occurences["getCurrency:::code"]=1
operation_parameters_minimum_occurences["updateCurrency:::code"]=1
operation_parameters_minimum_occurences["updateCurrency:::currency"]=0
operation_parameters_minimum_occurences["addDeviceUsers:::userResources"]=1
operation_parameters_minimum_occurences["addDeviceUsers:::id"]=1
operation_parameters_minimum_occurences["createDevice:::device"]=1
operation_parameters_minimum_occurences["deleteDevice:::id"]=1
operation_parameters_minimum_occurences["deleteDeviceUser:::id"]=1
operation_parameters_minimum_occurences["deleteDeviceUser:::user_id"]=1
operation_parameters_minimum_occurences["deleteDeviceUsers:::id"]=1
operation_parameters_minimum_occurences["deleteDeviceUsers:::filter_id"]=0
operation_parameters_minimum_occurences["getDevice:::id"]=1
operation_parameters_minimum_occurences["getDevices:::filter_make"]=0
operation_parameters_minimum_occurences["getDevices:::filter_model"]=0
operation_parameters_minimum_occurences["getDevices:::size"]=0
operation_parameters_minimum_occurences["getDevices:::page"]=0
operation_parameters_minimum_occurences["getDevices:::order"]=0
operation_parameters_minimum_occurences["updateDevice:::device"]=1
operation_parameters_minimum_occurences["updateDevice:::id"]=1
operation_parameters_minimum_occurences["addDisposition:::disposition"]=0
operation_parameters_minimum_occurences["deleteDisposition:::id"]=1
operation_parameters_minimum_occurences["getDisposition:::id"]=1
operation_parameters_minimum_occurences["getDispositionCounts:::filter_context"]=0
operation_parameters_minimum_occurences["getDispositionCounts:::filter_owner"]=0
operation_parameters_minimum_occurences["getDispositions:::filter_context"]=0
operation_parameters_minimum_occurences["getDispositions:::filter_owner"]=0
operation_parameters_minimum_occurences["getDispositions:::size"]=0
operation_parameters_minimum_occurences["getDispositions:::page"]=0
operation_parameters_minimum_occurences["getDispositions:::order"]=0
operation_parameters_minimum_occurences["createFulfillmentType:::type"]=0
operation_parameters_minimum_occurences["deleteFulfillmentType:::id"]=1
operation_parameters_minimum_occurences["getFulfillmentType:::id"]=1
operation_parameters_minimum_occurences["getFulfillmentTypes:::size"]=0
operation_parameters_minimum_occurences["getFulfillmentTypes:::page"]=0
operation_parameters_minimum_occurences["getFulfillmentTypes:::order"]=0
operation_parameters_minimum_occurences["updateFulfillmentType:::id"]=1
operation_parameters_minimum_occurences["updateFulfillmentType:::fulfillmentType"]=0
operation_parameters_minimum_occurences["createAchievement:::achievement"]=0
operation_parameters_minimum_occurences["createAchievementTemplate:::template"]=0
operation_parameters_minimum_occurences["deleteAchievement:::name"]=1
operation_parameters_minimum_occurences["deleteAchievementTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteAchievementTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getAchievement:::name"]=1
operation_parameters_minimum_occurences["getAchievementTemplate:::id"]=1
operation_parameters_minimum_occurences["getAchievementTemplates:::size"]=0
operation_parameters_minimum_occurences["getAchievementTemplates:::page"]=0
operation_parameters_minimum_occurences["getAchievementTemplates:::order"]=0
operation_parameters_minimum_occurences["getAchievements:::filter_tagset"]=0
operation_parameters_minimum_occurences["getAchievements:::filter_name"]=0
operation_parameters_minimum_occurences["getAchievements:::filter_hidden"]=0
operation_parameters_minimum_occurences["getAchievements:::size"]=0
operation_parameters_minimum_occurences["getAchievements:::page"]=0
operation_parameters_minimum_occurences["getAchievements:::order"]=0
operation_parameters_minimum_occurences["getAchievements:::filter_derived"]=0
operation_parameters_minimum_occurences["getDerivedAchievements:::name"]=1
operation_parameters_minimum_occurences["getUserAchievementProgress:::user_id"]=1
operation_parameters_minimum_occurences["getUserAchievementProgress:::achievement_name"]=1
operation_parameters_minimum_occurences["getUserAchievementsProgress:::user_id"]=1
operation_parameters_minimum_occurences["getUserAchievementsProgress:::filter_achievement_derived"]=0
operation_parameters_minimum_occurences["getUserAchievementsProgress:::filter_achievement_tagset"]=0
operation_parameters_minimum_occurences["getUserAchievementsProgress:::filter_achievement_name"]=0
operation_parameters_minimum_occurences["getUserAchievementsProgress:::size"]=0
operation_parameters_minimum_occurences["getUserAchievementsProgress:::page"]=0
operation_parameters_minimum_occurences["getUsersAchievementProgress:::achievement_name"]=1
operation_parameters_minimum_occurences["getUsersAchievementProgress:::filter_achievement_derived"]=0
operation_parameters_minimum_occurences["getUsersAchievementProgress:::filter_achievement_tagset"]=0
operation_parameters_minimum_occurences["getUsersAchievementProgress:::filter_achievement_name"]=0
operation_parameters_minimum_occurences["getUsersAchievementProgress:::size"]=0
operation_parameters_minimum_occurences["getUsersAchievementProgress:::page"]=0
operation_parameters_minimum_occurences["getUsersAchievementsProgress:::filter_achievement_derived"]=0
operation_parameters_minimum_occurences["getUsersAchievementsProgress:::filter_achievement_tagset"]=0
operation_parameters_minimum_occurences["getUsersAchievementsProgress:::filter_achievement_name"]=0
operation_parameters_minimum_occurences["getUsersAchievementsProgress:::size"]=0
operation_parameters_minimum_occurences["getUsersAchievementsProgress:::page"]=0
operation_parameters_minimum_occurences["incrementAchievementProgress:::user_id"]=1
operation_parameters_minimum_occurences["incrementAchievementProgress:::achievement_name"]=1
operation_parameters_minimum_occurences["incrementAchievementProgress:::progress"]=0
operation_parameters_minimum_occurences["setAchievementProgress:::user_id"]=1
operation_parameters_minimum_occurences["setAchievementProgress:::achievement_name"]=1
operation_parameters_minimum_occurences["setAchievementProgress:::progress"]=0
operation_parameters_minimum_occurences["updateAchievement:::name"]=1
operation_parameters_minimum_occurences["updateAchievement:::achievement"]=0
operation_parameters_minimum_occurences["updateAchievementTemplate:::id"]=1
operation_parameters_minimum_occurences["updateAchievementTemplate:::template"]=0
operation_parameters_minimum_occurences["getLeaderboard:::context_type"]=1
operation_parameters_minimum_occurences["getLeaderboard:::context_id"]=1
operation_parameters_minimum_occurences["getLeaderboard:::size"]=0
operation_parameters_minimum_occurences["getLeaderboard:::page"]=0
operation_parameters_minimum_occurences["getLeaderboard:::order"]=0
operation_parameters_minimum_occurences["getLeaderboardRank:::context_type"]=1
operation_parameters_minimum_occurences["getLeaderboardRank:::context_id"]=1
operation_parameters_minimum_occurences["getLeaderboardRank:::id"]=1
operation_parameters_minimum_occurences["createLevel:::level"]=0
operation_parameters_minimum_occurences["deleteLevel:::name"]=1
operation_parameters_minimum_occurences["getLevel:::name"]=1
operation_parameters_minimum_occurences["getLevels:::filter_name"]=0
operation_parameters_minimum_occurences["getLevels:::size"]=0
operation_parameters_minimum_occurences["getLevels:::page"]=0
operation_parameters_minimum_occurences["getLevels:::order"]=0
operation_parameters_minimum_occurences["getUserLevel:::user_id"]=1
operation_parameters_minimum_occurences["getUserLevel:::name"]=1
operation_parameters_minimum_occurences["getUserLevels:::user_id"]=1
operation_parameters_minimum_occurences["getUserLevels:::filter_name"]=0
operation_parameters_minimum_occurences["getUserLevels:::size"]=0
operation_parameters_minimum_occurences["getUserLevels:::page"]=0
operation_parameters_minimum_occurences["getUserLevels:::order"]=0
operation_parameters_minimum_occurences["incrementProgress:::user_id"]=1
operation_parameters_minimum_occurences["incrementProgress:::name"]=1
operation_parameters_minimum_occurences["incrementProgress:::progress"]=0
operation_parameters_minimum_occurences["setProgress:::user_id"]=1
operation_parameters_minimum_occurences["setProgress:::name"]=1
operation_parameters_minimum_occurences["setProgress:::progress"]=0
operation_parameters_minimum_occurences["updateLevel:::name"]=1
operation_parameters_minimum_occurences["updateLevel:::newLevel"]=0
operation_parameters_minimum_occurences["addMetric:::metric"]=0
operation_parameters_minimum_occurences["addQuestionAnswers:::question_id"]=1
operation_parameters_minimum_occurences["addQuestionAnswers:::answer"]=0
operation_parameters_minimum_occurences["addQuestionTag:::id"]=1
operation_parameters_minimum_occurences["addQuestionTag:::tag"]=0
operation_parameters_minimum_occurences["addTagToQuestionsBatch:::tag"]=0
operation_parameters_minimum_occurences["addTagToQuestionsBatch:::filter_search"]=0
operation_parameters_minimum_occurences["addTagToQuestionsBatch:::filter_idset"]=0
operation_parameters_minimum_occurences["addTagToQuestionsBatch:::filter_category"]=0
operation_parameters_minimum_occurences["addTagToQuestionsBatch:::filter_tag"]=0
operation_parameters_minimum_occurences["addTagToQuestionsBatch:::filter_tagset"]=0
operation_parameters_minimum_occurences["addTagToQuestionsBatch:::filter_type"]=0
operation_parameters_minimum_occurences["addTagToQuestionsBatch:::filter_published"]=0
operation_parameters_minimum_occurences["addTagToQuestionsBatch:::filter_import_id"]=0
operation_parameters_minimum_occurences["createImportJob:::request"]=0
operation_parameters_minimum_occurences["createQuestion:::question"]=0
operation_parameters_minimum_occurences["createQuestionTemplate:::question_template_resource"]=0
operation_parameters_minimum_occurences["deleteImportJob:::id"]=1
operation_parameters_minimum_occurences["deleteQuestion:::id"]=1
operation_parameters_minimum_occurences["deleteQuestionAnswers:::question_id"]=1
operation_parameters_minimum_occurences["deleteQuestionAnswers:::id"]=1
operation_parameters_minimum_occurences["deleteQuestionTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteQuestionTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getImportJob:::id"]=1
operation_parameters_minimum_occurences["getImportJobs:::filter_vendor"]=0
operation_parameters_minimum_occurences["getImportJobs:::filter_category"]=0
operation_parameters_minimum_occurences["getImportJobs:::filter_name"]=0
operation_parameters_minimum_occurences["getImportJobs:::filter_status"]=0
operation_parameters_minimum_occurences["getImportJobs:::size"]=0
operation_parameters_minimum_occurences["getImportJobs:::page"]=0
operation_parameters_minimum_occurences["getImportJobs:::order"]=0
operation_parameters_minimum_occurences["getQuestion:::id"]=1
operation_parameters_minimum_occurences["getQuestionAnswer:::question_id"]=1
operation_parameters_minimum_occurences["getQuestionAnswer:::id"]=1
operation_parameters_minimum_occurences["getQuestionAnswers:::question_id"]=1
operation_parameters_minimum_occurences["getQuestionDeltas:::since"]=0
operation_parameters_minimum_occurences["getQuestionTags:::id"]=1
operation_parameters_minimum_occurences["getQuestionTemplate:::id"]=1
operation_parameters_minimum_occurences["getQuestionTemplates:::size"]=0
operation_parameters_minimum_occurences["getQuestionTemplates:::page"]=0
operation_parameters_minimum_occurences["getQuestionTemplates:::order"]=0
operation_parameters_minimum_occurences["getQuestions:::size"]=0
operation_parameters_minimum_occurences["getQuestions:::page"]=0
operation_parameters_minimum_occurences["getQuestions:::order"]=0
operation_parameters_minimum_occurences["getQuestions:::filter_search"]=0
operation_parameters_minimum_occurences["getQuestions:::filter_idset"]=0
operation_parameters_minimum_occurences["getQuestions:::filter_category"]=0
operation_parameters_minimum_occurences["getQuestions:::filter_tagset"]=0
operation_parameters_minimum_occurences["getQuestions:::filter_tag"]=0
operation_parameters_minimum_occurences["getQuestions:::filter_type"]=0
operation_parameters_minimum_occurences["getQuestions:::filter_published"]=0
operation_parameters_minimum_occurences["getQuestions:::filter_import_id"]=0
operation_parameters_minimum_occurences["getQuestionsCount:::filter_search"]=0
operation_parameters_minimum_occurences["getQuestionsCount:::filter_idset"]=0
operation_parameters_minimum_occurences["getQuestionsCount:::filter_category"]=0
operation_parameters_minimum_occurences["getQuestionsCount:::filter_tag"]=0
operation_parameters_minimum_occurences["getQuestionsCount:::filter_tagset"]=0
operation_parameters_minimum_occurences["getQuestionsCount:::filter_type"]=0
operation_parameters_minimum_occurences["getQuestionsCount:::filter_published"]=0
operation_parameters_minimum_occurences["processImportJob:::id"]=1
operation_parameters_minimum_occurences["processImportJob:::publish_now"]=1
operation_parameters_minimum_occurences["removeQuestionTag:::id"]=1
operation_parameters_minimum_occurences["removeQuestionTag:::tag"]=1
operation_parameters_minimum_occurences["removeTagToQuestionsBatch:::tag"]=1
operation_parameters_minimum_occurences["removeTagToQuestionsBatch:::filter_search"]=0
operation_parameters_minimum_occurences["removeTagToQuestionsBatch:::filter_idset"]=0
operation_parameters_minimum_occurences["removeTagToQuestionsBatch:::filter_category"]=0
operation_parameters_minimum_occurences["removeTagToQuestionsBatch:::filter_tag"]=0
operation_parameters_minimum_occurences["removeTagToQuestionsBatch:::filter_tagset"]=0
operation_parameters_minimum_occurences["removeTagToQuestionsBatch:::filter_type"]=0
operation_parameters_minimum_occurences["removeTagToQuestionsBatch:::filter_published"]=0
operation_parameters_minimum_occurences["removeTagToQuestionsBatch:::filter_import_id"]=0
operation_parameters_minimum_occurences["searchQuestionTags:::filter_search"]=0
operation_parameters_minimum_occurences["searchQuestionTags:::filter_category"]=0
operation_parameters_minimum_occurences["searchQuestionTags:::filter_import_id"]=0
operation_parameters_minimum_occurences["updateImportJob:::id"]=1
operation_parameters_minimum_occurences["updateImportJob:::request"]=0
operation_parameters_minimum_occurences["updateQuestion:::id"]=1
operation_parameters_minimum_occurences["updateQuestion:::question"]=0
operation_parameters_minimum_occurences["updateQuestionAnswer:::question_id"]=1
operation_parameters_minimum_occurences["updateQuestionAnswer:::id"]=1
operation_parameters_minimum_occurences["updateQuestionAnswer:::answer"]=0
operation_parameters_minimum_occurences["updateQuestionTemplate:::id"]=1
operation_parameters_minimum_occurences["updateQuestionTemplate:::question_template_resource"]=0
operation_parameters_minimum_occurences["updateQuestionsInBulk:::question"]=0
operation_parameters_minimum_occurences["updateQuestionsInBulk:::filter_search"]=0
operation_parameters_minimum_occurences["updateQuestionsInBulk:::filter_idset"]=0
operation_parameters_minimum_occurences["updateQuestionsInBulk:::filter_category"]=0
operation_parameters_minimum_occurences["updateQuestionsInBulk:::filter_tagset"]=0
operation_parameters_minimum_occurences["updateQuestionsInBulk:::filter_type"]=0
operation_parameters_minimum_occurences["updateQuestionsInBulk:::filter_published"]=0
operation_parameters_minimum_occurences["updateQuestionsInBulk:::filter_import_id"]=0
operation_parameters_minimum_occurences["createInvoice:::req"]=0
operation_parameters_minimum_occurences["getInvoice:::id"]=1
operation_parameters_minimum_occurences["getInvoiceLogs:::id"]=1
operation_parameters_minimum_occurences["getInvoiceLogs:::size"]=0
operation_parameters_minimum_occurences["getInvoiceLogs:::page"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_user"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_email"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_fulfillment_status"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_payment_status"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_item_name"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_external_ref"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_created_date"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_vendor_ids"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_currency"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_shipping_state_name"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_shipping_country_name"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_shipping"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_vendor_name"]=0
operation_parameters_minimum_occurences["getInvoices:::filter_sku"]=0
operation_parameters_minimum_occurences["getInvoices:::size"]=0
operation_parameters_minimum_occurences["getInvoices:::page"]=0
operation_parameters_minimum_occurences["getInvoices:::order"]=0
operation_parameters_minimum_occurences["payInvoice:::id"]=1
operation_parameters_minimum_occurences["payInvoice:::request"]=0
operation_parameters_minimum_occurences["setBundledInvoiceItemFulfillmentStatus:::id"]=1
operation_parameters_minimum_occurences["setBundledInvoiceItemFulfillmentStatus:::bundleSku"]=1
operation_parameters_minimum_occurences["setBundledInvoiceItemFulfillmentStatus:::sku"]=1
operation_parameters_minimum_occurences["setBundledInvoiceItemFulfillmentStatus:::status"]=1
operation_parameters_minimum_occurences["setExternalRef:::id"]=1
operation_parameters_minimum_occurences["setExternalRef:::externalRef"]=0
operation_parameters_minimum_occurences["setInvoiceItemFulfillmentStatus:::id"]=1
operation_parameters_minimum_occurences["setInvoiceItemFulfillmentStatus:::sku"]=1
operation_parameters_minimum_occurences["setInvoiceItemFulfillmentStatus:::status"]=1
operation_parameters_minimum_occurences["setOrderNotes:::id"]=1
operation_parameters_minimum_occurences["setOrderNotes:::orderNotes"]=0
operation_parameters_minimum_occurences["setPaymentStatus:::id"]=1
operation_parameters_minimum_occurences["setPaymentStatus:::request"]=0
operation_parameters_minimum_occurences["updateBillingInfo:::id"]=1
operation_parameters_minimum_occurences["updateBillingInfo:::billingInfoRequest"]=0
operation_parameters_minimum_occurences["getCountryStates:::country_code_iso3"]=1
operation_parameters_minimum_occurences["addUserLog:::log_entry"]=0
operation_parameters_minimum_occurences["getBREEventLog:::id"]=1
operation_parameters_minimum_occurences["getBREEventLogs:::filter_start_date"]=0
operation_parameters_minimum_occurences["getBREEventLogs:::filter_event_name"]=0
operation_parameters_minimum_occurences["getBREEventLogs:::filter_event_id"]=0
operation_parameters_minimum_occurences["getBREEventLogs:::size"]=0
operation_parameters_minimum_occurences["getBREEventLogs:::page"]=0
operation_parameters_minimum_occurences["getBREEventLogs:::order"]=0
operation_parameters_minimum_occurences["getBREForwardLog:::id"]=1
operation_parameters_minimum_occurences["getBREForwardLogs:::filter_start_date"]=0
operation_parameters_minimum_occurences["getBREForwardLogs:::filter_end_date"]=0
operation_parameters_minimum_occurences["getBREForwardLogs:::filter_status_code"]=0
operation_parameters_minimum_occurences["getBREForwardLogs:::size"]=0
operation_parameters_minimum_occurences["getBREForwardLogs:::page"]=0
operation_parameters_minimum_occurences["getBREForwardLogs:::order"]=0
operation_parameters_minimum_occurences["getUserLog:::id"]=1
operation_parameters_minimum_occurences["getUserLogs:::filter_user"]=0
operation_parameters_minimum_occurences["getUserLogs:::filter_action_name"]=0
operation_parameters_minimum_occurences["getUserLogs:::size"]=0
operation_parameters_minimum_occurences["getUserLogs:::page"]=0
operation_parameters_minimum_occurences["getUserLogs:::order"]=0
operation_parameters_minimum_occurences["addArtist:::artist_resource"]=0
operation_parameters_minimum_occurences["createArtistTemplate:::artist_template_resource"]=0
operation_parameters_minimum_occurences["deleteArtist:::id"]=1
operation_parameters_minimum_occurences["deleteArtistTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteArtistTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getArtist:::id"]=1
operation_parameters_minimum_occurences["getArtist:::show_contributions"]=0
operation_parameters_minimum_occurences["getArtistTemplate:::id"]=1
operation_parameters_minimum_occurences["getArtistTemplates:::size"]=0
operation_parameters_minimum_occurences["getArtistTemplates:::page"]=0
operation_parameters_minimum_occurences["getArtistTemplates:::order"]=0
operation_parameters_minimum_occurences["getArtists:::filter_artists_by_name"]=0
operation_parameters_minimum_occurences["getArtists:::size"]=0
operation_parameters_minimum_occurences["getArtists:::page"]=0
operation_parameters_minimum_occurences["getArtists:::order"]=0
operation_parameters_minimum_occurences["updateArtist:::id"]=1
operation_parameters_minimum_occurences["updateArtist:::artist_resource"]=0
operation_parameters_minimum_occurences["updateArtistTemplate:::id"]=1
operation_parameters_minimum_occurences["updateArtistTemplate:::artist_template_resource"]=0
operation_parameters_minimum_occurences["getModerationReport:::id"]=1
operation_parameters_minimum_occurences["getModerationReports:::exclude_resolved"]=0
operation_parameters_minimum_occurences["getModerationReports:::filter_context"]=0
operation_parameters_minimum_occurences["getModerationReports:::size"]=0
operation_parameters_minimum_occurences["getModerationReports:::page"]=0
operation_parameters_minimum_occurences["updateModerationReport:::id"]=1
operation_parameters_minimum_occurences["updateModerationReport:::flag_report_resource"]=0
operation_parameters_minimum_occurences["addUserToVideoWhitelist:::id"]=1
operation_parameters_minimum_occurences["addUserToVideoWhitelist:::user_id"]=0
operation_parameters_minimum_occurences["addVideo:::video_resource"]=0
operation_parameters_minimum_occurences["addVideoComment:::video_id"]=1
operation_parameters_minimum_occurences["addVideoComment:::comment_resource"]=0
operation_parameters_minimum_occurences["addVideoContributor:::video_id"]=1
operation_parameters_minimum_occurences["addVideoContributor:::contribution_resource"]=0
operation_parameters_minimum_occurences["addVideoFlag:::video_id"]=1
operation_parameters_minimum_occurences["addVideoFlag:::reason"]=0
operation_parameters_minimum_occurences["addVideoRelationships:::video_id"]=1
operation_parameters_minimum_occurences["addVideoRelationships:::video_relationship_resource"]=0
operation_parameters_minimum_occurences["createVideoDisposition:::video_id"]=1
operation_parameters_minimum_occurences["createVideoDisposition:::disposition_resource"]=0
operation_parameters_minimum_occurences["deleteVideo:::id"]=1
operation_parameters_minimum_occurences["deleteVideoComment:::video_id"]=1
operation_parameters_minimum_occurences["deleteVideoComment:::id"]=1
operation_parameters_minimum_occurences["deleteVideoDisposition:::disposition_id"]=1
operation_parameters_minimum_occurences["deleteVideoFlag:::video_id"]=1
operation_parameters_minimum_occurences["deleteVideoRelationship:::video_id"]=1
operation_parameters_minimum_occurences["deleteVideoRelationship:::id"]=1
operation_parameters_minimum_occurences["getUserVideos:::user_id"]=1
operation_parameters_minimum_occurences["getUserVideos:::exclude_flagged"]=0
operation_parameters_minimum_occurences["getUserVideos:::size"]=0
operation_parameters_minimum_occurences["getUserVideos:::page"]=0
operation_parameters_minimum_occurences["getVideo:::id"]=1
operation_parameters_minimum_occurences["getVideoComments:::video_id"]=1
operation_parameters_minimum_occurences["getVideoComments:::size"]=0
operation_parameters_minimum_occurences["getVideoComments:::page"]=0
operation_parameters_minimum_occurences["getVideoDispositions:::video_id"]=1
operation_parameters_minimum_occurences["getVideoDispositions:::size"]=0
operation_parameters_minimum_occurences["getVideoDispositions:::page"]=0
operation_parameters_minimum_occurences["getVideoRelationships:::video_id"]=1
operation_parameters_minimum_occurences["getVideoRelationships:::size"]=0
operation_parameters_minimum_occurences["getVideoRelationships:::page"]=0
operation_parameters_minimum_occurences["getVideos:::exclude_flagged"]=0
operation_parameters_minimum_occurences["getVideos:::filter_videos_by_uploader"]=0
operation_parameters_minimum_occurences["getVideos:::filter_category"]=0
operation_parameters_minimum_occurences["getVideos:::filter_tagset"]=0
operation_parameters_minimum_occurences["getVideos:::filter_videos_by_name"]=0
operation_parameters_minimum_occurences["getVideos:::filter_videos_by_contributor"]=0
operation_parameters_minimum_occurences["getVideos:::filter_videos_by_author"]=0
operation_parameters_minimum_occurences["getVideos:::filter_has_author"]=0
operation_parameters_minimum_occurences["getVideos:::filter_has_uploader"]=0
operation_parameters_minimum_occurences["getVideos:::filter_related_to"]=0
operation_parameters_minimum_occurences["getVideos:::filter_friends"]=0
operation_parameters_minimum_occurences["getVideos:::filter_disposition"]=0
operation_parameters_minimum_occurences["getVideos:::size"]=0
operation_parameters_minimum_occurences["getVideos:::page"]=0
operation_parameters_minimum_occurences["getVideos:::order"]=0
operation_parameters_minimum_occurences["removeUserFromVideoWhitelist:::video_id"]=1
operation_parameters_minimum_occurences["removeUserFromVideoWhitelist:::id"]=1
operation_parameters_minimum_occurences["removeVideoContributor:::video_id"]=1
operation_parameters_minimum_occurences["removeVideoContributor:::id"]=1
operation_parameters_minimum_occurences["updateVideo:::id"]=1
operation_parameters_minimum_occurences["updateVideo:::video_resource"]=0
operation_parameters_minimum_occurences["updateVideoComment:::video_id"]=1
operation_parameters_minimum_occurences["updateVideoComment:::id"]=1
operation_parameters_minimum_occurences["updateVideoComment:::content"]=0
operation_parameters_minimum_occurences["updateVideoRelationship:::video_id"]=1
operation_parameters_minimum_occurences["updateVideoRelationship:::relationship_id"]=1
operation_parameters_minimum_occurences["updateVideoRelationship:::details"]=0
operation_parameters_minimum_occurences["viewVideo:::id"]=1
operation_parameters_minimum_occurences["sendRawEmail:::raw_email_resource"]=0
operation_parameters_minimum_occurences["sendRawSMS:::raw_SMS_resource"]=0
operation_parameters_minimum_occurences["sendTemplatedEmail:::message_resource"]=0
operation_parameters_minimum_occurences["sendTemplatedSMS:::template_SMS_resource"]=0
operation_parameters_minimum_occurences["createPaymentMethod:::user_id"]=1
operation_parameters_minimum_occurences["createPaymentMethod:::payment_method"]=0
operation_parameters_minimum_occurences["deletePaymentMethod:::user_id"]=1
operation_parameters_minimum_occurences["deletePaymentMethod:::id"]=1
operation_parameters_minimum_occurences["getPaymentMethod:::user_id"]=1
operation_parameters_minimum_occurences["getPaymentMethod:::id"]=1
operation_parameters_minimum_occurences["getPaymentMethods:::user_id"]=1
operation_parameters_minimum_occurences["getPaymentMethods:::filter_name"]=0
operation_parameters_minimum_occurences["getPaymentMethods:::filter_payment_type"]=0
operation_parameters_minimum_occurences["getPaymentMethods:::filter_payment_method_type_id"]=0
operation_parameters_minimum_occurences["getPaymentMethods:::filter_payment_method_type_name"]=0
operation_parameters_minimum_occurences["getPaymentMethods:::size"]=0
operation_parameters_minimum_occurences["getPaymentMethods:::page"]=0
operation_parameters_minimum_occurences["getPaymentMethods:::order"]=0
operation_parameters_minimum_occurences["paymentAuthorization:::request"]=0
operation_parameters_minimum_occurences["paymentCapture:::id"]=1
operation_parameters_minimum_occurences["updatePaymentMethod:::user_id"]=1
operation_parameters_minimum_occurences["updatePaymentMethod:::id"]=1
operation_parameters_minimum_occurences["updatePaymentMethod:::payment_method"]=0
operation_parameters_minimum_occurences["verifyAppleReceipt:::request"]=0
operation_parameters_minimum_occurences["createOrUpdateFattMerchantPaymentMethod:::request"]=0
operation_parameters_minimum_occurences["handleGooglePayment:::request"]=0
operation_parameters_minimum_occurences["silentPostOptimal:::request"]=0
operation_parameters_minimum_occurences["createPayPalBillingAgreementUrl:::request"]=0
operation_parameters_minimum_occurences["createPayPalExpressCheckout:::request"]=0
operation_parameters_minimum_occurences["finalizePayPalBillingAgreement:::request"]=0
operation_parameters_minimum_occurences["finalizePayPalCheckout:::request"]=0
operation_parameters_minimum_occurences["createStripePaymentMethod:::request"]=0
operation_parameters_minimum_occurences["payStripeInvoice:::request"]=0
operation_parameters_minimum_occurences["getTransaction:::id"]=1
operation_parameters_minimum_occurences["getTransactions:::filter_invoice"]=0
operation_parameters_minimum_occurences["getTransactions:::size"]=0
operation_parameters_minimum_occurences["getTransactions:::page"]=0
operation_parameters_minimum_occurences["getTransactions:::order"]=0
operation_parameters_minimum_occurences["refundTransaction:::id"]=1
operation_parameters_minimum_occurences["refundTransaction:::request"]=0
operation_parameters_minimum_occurences["getUserWallet:::user_id"]=1
operation_parameters_minimum_occurences["getUserWallet:::currency_code"]=1
operation_parameters_minimum_occurences["getUserWalletTransactions:::user_id"]=1
operation_parameters_minimum_occurences["getUserWalletTransactions:::currency_code"]=1
operation_parameters_minimum_occurences["getUserWalletTransactions:::filter_type"]=0
operation_parameters_minimum_occurences["getUserWalletTransactions:::filter_max_date"]=0
operation_parameters_minimum_occurences["getUserWalletTransactions:::filter_min_date"]=0
operation_parameters_minimum_occurences["getUserWalletTransactions:::filter_sign"]=0
operation_parameters_minimum_occurences["getUserWalletTransactions:::size"]=0
operation_parameters_minimum_occurences["getUserWalletTransactions:::page"]=0
operation_parameters_minimum_occurences["getUserWalletTransactions:::order"]=0
operation_parameters_minimum_occurences["getUserWallets:::user_id"]=1
operation_parameters_minimum_occurences["getWalletTransactions:::filter_invoice"]=0
operation_parameters_minimum_occurences["getWalletTransactions:::filter_type"]=0
operation_parameters_minimum_occurences["getWalletTransactions:::filter_date"]=0
operation_parameters_minimum_occurences["getWalletTransactions:::filter_sign"]=0
operation_parameters_minimum_occurences["getWalletTransactions:::filter_user_id"]=0
operation_parameters_minimum_occurences["getWalletTransactions:::filter_username"]=0
operation_parameters_minimum_occurences["getWalletTransactions:::filter_details"]=0
operation_parameters_minimum_occurences["getWalletTransactions:::filter_currency_code"]=0
operation_parameters_minimum_occurences["getWalletTransactions:::size"]=0
operation_parameters_minimum_occurences["getWalletTransactions:::page"]=0
operation_parameters_minimum_occurences["getWalletTransactions:::order"]=0
operation_parameters_minimum_occurences["getWallets:::size"]=0
operation_parameters_minimum_occurences["getWallets:::page"]=0
operation_parameters_minimum_occurences["getWallets:::order"]=0
operation_parameters_minimum_occurences["updateWalletBalance:::user_id"]=1
operation_parameters_minimum_occurences["updateWalletBalance:::currency_code"]=1
operation_parameters_minimum_occurences["updateWalletBalance:::request"]=0
operation_parameters_minimum_occurences["createXsollaTokenUrl:::request"]=0
operation_parameters_minimum_occurences["getChallengeEventLeaderboard:::filter_event"]=0
operation_parameters_minimum_occurences["getChallengeEventLeaderboard:::size"]=0
operation_parameters_minimum_occurences["getChallengeEventLeaderboard:::page"]=0
operation_parameters_minimum_occurences["getChallengeEventLeaderboard:::order"]=0
operation_parameters_minimum_occurences["getChallengeEventParticipants:::filter_event"]=0
operation_parameters_minimum_occurences["getChallengeEventParticipants:::size"]=0
operation_parameters_minimum_occurences["getChallengeEventParticipants:::page"]=0
operation_parameters_minimum_occurences["getChallengeEventParticipants:::order"]=0
operation_parameters_minimum_occurences["getInvoiceReports:::currency_code"]=1
operation_parameters_minimum_occurences["getInvoiceReports:::granularity"]=0
operation_parameters_minimum_occurences["getInvoiceReports:::filter_payment_status"]=0
operation_parameters_minimum_occurences["getInvoiceReports:::filter_fulfillment_status"]=0
operation_parameters_minimum_occurences["getInvoiceReports:::start_date"]=0
operation_parameters_minimum_occurences["getInvoiceReports:::end_date"]=0
operation_parameters_minimum_occurences["getInvoiceReports:::size"]=0
operation_parameters_minimum_occurences["getInvoiceReports:::page"]=0
operation_parameters_minimum_occurences["getItemRevenue:::currency_code"]=1
operation_parameters_minimum_occurences["getItemRevenue:::start_date"]=0
operation_parameters_minimum_occurences["getItemRevenue:::end_date"]=0
operation_parameters_minimum_occurences["getRefundRevenue:::currency_code"]=1
operation_parameters_minimum_occurences["getRefundRevenue:::start_date"]=0
operation_parameters_minimum_occurences["getRefundRevenue:::end_date"]=0
operation_parameters_minimum_occurences["getRevenueByCountry:::currency_code"]=1
operation_parameters_minimum_occurences["getRevenueByCountry:::start_date"]=0
operation_parameters_minimum_occurences["getRevenueByCountry:::end_date"]=0
operation_parameters_minimum_occurences["getRevenueByCountry:::size"]=0
operation_parameters_minimum_occurences["getRevenueByCountry:::page"]=0
operation_parameters_minimum_occurences["getRevenueByItem:::currency_code"]=1
operation_parameters_minimum_occurences["getRevenueByItem:::start_date"]=0
operation_parameters_minimum_occurences["getRevenueByItem:::end_date"]=0
operation_parameters_minimum_occurences["getRevenueByItem:::size"]=0
operation_parameters_minimum_occurences["getRevenueByItem:::page"]=0
operation_parameters_minimum_occurences["getSubscriptionRevenue:::currency_code"]=1
operation_parameters_minimum_occurences["getSubscriptionRevenue:::start_date"]=0
operation_parameters_minimum_occurences["getSubscriptionRevenue:::end_date"]=0
operation_parameters_minimum_occurences["getSubscriptionReports:::size"]=0
operation_parameters_minimum_occurences["getSubscriptionReports:::page"]=0
operation_parameters_minimum_occurences["getUsageByDay:::start_date"]=1
operation_parameters_minimum_occurences["getUsageByDay:::end_date"]=1
operation_parameters_minimum_occurences["getUsageByDay:::combine_endpoints"]=0
operation_parameters_minimum_occurences["getUsageByDay:::method"]=0
operation_parameters_minimum_occurences["getUsageByDay:::url"]=0
operation_parameters_minimum_occurences["getUsageByDay:::size"]=0
operation_parameters_minimum_occurences["getUsageByDay:::page"]=0
operation_parameters_minimum_occurences["getUsageByHour:::start_date"]=1
operation_parameters_minimum_occurences["getUsageByHour:::end_date"]=1
operation_parameters_minimum_occurences["getUsageByHour:::combine_endpoints"]=0
operation_parameters_minimum_occurences["getUsageByHour:::method"]=0
operation_parameters_minimum_occurences["getUsageByHour:::url"]=0
operation_parameters_minimum_occurences["getUsageByHour:::size"]=0
operation_parameters_minimum_occurences["getUsageByHour:::page"]=0
operation_parameters_minimum_occurences["getUsageByMinute:::start_date"]=1
operation_parameters_minimum_occurences["getUsageByMinute:::end_date"]=1
operation_parameters_minimum_occurences["getUsageByMinute:::combine_endpoints"]=0
operation_parameters_minimum_occurences["getUsageByMinute:::method"]=0
operation_parameters_minimum_occurences["getUsageByMinute:::url"]=0
operation_parameters_minimum_occurences["getUsageByMinute:::size"]=0
operation_parameters_minimum_occurences["getUsageByMinute:::page"]=0
operation_parameters_minimum_occurences["getUsageByMonth:::start_date"]=1
operation_parameters_minimum_occurences["getUsageByMonth:::end_date"]=1
operation_parameters_minimum_occurences["getUsageByMonth:::combine_endpoints"]=0
operation_parameters_minimum_occurences["getUsageByMonth:::method"]=0
operation_parameters_minimum_occurences["getUsageByMonth:::url"]=0
operation_parameters_minimum_occurences["getUsageByMonth:::size"]=0
operation_parameters_minimum_occurences["getUsageByMonth:::page"]=0
operation_parameters_minimum_occurences["getUsageByYear:::start_date"]=1
operation_parameters_minimum_occurences["getUsageByYear:::end_date"]=1
operation_parameters_minimum_occurences["getUsageByYear:::combine_endpoints"]=0
operation_parameters_minimum_occurences["getUsageByYear:::method"]=0
operation_parameters_minimum_occurences["getUsageByYear:::url"]=0
operation_parameters_minimum_occurences["getUsageByYear:::size"]=0
operation_parameters_minimum_occurences["getUsageByYear:::page"]=0
operation_parameters_minimum_occurences["getUsageEndpoints:::start_date"]=1
operation_parameters_minimum_occurences["getUsageEndpoints:::end_date"]=1
operation_parameters_minimum_occurences["getUserRegistrations:::granularity"]=0
operation_parameters_minimum_occurences["getUserRegistrations:::start_date"]=0
operation_parameters_minimum_occurences["getUserRegistrations:::end_date"]=0
operation_parameters_minimum_occurences["getUserRegistrations:::size"]=0
operation_parameters_minimum_occurences["getUserRegistrations:::page"]=0
operation_parameters_minimum_occurences["addSearchIndex:::type"]=1
operation_parameters_minimum_occurences["addSearchIndex:::id"]=1
operation_parameters_minimum_occurences["addSearchIndex:::object"]=0
operation_parameters_minimum_occurences["addSearchMappings:::mappings"]=0
operation_parameters_minimum_occurences["deleteSearchIndex:::type"]=1
operation_parameters_minimum_occurences["deleteSearchIndex:::id"]=1
operation_parameters_minimum_occurences["deleteSearchIndexes:::type"]=1
operation_parameters_minimum_occurences["searchIndex:::type"]=1
operation_parameters_minimum_occurences["searchIndex:::query"]=0
operation_parameters_minimum_occurences["searchIndex:::size"]=0
operation_parameters_minimum_occurences["searchIndex:::page"]=0
operation_parameters_minimum_occurences["linkAccounts:::facebook_token"]=0
operation_parameters_minimum_occurences["linkAccounts1:::google_token"]=0
operation_parameters_minimum_occurences["createItemTemplate:::item_template_resource"]=0
operation_parameters_minimum_occurences["createStoreItem:::cascade"]=0
operation_parameters_minimum_occurences["createStoreItem:::store_item"]=0
operation_parameters_minimum_occurences["deleteItemTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteItemTemplate:::cascade"]=0
operation_parameters_minimum_occurences["deleteStoreItem:::id"]=1
operation_parameters_minimum_occurences["getItemTemplate:::id"]=1
operation_parameters_minimum_occurences["getItemTemplates:::size"]=0
operation_parameters_minimum_occurences["getItemTemplates:::page"]=0
operation_parameters_minimum_occurences["getItemTemplates:::order"]=0
operation_parameters_minimum_occurences["getStore:::limit"]=0
operation_parameters_minimum_occurences["getStore:::page"]=0
operation_parameters_minimum_occurences["getStore:::use_catalog"]=0
operation_parameters_minimum_occurences["getStore:::ignore_location"]=0
operation_parameters_minimum_occurences["getStore:::in_stock_only"]=0
operation_parameters_minimum_occurences["getStoreItem:::id"]=1
operation_parameters_minimum_occurences["getStoreItems:::filter_name_search"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_unique_key"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_published"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_displayable"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_start"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_end"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_start_date"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_stop_date"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_sku"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_price"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_tag"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_items_by_type"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_bundled_skus"]=0
operation_parameters_minimum_occurences["getStoreItems:::filter_vendor"]=0
operation_parameters_minimum_occurences["getStoreItems:::size"]=0
operation_parameters_minimum_occurences["getStoreItems:::page"]=0
operation_parameters_minimum_occurences["getStoreItems:::order"]=0
operation_parameters_minimum_occurences["quickBuy:::quick_buy_request"]=0
operation_parameters_minimum_occurences["updateItemTemplate:::id"]=1
operation_parameters_minimum_occurences["updateItemTemplate:::item_template_resource"]=0
operation_parameters_minimum_occurences["updateStoreItem:::id"]=1
operation_parameters_minimum_occurences["updateStoreItem:::cascade"]=0
operation_parameters_minimum_occurences["updateStoreItem:::store_item"]=0
operation_parameters_minimum_occurences["createBundleItem:::cascade"]=0
operation_parameters_minimum_occurences["createBundleItem:::bundle_item"]=0
operation_parameters_minimum_occurences["createBundleTemplate:::bundle_template_resource"]=0
operation_parameters_minimum_occurences["deleteBundleItem:::id"]=1
operation_parameters_minimum_occurences["deleteBundleTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteBundleTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getBundleItem:::id"]=1
operation_parameters_minimum_occurences["getBundleTemplate:::id"]=1
operation_parameters_minimum_occurences["getBundleTemplates:::size"]=0
operation_parameters_minimum_occurences["getBundleTemplates:::page"]=0
operation_parameters_minimum_occurences["getBundleTemplates:::order"]=0
operation_parameters_minimum_occurences["updateBundleItem:::id"]=1
operation_parameters_minimum_occurences["updateBundleItem:::cascade"]=0
operation_parameters_minimum_occurences["updateBundleItem:::bundle_item"]=0
operation_parameters_minimum_occurences["updateBundleTemplate:::id"]=1
operation_parameters_minimum_occurences["updateBundleTemplate:::bundle_template_resource"]=0
operation_parameters_minimum_occurences["createCouponItem:::cascade"]=0
operation_parameters_minimum_occurences["createCouponItem:::coupon_item"]=0
operation_parameters_minimum_occurences["createCouponTemplate:::coupon_template_resource"]=0
operation_parameters_minimum_occurences["deleteCouponItem:::id"]=1
operation_parameters_minimum_occurences["deleteCouponTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteCouponTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getCouponItem:::id"]=1
operation_parameters_minimum_occurences["getCouponTemplate:::id"]=1
operation_parameters_minimum_occurences["getCouponTemplates:::size"]=0
operation_parameters_minimum_occurences["getCouponTemplates:::page"]=0
operation_parameters_minimum_occurences["getCouponTemplates:::order"]=0
operation_parameters_minimum_occurences["updateCouponItem:::id"]=1
operation_parameters_minimum_occurences["updateCouponItem:::cascade"]=0
operation_parameters_minimum_occurences["updateCouponItem:::coupon_item"]=0
operation_parameters_minimum_occurences["updateCouponTemplate:::id"]=1
operation_parameters_minimum_occurences["updateCouponTemplate:::coupon_template_resource"]=0
operation_parameters_minimum_occurences["createCatalogSale:::catalog_sale"]=0
operation_parameters_minimum_occurences["deleteCatalogSale:::id"]=1
operation_parameters_minimum_occurences["getCatalogSale:::id"]=1
operation_parameters_minimum_occurences["getCatalogSales:::size"]=0
operation_parameters_minimum_occurences["getCatalogSales:::page"]=0
operation_parameters_minimum_occurences["getCatalogSales:::order"]=0
operation_parameters_minimum_occurences["updateCatalogSale:::id"]=1
operation_parameters_minimum_occurences["updateCatalogSale:::catalog_sale"]=0
operation_parameters_minimum_occurences["createShippingItem:::cascade"]=0
operation_parameters_minimum_occurences["createShippingItem:::shipping_item"]=0
operation_parameters_minimum_occurences["createShippingTemplate:::shipping_template_resource"]=0
operation_parameters_minimum_occurences["deleteShippingItem:::id"]=1
operation_parameters_minimum_occurences["deleteShippingTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteShippingTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getShippingItem:::id"]=1
operation_parameters_minimum_occurences["getShippingTemplate:::id"]=1
operation_parameters_minimum_occurences["getShippingTemplates:::size"]=0
operation_parameters_minimum_occurences["getShippingTemplates:::page"]=0
operation_parameters_minimum_occurences["getShippingTemplates:::order"]=0
operation_parameters_minimum_occurences["updateShippingItem:::id"]=1
operation_parameters_minimum_occurences["updateShippingItem:::cascade"]=0
operation_parameters_minimum_occurences["updateShippingItem:::shipping_item"]=0
operation_parameters_minimum_occurences["updateShippingTemplate:::id"]=1
operation_parameters_minimum_occurences["updateShippingTemplate:::shipping_template_resource"]=0
operation_parameters_minimum_occurences["addCustomDiscount:::id"]=1
operation_parameters_minimum_occurences["addCustomDiscount:::custom_discount"]=0
operation_parameters_minimum_occurences["addDiscountToCart:::id"]=1
operation_parameters_minimum_occurences["addDiscountToCart:::sku_request"]=0
operation_parameters_minimum_occurences["addItemToCart:::id"]=1
operation_parameters_minimum_occurences["addItemToCart:::cart_item_request"]=0
operation_parameters_minimum_occurences["createCart:::owner"]=0
operation_parameters_minimum_occurences["createCart:::currency_code"]=0
operation_parameters_minimum_occurences["getCart:::id"]=1
operation_parameters_minimum_occurences["getCarts:::filter_owner_id"]=0
operation_parameters_minimum_occurences["getCarts:::size"]=0
operation_parameters_minimum_occurences["getCarts:::page"]=0
operation_parameters_minimum_occurences["getCarts:::order"]=0
operation_parameters_minimum_occurences["getShippable:::id"]=1
operation_parameters_minimum_occurences["getShippingCountries:::id"]=1
operation_parameters_minimum_occurences["removeDiscountFromCart:::id"]=1
operation_parameters_minimum_occurences["removeDiscountFromCart:::code"]=1
operation_parameters_minimum_occurences["setCartCurrency:::id"]=1
operation_parameters_minimum_occurences["setCartCurrency:::currency_code"]=0
operation_parameters_minimum_occurences["setCartOwner:::id"]=1
operation_parameters_minimum_occurences["setCartOwner:::user_id"]=0
operation_parameters_minimum_occurences["updateItemInCart:::id"]=1
operation_parameters_minimum_occurences["updateItemInCart:::cart_item_request"]=0
operation_parameters_minimum_occurences["updateShippingAddress:::id"]=1
operation_parameters_minimum_occurences["updateShippingAddress:::cart_shipping_address_request"]=0
operation_parameters_minimum_occurences["createSubscription:::subscription_resource"]=0
operation_parameters_minimum_occurences["createSubscriptionTemplate:::subscription_template_resource"]=0
operation_parameters_minimum_occurences["deleteSubscription:::id"]=1
operation_parameters_minimum_occurences["deleteSubscription:::plan_id"]=1
operation_parameters_minimum_occurences["deleteSubscriptionTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteSubscriptionTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getSubscription:::id"]=1
operation_parameters_minimum_occurences["getSubscriptionTemplate:::id"]=1
operation_parameters_minimum_occurences["getSubscriptionTemplates:::size"]=0
operation_parameters_minimum_occurences["getSubscriptionTemplates:::page"]=0
operation_parameters_minimum_occurences["getSubscriptionTemplates:::order"]=0
operation_parameters_minimum_occurences["getSubscriptions:::size"]=0
operation_parameters_minimum_occurences["getSubscriptions:::page"]=0
operation_parameters_minimum_occurences["getSubscriptions:::order"]=0
operation_parameters_minimum_occurences["updateSubscription:::id"]=1
operation_parameters_minimum_occurences["updateSubscription:::subscription_resource"]=0
operation_parameters_minimum_occurences["updateSubscriptionTemplate:::id"]=1
operation_parameters_minimum_occurences["updateSubscriptionTemplate:::subscription_template_resource"]=0
operation_parameters_minimum_occurences["createVendor:::vendor"]=0
operation_parameters_minimum_occurences["createVendorTemplate:::vendor_template_resource"]=0
operation_parameters_minimum_occurences["deleteVendor:::id"]=1
operation_parameters_minimum_occurences["deleteVendorTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteVendorTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getVendor:::id"]=1
operation_parameters_minimum_occurences["getVendorTemplate:::id"]=1
operation_parameters_minimum_occurences["getVendorTemplates:::size"]=0
operation_parameters_minimum_occurences["getVendorTemplates:::page"]=0
operation_parameters_minimum_occurences["getVendorTemplates:::order"]=0
operation_parameters_minimum_occurences["getVendors:::filter_name"]=0
operation_parameters_minimum_occurences["getVendors:::size"]=0
operation_parameters_minimum_occurences["getVendors:::page"]=0
operation_parameters_minimum_occurences["getVendors:::order"]=0
operation_parameters_minimum_occurences["updateVendor:::id"]=1
operation_parameters_minimum_occurences["updateVendor:::vendor"]=0
operation_parameters_minimum_occurences["updateVendorTemplate:::id"]=1
operation_parameters_minimum_occurences["updateVendorTemplate:::vendor_template_resource"]=0
operation_parameters_minimum_occurences["createCountryTax:::tax_resource"]=0
operation_parameters_minimum_occurences["createStateTax:::country_code_iso3"]=1
operation_parameters_minimum_occurences["createStateTax:::tax_resource"]=0
operation_parameters_minimum_occurences["deleteCountryTax:::country_code_iso3"]=1
operation_parameters_minimum_occurences["deleteStateTax:::country_code_iso3"]=1
operation_parameters_minimum_occurences["deleteStateTax:::state_code"]=1
operation_parameters_minimum_occurences["getCountryTax:::country_code_iso3"]=1
operation_parameters_minimum_occurences["getCountryTaxes:::size"]=0
operation_parameters_minimum_occurences["getCountryTaxes:::page"]=0
operation_parameters_minimum_occurences["getCountryTaxes:::order"]=0
operation_parameters_minimum_occurences["getStateTax:::country_code_iso3"]=1
operation_parameters_minimum_occurences["getStateTax:::state_code"]=1
operation_parameters_minimum_occurences["getStateTaxesForCountries:::size"]=0
operation_parameters_minimum_occurences["getStateTaxesForCountries:::page"]=0
operation_parameters_minimum_occurences["getStateTaxesForCountries:::order"]=0
operation_parameters_minimum_occurences["getStateTaxesForCountry:::country_code_iso3"]=1
operation_parameters_minimum_occurences["getStateTaxesForCountry:::size"]=0
operation_parameters_minimum_occurences["getStateTaxesForCountry:::page"]=0
operation_parameters_minimum_occurences["getStateTaxesForCountry:::order"]=0
operation_parameters_minimum_occurences["updateCountryTax:::country_code_iso3"]=1
operation_parameters_minimum_occurences["updateCountryTax:::tax_resource"]=0
operation_parameters_minimum_occurences["updateStateTax:::country_code_iso3"]=1
operation_parameters_minimum_occurences["updateStateTax:::state_code"]=1
operation_parameters_minimum_occurences["updateStateTax:::tax_resource"]=0
operation_parameters_minimum_occurences["getTemplatePropertyType:::type"]=1
operation_parameters_minimum_occurences["addUserTag:::user_id"]=1
operation_parameters_minimum_occurences["addUserTag:::tag"]=1
operation_parameters_minimum_occurences["createUserTemplate:::user_template_resource"]=0
operation_parameters_minimum_occurences["deleteUserTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteUserTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getUser:::id"]=1
operation_parameters_minimum_occurences["getUserTags:::user_id"]=1
operation_parameters_minimum_occurences["getUserTemplate:::id"]=1
operation_parameters_minimum_occurences["getUserTemplates:::size"]=0
operation_parameters_minimum_occurences["getUserTemplates:::page"]=0
operation_parameters_minimum_occurences["getUserTemplates:::order"]=0
operation_parameters_minimum_occurences["getUsers:::filter_displayname"]=0
operation_parameters_minimum_occurences["getUsers:::filter_email"]=0
operation_parameters_minimum_occurences["getUsers:::filter_firstname"]=0
operation_parameters_minimum_occurences["getUsers:::filter_fullname"]=0
operation_parameters_minimum_occurences["getUsers:::filter_lastname"]=0
operation_parameters_minimum_occurences["getUsers:::filter_username"]=0
operation_parameters_minimum_occurences["getUsers:::filter_tag"]=0
operation_parameters_minimum_occurences["getUsers:::filter_group"]=0
operation_parameters_minimum_occurences["getUsers:::filter_role"]=0
operation_parameters_minimum_occurences["getUsers:::filter_search"]=0
operation_parameters_minimum_occurences["getUsers:::size"]=0
operation_parameters_minimum_occurences["getUsers:::page"]=0
operation_parameters_minimum_occurences["getUsers:::order"]=0
operation_parameters_minimum_occurences["passwordReset:::id"]=1
operation_parameters_minimum_occurences["passwordReset:::new_password_request"]=0
operation_parameters_minimum_occurences["registerUser:::user_resource"]=0
operation_parameters_minimum_occurences["removeUserTag:::user_id"]=1
operation_parameters_minimum_occurences["removeUserTag:::tag"]=1
operation_parameters_minimum_occurences["setPassword:::id"]=1
operation_parameters_minimum_occurences["setPassword:::password"]=0
operation_parameters_minimum_occurences["startPasswordReset:::id"]=1
operation_parameters_minimum_occurences["submitPasswordReset:::password_reset"]=0
operation_parameters_minimum_occurences["updateUser:::id"]=1
operation_parameters_minimum_occurences["updateUser:::user_resource"]=0
operation_parameters_minimum_occurences["updateUserTemplate:::id"]=1
operation_parameters_minimum_occurences["updateUserTemplate:::user_template_resource"]=0
operation_parameters_minimum_occurences["createAddress:::user_id"]=1
operation_parameters_minimum_occurences["createAddress:::saved_address_resource"]=0
operation_parameters_minimum_occurences["deleteAddress:::user_id"]=1
operation_parameters_minimum_occurences["deleteAddress:::id"]=1
operation_parameters_minimum_occurences["getAddress:::user_id"]=1
operation_parameters_minimum_occurences["getAddress:::id"]=1
operation_parameters_minimum_occurences["getAddresses:::user_id"]=1
operation_parameters_minimum_occurences["getAddresses:::size"]=0
operation_parameters_minimum_occurences["getAddresses:::page"]=0
operation_parameters_minimum_occurences["getAddresses:::order"]=0
operation_parameters_minimum_occurences["updateAddress:::user_id"]=1
operation_parameters_minimum_occurences["updateAddress:::id"]=1
operation_parameters_minimum_occurences["updateAddress:::saved_address_resource"]=0
operation_parameters_minimum_occurences["addFriend:::user_id"]=1
operation_parameters_minimum_occurences["addFriend:::id"]=1
operation_parameters_minimum_occurences["getFriends:::user_id"]=1
operation_parameters_minimum_occurences["getFriends:::size"]=0
operation_parameters_minimum_occurences["getFriends:::page"]=0
operation_parameters_minimum_occurences["getInviteToken:::user_id"]=1
operation_parameters_minimum_occurences["getInvites:::user_id"]=1
operation_parameters_minimum_occurences["getInvites:::size"]=0
operation_parameters_minimum_occurences["getInvites:::page"]=0
operation_parameters_minimum_occurences["redeemFriendshipToken:::user_id"]=1
operation_parameters_minimum_occurences["redeemFriendshipToken:::token"]=0
operation_parameters_minimum_occurences["removeOrDeclineFriend:::user_id"]=1
operation_parameters_minimum_occurences["removeOrDeclineFriend:::id"]=1
operation_parameters_minimum_occurences["addMemberToGroup:::unique_name"]=1
operation_parameters_minimum_occurences["addMemberToGroup:::user"]=1
operation_parameters_minimum_occurences["addMembersToGroup:::unique_name"]=1
operation_parameters_minimum_occurences["addMembersToGroup:::users"]=1
operation_parameters_minimum_occurences["createGroup:::group_resource"]=0
operation_parameters_minimum_occurences["createGroupTemplate:::group_template_resource"]=0
operation_parameters_minimum_occurences["deleteGroup:::unique_name"]=1
operation_parameters_minimum_occurences["deleteGroupTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteGroupTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getGroup:::unique_name"]=1
operation_parameters_minimum_occurences["getGroupMember:::unique_name"]=1
operation_parameters_minimum_occurences["getGroupMember:::user_id"]=1
operation_parameters_minimum_occurences["getGroupMembers:::unique_name"]=1
operation_parameters_minimum_occurences["getGroupMembers:::size"]=0
operation_parameters_minimum_occurences["getGroupMembers:::page"]=0
operation_parameters_minimum_occurences["getGroupMembers:::order"]=0
operation_parameters_minimum_occurences["getGroupTemplate:::id"]=1
operation_parameters_minimum_occurences["getGroupTemplates:::size"]=0
operation_parameters_minimum_occurences["getGroupTemplates:::page"]=0
operation_parameters_minimum_occurences["getGroupTemplates:::order"]=0
operation_parameters_minimum_occurences["getGroupsForUser:::user_id"]=1
operation_parameters_minimum_occurences["removeGroupMember:::unique_name"]=1
operation_parameters_minimum_occurences["removeGroupMember:::user_id"]=1
operation_parameters_minimum_occurences["updateGroup:::unique_name"]=1
operation_parameters_minimum_occurences["updateGroup:::group_resource"]=0
operation_parameters_minimum_occurences["updateGroupMemberStatus:::unique_name"]=1
operation_parameters_minimum_occurences["updateGroupMemberStatus:::user_id"]=1
operation_parameters_minimum_occurences["updateGroupMemberStatus:::Status"]=1
operation_parameters_minimum_occurences["updateGroupTemplate:::id"]=1
operation_parameters_minimum_occurences["updateGroupTemplate:::group_template_resource"]=0
operation_parameters_minimum_occurences["updateGroups:::filter_template"]=0
operation_parameters_minimum_occurences["updateGroups:::filter_member_count"]=0
operation_parameters_minimum_occurences["updateGroups:::filter_name"]=0
operation_parameters_minimum_occurences["updateGroups:::filter_unique_name"]=0
operation_parameters_minimum_occurences["updateGroups:::filter_parent"]=0
operation_parameters_minimum_occurences["updateGroups:::filter_status"]=0
operation_parameters_minimum_occurences["updateGroups:::size"]=0
operation_parameters_minimum_occurences["updateGroups:::page"]=0
operation_parameters_minimum_occurences["updateGroups:::order"]=0
operation_parameters_minimum_occurences["addItemToUserInventory:::id"]=1
operation_parameters_minimum_occurences["addItemToUserInventory:::user_inventory_add_request"]=0
operation_parameters_minimum_occurences["checkUserEntitlementItem:::user_id"]=1
operation_parameters_minimum_occurences["checkUserEntitlementItem:::item_id"]=1
operation_parameters_minimum_occurences["checkUserEntitlementItem:::sku"]=0
operation_parameters_minimum_occurences["createEntitlementItem:::cascade"]=0
operation_parameters_minimum_occurences["createEntitlementItem:::entitlement_item"]=0
operation_parameters_minimum_occurences["createEntitlementTemplate:::template"]=0
operation_parameters_minimum_occurences["deleteEntitlementItem:::entitlement_id"]=1
operation_parameters_minimum_occurences["deleteEntitlementTemplate:::id"]=1
operation_parameters_minimum_occurences["deleteEntitlementTemplate:::cascade"]=0
operation_parameters_minimum_occurences["getEntitlementItem:::entitlement_id"]=1
operation_parameters_minimum_occurences["getEntitlementItems:::size"]=0
operation_parameters_minimum_occurences["getEntitlementItems:::page"]=0
operation_parameters_minimum_occurences["getEntitlementItems:::order"]=0
operation_parameters_minimum_occurences["getEntitlementTemplate:::id"]=1
operation_parameters_minimum_occurences["getEntitlementTemplates:::size"]=0
operation_parameters_minimum_occurences["getEntitlementTemplates:::page"]=0
operation_parameters_minimum_occurences["getEntitlementTemplates:::order"]=0
operation_parameters_minimum_occurences["getUserInventories:::id"]=1
operation_parameters_minimum_occurences["getUserInventories:::inactive"]=0
operation_parameters_minimum_occurences["getUserInventories:::size"]=0
operation_parameters_minimum_occurences["getUserInventories:::page"]=0
operation_parameters_minimum_occurences["getUserInventories:::filter_item_name"]=0
operation_parameters_minimum_occurences["getUserInventories:::filter_item_id"]=0
operation_parameters_minimum_occurences["getUserInventories:::filter_username"]=0
operation_parameters_minimum_occurences["getUserInventories:::filter_group"]=0
operation_parameters_minimum_occurences["getUserInventories:::filter_date"]=0
operation_parameters_minimum_occurences["getUserInventory:::user_id"]=1
operation_parameters_minimum_occurences["getUserInventory:::id"]=1
operation_parameters_minimum_occurences["getUserInventoryLog:::user_id"]=1
operation_parameters_minimum_occurences["getUserInventoryLog:::id"]=1
operation_parameters_minimum_occurences["getUserInventoryLog:::size"]=0
operation_parameters_minimum_occurences["getUserInventoryLog:::page"]=0
operation_parameters_minimum_occurences["getUsersInventory:::inactive"]=0
operation_parameters_minimum_occurences["getUsersInventory:::size"]=0
operation_parameters_minimum_occurences["getUsersInventory:::page"]=0
operation_parameters_minimum_occurences["getUsersInventory:::filter_item_name"]=0
operation_parameters_minimum_occurences["getUsersInventory:::filter_item_id"]=0
operation_parameters_minimum_occurences["getUsersInventory:::filter_username"]=0
operation_parameters_minimum_occurences["getUsersInventory:::filter_group"]=0
operation_parameters_minimum_occurences["getUsersInventory:::filter_date"]=0
operation_parameters_minimum_occurences["grantUserEntitlement:::user_id"]=1
operation_parameters_minimum_occurences["grantUserEntitlement:::grantRequest"]=1
operation_parameters_minimum_occurences["updateEntitlementItem:::entitlement_id"]=1
operation_parameters_minimum_occurences["updateEntitlementItem:::cascade"]=0
operation_parameters_minimum_occurences["updateEntitlementItem:::entitlement_item"]=0
operation_parameters_minimum_occurences["updateEntitlementTemplate:::id"]=1
operation_parameters_minimum_occurences["updateEntitlementTemplate:::template"]=0
operation_parameters_minimum_occurences["updateUserInventoryBehaviorData:::user_id"]=1
operation_parameters_minimum_occurences["updateUserInventoryBehaviorData:::id"]=1
operation_parameters_minimum_occurences["updateUserInventoryBehaviorData:::data"]=0
operation_parameters_minimum_occurences["updateUserInventoryExpires:::user_id"]=1
operation_parameters_minimum_occurences["updateUserInventoryExpires:::id"]=1
operation_parameters_minimum_occurences["updateUserInventoryExpires:::timestamp"]=0
operation_parameters_minimum_occurences["updateUserInventoryStatus:::user_id"]=1
operation_parameters_minimum_occurences["updateUserInventoryStatus:::id"]=1
operation_parameters_minimum_occurences["updateUserInventoryStatus:::inventory_status"]=0
operation_parameters_minimum_occurences["useUserEntitlementItem:::user_id"]=1
operation_parameters_minimum_occurences["useUserEntitlementItem:::item_id"]=1
operation_parameters_minimum_occurences["useUserEntitlementItem:::sku"]=0
operation_parameters_minimum_occurences["useUserEntitlementItem:::info"]=0
operation_parameters_minimum_occurences["createUserRelationship:::relationship"]=0
operation_parameters_minimum_occurences["deleteUserRelationship:::id"]=1
operation_parameters_minimum_occurences["getUserRelationship:::id"]=1
operation_parameters_minimum_occurences["getUserRelationships:::size"]=0
operation_parameters_minimum_occurences["getUserRelationships:::page"]=0
operation_parameters_minimum_occurences["getUserRelationships:::order"]=0
operation_parameters_minimum_occurences["updateUserRelationship:::id"]=1
operation_parameters_minimum_occurences["updateUserRelationship:::relationship"]=0
operation_parameters_minimum_occurences["getUserSubscriptionDetails:::user_id"]=1
operation_parameters_minimum_occurences["getUserSubscriptionDetails:::inventory_id"]=1
operation_parameters_minimum_occurences["getUsersSubscriptionDetails:::user_id"]=1
operation_parameters_minimum_occurences["reactivateUserSubscription:::user_id"]=1
operation_parameters_minimum_occurences["reactivateUserSubscription:::inventory_id"]=1
operation_parameters_minimum_occurences["reactivateUserSubscription:::reactivate_subscription_request"]=0
operation_parameters_minimum_occurences["setSubscriptionBillDate:::user_id"]=1
operation_parameters_minimum_occurences["setSubscriptionBillDate:::inventory_id"]=1
operation_parameters_minimum_occurences["setSubscriptionBillDate:::bill_date"]=1
operation_parameters_minimum_occurences["setSubscriptionPaymentMethod:::user_id"]=1
operation_parameters_minimum_occurences["setSubscriptionPaymentMethod:::inventory_id"]=1
operation_parameters_minimum_occurences["setSubscriptionPaymentMethod:::payment_method_id"]=0
operation_parameters_minimum_occurences["setSubscriptionStatus:::user_id"]=1
operation_parameters_minimum_occurences["setSubscriptionStatus:::inventory_id"]=1
operation_parameters_minimum_occurences["setSubscriptionStatus:::status"]=1
operation_parameters_minimum_occurences["setUserSubscriptionPlan:::user_id"]=1
operation_parameters_minimum_occurences["setUserSubscriptionPlan:::inventory_id"]=1
operation_parameters_minimum_occurences["setUserSubscriptionPlan:::plan_id"]=0
operation_parameters_minimum_occurences["setUserSubscriptionPrice:::user_id"]=1
operation_parameters_minimum_occurences["setUserSubscriptionPrice:::inventory_id"]=1
operation_parameters_minimum_occurences["setUserSubscriptionPrice:::The override details"]=0
operation_parameters_minimum_occurences["getBatch:::token"]=1
operation_parameters_minimum_occurences["sendBatch:::batch"]=0
operation_parameters_minimum_occurences["setMaintenance:::maintenance"]=0
operation_parameters_minimum_occurences["updateMaintenance:::maintenance"]=0
operation_parameters_minimum_occurences["getUserLocationLog:::user_id"]=0
operation_parameters_minimum_occurences["getUserLocationLog:::size"]=0
operation_parameters_minimum_occurences["getUserLocationLog:::page"]=0
operation_parameters_minimum_occurences["getUserLocationLog:::order"]=0

##
# This array stores the maximum number of allowed occurences for parameter
# 1 - single value
# 2 - 2 values
# N - N values
# 0 - unlimited
declare -A operation_parameters_maximum_occurences
operation_parameters_maximum_occurences["getOAuthToken:::grant_type"]=0
operation_parameters_maximum_occurences["getOAuthToken:::client_id"]=0
operation_parameters_maximum_occurences["getOAuthToken:::client_secret"]=0
operation_parameters_maximum_occurences["getOAuthToken:::username"]=0
operation_parameters_maximum_occurences["getOAuthToken:::password"]=0
operation_parameters_maximum_occurences["createActivity:::activity_resource"]=0
operation_parameters_maximum_occurences["createActivityOccurrence:::test"]=0
operation_parameters_maximum_occurences["createActivityOccurrence:::activity_occurrence_resource"]=0
operation_parameters_maximum_occurences["createActivityTemplate:::activity_template_resource"]=0
operation_parameters_maximum_occurences["deleteActivity:::id"]=0
operation_parameters_maximum_occurences["deleteActivityTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteActivityTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getActivities:::filter_template"]=0
operation_parameters_maximum_occurences["getActivities:::filter_name"]=0
operation_parameters_maximum_occurences["getActivities:::filter_id"]=0
operation_parameters_maximum_occurences["getActivities:::size"]=0
operation_parameters_maximum_occurences["getActivities:::page"]=0
operation_parameters_maximum_occurences["getActivities:::order"]=0
operation_parameters_maximum_occurences["getActivity:::id"]=0
operation_parameters_maximum_occurences["getActivityTemplate:::id"]=0
operation_parameters_maximum_occurences["getActivityTemplates:::size"]=0
operation_parameters_maximum_occurences["getActivityTemplates:::page"]=0
operation_parameters_maximum_occurences["getActivityTemplates:::order"]=0
operation_parameters_maximum_occurences["setActivityOccurrenceResults:::activity_occurrence_id"]=0
operation_parameters_maximum_occurences["setActivityOccurrenceResults:::activity_occurrence_results"]=0
operation_parameters_maximum_occurences["updateActivity:::id"]=0
operation_parameters_maximum_occurences["updateActivity:::activity_resource"]=0
operation_parameters_maximum_occurences["updateActivityOccurrence:::activity_occurrence_id"]=0
operation_parameters_maximum_occurences["updateActivityOccurrence:::activity_cccurrence_status"]=0
operation_parameters_maximum_occurences["updateActivityTemplate:::id"]=0
operation_parameters_maximum_occurences["updateActivityTemplate:::activity_template_resource"]=0
operation_parameters_maximum_occurences["getDownloadURL:::bucket"]=0
operation_parameters_maximum_occurences["getDownloadURL:::path"]=0
operation_parameters_maximum_occurences["getDownloadURL:::expiration"]=0
operation_parameters_maximum_occurences["getSignedS3URL:::filename"]=0
operation_parameters_maximum_occurences["getSignedS3URL:::content_type"]=0
operation_parameters_maximum_occurences["createClient:::client_resource"]=0
operation_parameters_maximum_occurences["deleteClient:::client_key"]=0
operation_parameters_maximum_occurences["getClient:::client_key"]=0
operation_parameters_maximum_occurences["getClients:::size"]=0
operation_parameters_maximum_occurences["getClients:::page"]=0
operation_parameters_maximum_occurences["getClients:::order"]=0
operation_parameters_maximum_occurences["setClientGrantTypes:::client_key"]=0
operation_parameters_maximum_occurences["setClientGrantTypes:::grant_list"]=0
operation_parameters_maximum_occurences["setClientRedirectUris:::client_key"]=0
operation_parameters_maximum_occurences["setClientRedirectUris:::redirect_list"]=0
operation_parameters_maximum_occurences["updateClient:::client_key"]=0
operation_parameters_maximum_occurences["updateClient:::client_resource"]=0
operation_parameters_maximum_occurences["createPermission:::permission_resource"]=0
operation_parameters_maximum_occurences["deletePermission:::permission"]=0
operation_parameters_maximum_occurences["deletePermission:::force"]=0
operation_parameters_maximum_occurences["getPermission:::permission"]=0
operation_parameters_maximum_occurences["getPermissions:::size"]=0
operation_parameters_maximum_occurences["getPermissions:::page"]=0
operation_parameters_maximum_occurences["getPermissions:::order"]=0
operation_parameters_maximum_occurences["updatePermission:::permission"]=0
operation_parameters_maximum_occurences["updatePermission:::permission_resource"]=0
operation_parameters_maximum_occurences["createRole:::role_resource"]=0
operation_parameters_maximum_occurences["deleteRole:::role"]=0
operation_parameters_maximum_occurences["deleteRole:::force"]=0
operation_parameters_maximum_occurences["getClientRoles:::client_key"]=0
operation_parameters_maximum_occurences["getRole:::role"]=0
operation_parameters_maximum_occurences["getRoles:::filter_name"]=0
operation_parameters_maximum_occurences["getRoles:::filter_role"]=0
operation_parameters_maximum_occurences["getRoles:::size"]=0
operation_parameters_maximum_occurences["getRoles:::page"]=0
operation_parameters_maximum_occurences["getRoles:::order"]=0
operation_parameters_maximum_occurences["getUserRoles:::user_id"]=0
operation_parameters_maximum_occurences["setClientRoles:::client_key"]=0
operation_parameters_maximum_occurences["setClientRoles:::roles_list"]=0
operation_parameters_maximum_occurences["setPermissionsForRole:::role"]=0
operation_parameters_maximum_occurences["setPermissionsForRole:::permissions_list"]=0
operation_parameters_maximum_occurences["setUserRoles:::user_id"]=0
operation_parameters_maximum_occurences["setUserRoles:::roles_list"]=0
operation_parameters_maximum_occurences["updateRole:::role"]=0
operation_parameters_maximum_occurences["updateRole:::role_resource"]=0
operation_parameters_maximum_occurences["deleteTokens:::username"]=0
operation_parameters_maximum_occurences["deleteTokens:::client_id"]=0
operation_parameters_maximum_occurences["getToken:::username"]=0
operation_parameters_maximum_occurences["getToken:::client_id"]=0
operation_parameters_maximum_occurences["getTokens:::filter_client_id"]=0
operation_parameters_maximum_occurences["getTokens:::filter_username"]=0
operation_parameters_maximum_occurences["getTokens:::size"]=0
operation_parameters_maximum_occurences["getTokens:::page"]=0
operation_parameters_maximum_occurences["getTokens:::order"]=0
operation_parameters_maximum_occurences["getBREActions:::filter_category"]=0
operation_parameters_maximum_occurences["getBREActions:::filter_name"]=0
operation_parameters_maximum_occurences["getBREActions:::filter_tags"]=0
operation_parameters_maximum_occurences["getBREActions:::filter_search"]=0
operation_parameters_maximum_occurences["createBRECategoryTemplate:::template"]=0
operation_parameters_maximum_occurences["deleteBRECategoryTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteBRECategoryTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getBRECategories:::size"]=0
operation_parameters_maximum_occurences["getBRECategories:::page"]=0
operation_parameters_maximum_occurences["getBRECategory:::name"]=0
operation_parameters_maximum_occurences["getBRECategoryTemplate:::id"]=0
operation_parameters_maximum_occurences["getBRECategoryTemplates:::size"]=0
operation_parameters_maximum_occurences["getBRECategoryTemplates:::page"]=0
operation_parameters_maximum_occurences["getBRECategoryTemplates:::order"]=0
operation_parameters_maximum_occurences["updateBRECategory:::name"]=0
operation_parameters_maximum_occurences["updateBRECategory:::category"]=0
operation_parameters_maximum_occurences["updateBRECategoryTemplate:::id"]=0
operation_parameters_maximum_occurences["updateBRECategoryTemplate:::template"]=0
operation_parameters_maximum_occurences["sendBREEvent:::bre_event"]=0
operation_parameters_maximum_occurences["createBREGlobal:::bre_global_resource"]=0
operation_parameters_maximum_occurences["deleteBREGlobal:::id"]=0
operation_parameters_maximum_occurences["getBREGlobal:::id"]=0
operation_parameters_maximum_occurences["getBREGlobals:::filter_system"]=0
operation_parameters_maximum_occurences["getBREGlobals:::size"]=0
operation_parameters_maximum_occurences["getBREGlobals:::page"]=0
operation_parameters_maximum_occurences["updateBREGlobal:::id"]=0
operation_parameters_maximum_occurences["updateBREGlobal:::bre_global_resource"]=0
operation_parameters_maximum_occurences["createBRERule:::bre_rule"]=0
operation_parameters_maximum_occurences["deleteBRERule:::id"]=0
operation_parameters_maximum_occurences["getBREExpressionAsString:::expression"]=0
operation_parameters_maximum_occurences["getBRERule:::id"]=0
operation_parameters_maximum_occurences["getBRERules:::filter_name"]=0
operation_parameters_maximum_occurences["getBRERules:::filter_enabled"]=0
operation_parameters_maximum_occurences["getBRERules:::filter_system"]=0
operation_parameters_maximum_occurences["getBRERules:::filter_trigger"]=0
operation_parameters_maximum_occurences["getBRERules:::filter_action"]=0
operation_parameters_maximum_occurences["getBRERules:::filter_condition"]=0
operation_parameters_maximum_occurences["getBRERules:::size"]=0
operation_parameters_maximum_occurences["getBRERules:::page"]=0
operation_parameters_maximum_occurences["setBRERule:::id"]=0
operation_parameters_maximum_occurences["setBRERule:::enabled"]=0
operation_parameters_maximum_occurences["updateBRERule:::id"]=0
operation_parameters_maximum_occurences["updateBRERule:::bre_rule"]=0
operation_parameters_maximum_occurences["createBRETrigger:::bre_trigger_resource"]=0
operation_parameters_maximum_occurences["deleteBRETrigger:::event_name"]=0
operation_parameters_maximum_occurences["getBRETrigger:::event_name"]=0
operation_parameters_maximum_occurences["getBRETriggers:::filter_system"]=0
operation_parameters_maximum_occurences["getBRETriggers:::filter_category"]=0
operation_parameters_maximum_occurences["getBRETriggers:::filter_tags"]=0
operation_parameters_maximum_occurences["getBRETriggers:::filter_name"]=0
operation_parameters_maximum_occurences["getBRETriggers:::filter_search"]=0
operation_parameters_maximum_occurences["getBRETriggers:::size"]=0
operation_parameters_maximum_occurences["getBRETriggers:::page"]=0
operation_parameters_maximum_occurences["updateBRETrigger:::event_name"]=0
operation_parameters_maximum_occurences["updateBRETrigger:::bre_trigger_resource"]=0
operation_parameters_maximum_occurences["getBREVariableValues:::name"]=0
operation_parameters_maximum_occurences["getBREVariableValues:::filter_name"]=0
operation_parameters_maximum_occurences["getBREVariableValues:::size"]=0
operation_parameters_maximum_occurences["getBREVariableValues:::page"]=0
operation_parameters_maximum_occurences["addChallengeToCampaign:::id"]=0
operation_parameters_maximum_occurences["addChallengeToCampaign:::challenge_id"]=0
operation_parameters_maximum_occurences["createCampaign:::campaign_resource"]=0
operation_parameters_maximum_occurences["createCampaignTemplate:::campaign_template_resource"]=0
operation_parameters_maximum_occurences["deleteCampaign:::id"]=0
operation_parameters_maximum_occurences["deleteCampaignTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteCampaignTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getCampaign:::id"]=0
operation_parameters_maximum_occurences["getCampaignChallenges:::id"]=0
operation_parameters_maximum_occurences["getCampaignChallenges:::filter_start_date"]=0
operation_parameters_maximum_occurences["getCampaignChallenges:::filter_end_date"]=0
operation_parameters_maximum_occurences["getCampaignChallenges:::size"]=0
operation_parameters_maximum_occurences["getCampaignChallenges:::page"]=0
operation_parameters_maximum_occurences["getCampaignChallenges:::order"]=0
operation_parameters_maximum_occurences["getCampaignTemplate:::id"]=0
operation_parameters_maximum_occurences["getCampaignTemplates:::size"]=0
operation_parameters_maximum_occurences["getCampaignTemplates:::page"]=0
operation_parameters_maximum_occurences["getCampaignTemplates:::order"]=0
operation_parameters_maximum_occurences["getCampaigns:::filter_active"]=0
operation_parameters_maximum_occurences["getCampaigns:::size"]=0
operation_parameters_maximum_occurences["getCampaigns:::page"]=0
operation_parameters_maximum_occurences["getCampaigns:::order"]=0
operation_parameters_maximum_occurences["removeChallengeFromCampaign:::campaign_id"]=0
operation_parameters_maximum_occurences["removeChallengeFromCampaign:::id"]=0
operation_parameters_maximum_occurences["updateCampaign:::id"]=0
operation_parameters_maximum_occurences["updateCampaign:::campaign_resource"]=0
operation_parameters_maximum_occurences["updateCampaignTemplate:::id"]=0
operation_parameters_maximum_occurences["updateCampaignTemplate:::campaign_template_resource"]=0
operation_parameters_maximum_occurences["createChallenge:::challenge_resource"]=0
operation_parameters_maximum_occurences["createChallengeActivity:::challenge_id"]=0
operation_parameters_maximum_occurences["createChallengeActivity:::challenge_activity_resource"]=0
operation_parameters_maximum_occurences["createChallengeActivity:::validateSettings"]=0
operation_parameters_maximum_occurences["createChallengeActivityTemplate:::challengeActivity_template_resource"]=0
operation_parameters_maximum_occurences["createChallengeTemplate:::challenge_template_resource"]=0
operation_parameters_maximum_occurences["deleteChallenge:::id"]=0
operation_parameters_maximum_occurences["deleteChallengeActivity:::id"]=0
operation_parameters_maximum_occurences["deleteChallengeActivity:::challenge_id"]=0
operation_parameters_maximum_occurences["deleteChallengeActivityTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteChallengeActivityTemplate:::cascade"]=0
operation_parameters_maximum_occurences["deleteChallengeEvent:::id"]=0
operation_parameters_maximum_occurences["deleteChallengeTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteChallengeTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getChallenge:::id"]=0
operation_parameters_maximum_occurences["getChallengeActivities:::challenge_id"]=0
operation_parameters_maximum_occurences["getChallengeActivities:::size"]=0
operation_parameters_maximum_occurences["getChallengeActivities:::page"]=0
operation_parameters_maximum_occurences["getChallengeActivities:::order"]=0
operation_parameters_maximum_occurences["getChallengeActivity:::id"]=0
operation_parameters_maximum_occurences["getChallengeActivity:::challenge_id"]=0
operation_parameters_maximum_occurences["getChallengeActivityTemplate:::id"]=0
operation_parameters_maximum_occurences["getChallengeActivityTemplates:::size"]=0
operation_parameters_maximum_occurences["getChallengeActivityTemplates:::page"]=0
operation_parameters_maximum_occurences["getChallengeActivityTemplates:::order"]=0
operation_parameters_maximum_occurences["getChallengeEvent:::id"]=0
operation_parameters_maximum_occurences["getChallengeEvents:::filter_start_date"]=0
operation_parameters_maximum_occurences["getChallengeEvents:::filter_end_date"]=0
operation_parameters_maximum_occurences["getChallengeEvents:::filter_campaigns"]=0
operation_parameters_maximum_occurences["getChallengeEvents:::filter_challenge"]=0
operation_parameters_maximum_occurences["getChallengeEvents:::size"]=0
operation_parameters_maximum_occurences["getChallengeEvents:::page"]=0
operation_parameters_maximum_occurences["getChallengeEvents:::order"]=0
operation_parameters_maximum_occurences["getChallengeTemplate:::id"]=0
operation_parameters_maximum_occurences["getChallengeTemplates:::size"]=0
operation_parameters_maximum_occurences["getChallengeTemplates:::page"]=0
operation_parameters_maximum_occurences["getChallengeTemplates:::order"]=0
operation_parameters_maximum_occurences["getChallenges:::filter_template"]=0
operation_parameters_maximum_occurences["getChallenges:::filter_active_campaign"]=0
operation_parameters_maximum_occurences["getChallenges:::filter_start_date"]=0
operation_parameters_maximum_occurences["getChallenges:::filter_end_date"]=0
operation_parameters_maximum_occurences["getChallenges:::size"]=0
operation_parameters_maximum_occurences["getChallenges:::page"]=0
operation_parameters_maximum_occurences["getChallenges:::order"]=0
operation_parameters_maximum_occurences["updateChallenge:::id"]=0
operation_parameters_maximum_occurences["updateChallenge:::challenge_resource"]=0
operation_parameters_maximum_occurences["updateChallengeActivity:::id"]=0
operation_parameters_maximum_occurences["updateChallengeActivity:::challenge_id"]=0
operation_parameters_maximum_occurences["updateChallengeActivity:::challenge_activity_resource"]=0
operation_parameters_maximum_occurences["updateChallengeActivityTemplate:::id"]=0
operation_parameters_maximum_occurences["updateChallengeActivityTemplate:::challengeActivity_template_resource"]=0
operation_parameters_maximum_occurences["updateChallengeTemplate:::id"]=0
operation_parameters_maximum_occurences["updateChallengeTemplate:::challenge_template_resource"]=0
operation_parameters_maximum_occurences["createRewardSet:::reward_set_resource"]=0
operation_parameters_maximum_occurences["deleteRewardSet:::id"]=0
operation_parameters_maximum_occurences["getRewardSet:::id"]=0
operation_parameters_maximum_occurences["getRewardSets:::size"]=0
operation_parameters_maximum_occurences["getRewardSets:::page"]=0
operation_parameters_maximum_occurences["getRewardSets:::order"]=0
operation_parameters_maximum_occurences["updateRewardSet:::id"]=0
operation_parameters_maximum_occurences["updateRewardSet:::reward_set_resource"]=0
operation_parameters_maximum_occurences["createCategory:::category"]=0
operation_parameters_maximum_occurences["createCategoryTemplate:::template"]=0
operation_parameters_maximum_occurences["deleteCategory:::id"]=0
operation_parameters_maximum_occurences["deleteCategoryTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteCategoryTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getCategories:::filter_search"]=0
operation_parameters_maximum_occurences["getCategories:::filter_active"]=0
operation_parameters_maximum_occurences["getCategories:::size"]=0
operation_parameters_maximum_occurences["getCategories:::page"]=0
operation_parameters_maximum_occurences["getCategories:::order"]=0
operation_parameters_maximum_occurences["getCategory:::id"]=0
operation_parameters_maximum_occurences["getCategoryTemplate:::id"]=0
operation_parameters_maximum_occurences["getCategoryTemplates:::size"]=0
operation_parameters_maximum_occurences["getCategoryTemplates:::page"]=0
operation_parameters_maximum_occurences["getCategoryTemplates:::order"]=0
operation_parameters_maximum_occurences["getTags:::size"]=0
operation_parameters_maximum_occurences["getTags:::page"]=0
operation_parameters_maximum_occurences["updateCategory:::id"]=0
operation_parameters_maximum_occurences["updateCategory:::category"]=0
operation_parameters_maximum_occurences["updateCategoryTemplate:::id"]=0
operation_parameters_maximum_occurences["updateCategoryTemplate:::template"]=0
operation_parameters_maximum_occurences["createConfig:::config"]=0
operation_parameters_maximum_occurences["deleteConfig:::name"]=0
operation_parameters_maximum_occurences["getConfig:::name"]=0
operation_parameters_maximum_occurences["getConfigs:::filter_search"]=0
operation_parameters_maximum_occurences["getConfigs:::size"]=0
operation_parameters_maximum_occurences["getConfigs:::page"]=0
operation_parameters_maximum_occurences["getConfigs:::order"]=0
operation_parameters_maximum_occurences["updateConfig:::name"]=0
operation_parameters_maximum_occurences["updateConfig:::config"]=0
operation_parameters_maximum_occurences["createArticle:::article_resource"]=0
operation_parameters_maximum_occurences["createArticleTemplate:::article_template_resource"]=0
operation_parameters_maximum_occurences["deleteArticle:::id"]=0
operation_parameters_maximum_occurences["deleteArticleTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteArticleTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getArticle:::id"]=0
operation_parameters_maximum_occurences["getArticleTemplate:::id"]=0
operation_parameters_maximum_occurences["getArticleTemplates:::size"]=0
operation_parameters_maximum_occurences["getArticleTemplates:::page"]=0
operation_parameters_maximum_occurences["getArticleTemplates:::order"]=0
operation_parameters_maximum_occurences["getArticles:::filter_active_only"]=0
operation_parameters_maximum_occurences["getArticles:::filter_category"]=0
operation_parameters_maximum_occurences["getArticles:::filter_tagset"]=0
operation_parameters_maximum_occurences["getArticles:::filter_tag_intersection"]=0
operation_parameters_maximum_occurences["getArticles:::filter_tag_exclusion"]=0
operation_parameters_maximum_occurences["getArticles:::filter_title"]=0
operation_parameters_maximum_occurences["getArticles:::size"]=0
operation_parameters_maximum_occurences["getArticles:::page"]=0
operation_parameters_maximum_occurences["getArticles:::order"]=0
operation_parameters_maximum_occurences["updateArticle:::id"]=0
operation_parameters_maximum_occurences["updateArticle:::article_resource"]=0
operation_parameters_maximum_occurences["updateArticleTemplate:::id"]=0
operation_parameters_maximum_occurences["updateArticleTemplate:::article_template_resource"]=0
operation_parameters_maximum_occurences["addComment:::comment_resource"]=0
operation_parameters_maximum_occurences["deleteComment:::id"]=0
operation_parameters_maximum_occurences["getComment:::id"]=0
operation_parameters_maximum_occurences["getComments:::context"]=0
operation_parameters_maximum_occurences["getComments:::context_id"]=0
operation_parameters_maximum_occurences["getComments:::size"]=0
operation_parameters_maximum_occurences["getComments:::page"]=0
operation_parameters_maximum_occurences["searchComments:::query"]=0
operation_parameters_maximum_occurences["searchComments:::size"]=0
operation_parameters_maximum_occurences["searchComments:::page"]=0
operation_parameters_maximum_occurences["updateComment:::id"]=0
operation_parameters_maximum_occurences["updateComment:::content"]=0
operation_parameters_maximum_occurences["answerPoll:::id"]=0
operation_parameters_maximum_occurences["answerPoll:::answer_key"]=0
operation_parameters_maximum_occurences["createPoll:::poll_resource"]=0
operation_parameters_maximum_occurences["createPollTemplate:::poll_template_resource"]=0
operation_parameters_maximum_occurences["deletePoll:::id"]=0
operation_parameters_maximum_occurences["deletePollTemplate:::id"]=0
operation_parameters_maximum_occurences["deletePollTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getPoll:::id"]=0
operation_parameters_maximum_occurences["getPollAnswer:::id"]=0
operation_parameters_maximum_occurences["getPollTemplate:::id"]=0
operation_parameters_maximum_occurences["getPollTemplates:::size"]=0
operation_parameters_maximum_occurences["getPollTemplates:::page"]=0
operation_parameters_maximum_occurences["getPollTemplates:::order"]=0
operation_parameters_maximum_occurences["getPolls:::filter_category"]=0
operation_parameters_maximum_occurences["getPolls:::filter_tagset"]=0
operation_parameters_maximum_occurences["getPolls:::filter_text"]=0
operation_parameters_maximum_occurences["getPolls:::size"]=0
operation_parameters_maximum_occurences["getPolls:::page"]=0
operation_parameters_maximum_occurences["getPolls:::order"]=0
operation_parameters_maximum_occurences["updatePoll:::id"]=0
operation_parameters_maximum_occurences["updatePoll:::poll_resource"]=0
operation_parameters_maximum_occurences["updatePollTemplate:::id"]=0
operation_parameters_maximum_occurences["updatePollTemplate:::poll_template_resource"]=0
operation_parameters_maximum_occurences["createCurrency:::currency"]=0
operation_parameters_maximum_occurences["deleteCurrency:::code"]=0
operation_parameters_maximum_occurences["getCurrencies:::filter_enabled_currencies"]=0
operation_parameters_maximum_occurences["getCurrencies:::filter_type"]=0
operation_parameters_maximum_occurences["getCurrencies:::size"]=0
operation_parameters_maximum_occurences["getCurrencies:::page"]=0
operation_parameters_maximum_occurences["getCurrencies:::order"]=0
operation_parameters_maximum_occurences["getCurrency:::code"]=0
operation_parameters_maximum_occurences["updateCurrency:::code"]=0
operation_parameters_maximum_occurences["updateCurrency:::currency"]=0
operation_parameters_maximum_occurences["addDeviceUsers:::userResources"]=0
operation_parameters_maximum_occurences["addDeviceUsers:::id"]=0
operation_parameters_maximum_occurences["createDevice:::device"]=0
operation_parameters_maximum_occurences["deleteDevice:::id"]=0
operation_parameters_maximum_occurences["deleteDeviceUser:::id"]=0
operation_parameters_maximum_occurences["deleteDeviceUser:::user_id"]=0
operation_parameters_maximum_occurences["deleteDeviceUsers:::id"]=0
operation_parameters_maximum_occurences["deleteDeviceUsers:::filter_id"]=0
operation_parameters_maximum_occurences["getDevice:::id"]=0
operation_parameters_maximum_occurences["getDevices:::filter_make"]=0
operation_parameters_maximum_occurences["getDevices:::filter_model"]=0
operation_parameters_maximum_occurences["getDevices:::size"]=0
operation_parameters_maximum_occurences["getDevices:::page"]=0
operation_parameters_maximum_occurences["getDevices:::order"]=0
operation_parameters_maximum_occurences["updateDevice:::device"]=0
operation_parameters_maximum_occurences["updateDevice:::id"]=0
operation_parameters_maximum_occurences["addDisposition:::disposition"]=0
operation_parameters_maximum_occurences["deleteDisposition:::id"]=0
operation_parameters_maximum_occurences["getDisposition:::id"]=0
operation_parameters_maximum_occurences["getDispositionCounts:::filter_context"]=0
operation_parameters_maximum_occurences["getDispositionCounts:::filter_owner"]=0
operation_parameters_maximum_occurences["getDispositions:::filter_context"]=0
operation_parameters_maximum_occurences["getDispositions:::filter_owner"]=0
operation_parameters_maximum_occurences["getDispositions:::size"]=0
operation_parameters_maximum_occurences["getDispositions:::page"]=0
operation_parameters_maximum_occurences["getDispositions:::order"]=0
operation_parameters_maximum_occurences["createFulfillmentType:::type"]=0
operation_parameters_maximum_occurences["deleteFulfillmentType:::id"]=0
operation_parameters_maximum_occurences["getFulfillmentType:::id"]=0
operation_parameters_maximum_occurences["getFulfillmentTypes:::size"]=0
operation_parameters_maximum_occurences["getFulfillmentTypes:::page"]=0
operation_parameters_maximum_occurences["getFulfillmentTypes:::order"]=0
operation_parameters_maximum_occurences["updateFulfillmentType:::id"]=0
operation_parameters_maximum_occurences["updateFulfillmentType:::fulfillmentType"]=0
operation_parameters_maximum_occurences["createAchievement:::achievement"]=0
operation_parameters_maximum_occurences["createAchievementTemplate:::template"]=0
operation_parameters_maximum_occurences["deleteAchievement:::name"]=0
operation_parameters_maximum_occurences["deleteAchievementTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteAchievementTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getAchievement:::name"]=0
operation_parameters_maximum_occurences["getAchievementTemplate:::id"]=0
operation_parameters_maximum_occurences["getAchievementTemplates:::size"]=0
operation_parameters_maximum_occurences["getAchievementTemplates:::page"]=0
operation_parameters_maximum_occurences["getAchievementTemplates:::order"]=0
operation_parameters_maximum_occurences["getAchievements:::filter_tagset"]=0
operation_parameters_maximum_occurences["getAchievements:::filter_name"]=0
operation_parameters_maximum_occurences["getAchievements:::filter_hidden"]=0
operation_parameters_maximum_occurences["getAchievements:::size"]=0
operation_parameters_maximum_occurences["getAchievements:::page"]=0
operation_parameters_maximum_occurences["getAchievements:::order"]=0
operation_parameters_maximum_occurences["getAchievements:::filter_derived"]=0
operation_parameters_maximum_occurences["getDerivedAchievements:::name"]=0
operation_parameters_maximum_occurences["getUserAchievementProgress:::user_id"]=0
operation_parameters_maximum_occurences["getUserAchievementProgress:::achievement_name"]=0
operation_parameters_maximum_occurences["getUserAchievementsProgress:::user_id"]=0
operation_parameters_maximum_occurences["getUserAchievementsProgress:::filter_achievement_derived"]=0
operation_parameters_maximum_occurences["getUserAchievementsProgress:::filter_achievement_tagset"]=0
operation_parameters_maximum_occurences["getUserAchievementsProgress:::filter_achievement_name"]=0
operation_parameters_maximum_occurences["getUserAchievementsProgress:::size"]=0
operation_parameters_maximum_occurences["getUserAchievementsProgress:::page"]=0
operation_parameters_maximum_occurences["getUsersAchievementProgress:::achievement_name"]=0
operation_parameters_maximum_occurences["getUsersAchievementProgress:::filter_achievement_derived"]=0
operation_parameters_maximum_occurences["getUsersAchievementProgress:::filter_achievement_tagset"]=0
operation_parameters_maximum_occurences["getUsersAchievementProgress:::filter_achievement_name"]=0
operation_parameters_maximum_occurences["getUsersAchievementProgress:::size"]=0
operation_parameters_maximum_occurences["getUsersAchievementProgress:::page"]=0
operation_parameters_maximum_occurences["getUsersAchievementsProgress:::filter_achievement_derived"]=0
operation_parameters_maximum_occurences["getUsersAchievementsProgress:::filter_achievement_tagset"]=0
operation_parameters_maximum_occurences["getUsersAchievementsProgress:::filter_achievement_name"]=0
operation_parameters_maximum_occurences["getUsersAchievementsProgress:::size"]=0
operation_parameters_maximum_occurences["getUsersAchievementsProgress:::page"]=0
operation_parameters_maximum_occurences["incrementAchievementProgress:::user_id"]=0
operation_parameters_maximum_occurences["incrementAchievementProgress:::achievement_name"]=0
operation_parameters_maximum_occurences["incrementAchievementProgress:::progress"]=0
operation_parameters_maximum_occurences["setAchievementProgress:::user_id"]=0
operation_parameters_maximum_occurences["setAchievementProgress:::achievement_name"]=0
operation_parameters_maximum_occurences["setAchievementProgress:::progress"]=0
operation_parameters_maximum_occurences["updateAchievement:::name"]=0
operation_parameters_maximum_occurences["updateAchievement:::achievement"]=0
operation_parameters_maximum_occurences["updateAchievementTemplate:::id"]=0
operation_parameters_maximum_occurences["updateAchievementTemplate:::template"]=0
operation_parameters_maximum_occurences["getLeaderboard:::context_type"]=0
operation_parameters_maximum_occurences["getLeaderboard:::context_id"]=0
operation_parameters_maximum_occurences["getLeaderboard:::size"]=0
operation_parameters_maximum_occurences["getLeaderboard:::page"]=0
operation_parameters_maximum_occurences["getLeaderboard:::order"]=0
operation_parameters_maximum_occurences["getLeaderboardRank:::context_type"]=0
operation_parameters_maximum_occurences["getLeaderboardRank:::context_id"]=0
operation_parameters_maximum_occurences["getLeaderboardRank:::id"]=0
operation_parameters_maximum_occurences["createLevel:::level"]=0
operation_parameters_maximum_occurences["deleteLevel:::name"]=0
operation_parameters_maximum_occurences["getLevel:::name"]=0
operation_parameters_maximum_occurences["getLevels:::filter_name"]=0
operation_parameters_maximum_occurences["getLevels:::size"]=0
operation_parameters_maximum_occurences["getLevels:::page"]=0
operation_parameters_maximum_occurences["getLevels:::order"]=0
operation_parameters_maximum_occurences["getUserLevel:::user_id"]=0
operation_parameters_maximum_occurences["getUserLevel:::name"]=0
operation_parameters_maximum_occurences["getUserLevels:::user_id"]=0
operation_parameters_maximum_occurences["getUserLevels:::filter_name"]=0
operation_parameters_maximum_occurences["getUserLevels:::size"]=0
operation_parameters_maximum_occurences["getUserLevels:::page"]=0
operation_parameters_maximum_occurences["getUserLevels:::order"]=0
operation_parameters_maximum_occurences["incrementProgress:::user_id"]=0
operation_parameters_maximum_occurences["incrementProgress:::name"]=0
operation_parameters_maximum_occurences["incrementProgress:::progress"]=0
operation_parameters_maximum_occurences["setProgress:::user_id"]=0
operation_parameters_maximum_occurences["setProgress:::name"]=0
operation_parameters_maximum_occurences["setProgress:::progress"]=0
operation_parameters_maximum_occurences["updateLevel:::name"]=0
operation_parameters_maximum_occurences["updateLevel:::newLevel"]=0
operation_parameters_maximum_occurences["addMetric:::metric"]=0
operation_parameters_maximum_occurences["addQuestionAnswers:::question_id"]=0
operation_parameters_maximum_occurences["addQuestionAnswers:::answer"]=0
operation_parameters_maximum_occurences["addQuestionTag:::id"]=0
operation_parameters_maximum_occurences["addQuestionTag:::tag"]=0
operation_parameters_maximum_occurences["addTagToQuestionsBatch:::tag"]=0
operation_parameters_maximum_occurences["addTagToQuestionsBatch:::filter_search"]=0
operation_parameters_maximum_occurences["addTagToQuestionsBatch:::filter_idset"]=0
operation_parameters_maximum_occurences["addTagToQuestionsBatch:::filter_category"]=0
operation_parameters_maximum_occurences["addTagToQuestionsBatch:::filter_tag"]=0
operation_parameters_maximum_occurences["addTagToQuestionsBatch:::filter_tagset"]=0
operation_parameters_maximum_occurences["addTagToQuestionsBatch:::filter_type"]=0
operation_parameters_maximum_occurences["addTagToQuestionsBatch:::filter_published"]=0
operation_parameters_maximum_occurences["addTagToQuestionsBatch:::filter_import_id"]=0
operation_parameters_maximum_occurences["createImportJob:::request"]=0
operation_parameters_maximum_occurences["createQuestion:::question"]=0
operation_parameters_maximum_occurences["createQuestionTemplate:::question_template_resource"]=0
operation_parameters_maximum_occurences["deleteImportJob:::id"]=0
operation_parameters_maximum_occurences["deleteQuestion:::id"]=0
operation_parameters_maximum_occurences["deleteQuestionAnswers:::question_id"]=0
operation_parameters_maximum_occurences["deleteQuestionAnswers:::id"]=0
operation_parameters_maximum_occurences["deleteQuestionTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteQuestionTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getImportJob:::id"]=0
operation_parameters_maximum_occurences["getImportJobs:::filter_vendor"]=0
operation_parameters_maximum_occurences["getImportJobs:::filter_category"]=0
operation_parameters_maximum_occurences["getImportJobs:::filter_name"]=0
operation_parameters_maximum_occurences["getImportJobs:::filter_status"]=0
operation_parameters_maximum_occurences["getImportJobs:::size"]=0
operation_parameters_maximum_occurences["getImportJobs:::page"]=0
operation_parameters_maximum_occurences["getImportJobs:::order"]=0
operation_parameters_maximum_occurences["getQuestion:::id"]=0
operation_parameters_maximum_occurences["getQuestionAnswer:::question_id"]=0
operation_parameters_maximum_occurences["getQuestionAnswer:::id"]=0
operation_parameters_maximum_occurences["getQuestionAnswers:::question_id"]=0
operation_parameters_maximum_occurences["getQuestionDeltas:::since"]=0
operation_parameters_maximum_occurences["getQuestionTags:::id"]=0
operation_parameters_maximum_occurences["getQuestionTemplate:::id"]=0
operation_parameters_maximum_occurences["getQuestionTemplates:::size"]=0
operation_parameters_maximum_occurences["getQuestionTemplates:::page"]=0
operation_parameters_maximum_occurences["getQuestionTemplates:::order"]=0
operation_parameters_maximum_occurences["getQuestions:::size"]=0
operation_parameters_maximum_occurences["getQuestions:::page"]=0
operation_parameters_maximum_occurences["getQuestions:::order"]=0
operation_parameters_maximum_occurences["getQuestions:::filter_search"]=0
operation_parameters_maximum_occurences["getQuestions:::filter_idset"]=0
operation_parameters_maximum_occurences["getQuestions:::filter_category"]=0
operation_parameters_maximum_occurences["getQuestions:::filter_tagset"]=0
operation_parameters_maximum_occurences["getQuestions:::filter_tag"]=0
operation_parameters_maximum_occurences["getQuestions:::filter_type"]=0
operation_parameters_maximum_occurences["getQuestions:::filter_published"]=0
operation_parameters_maximum_occurences["getQuestions:::filter_import_id"]=0
operation_parameters_maximum_occurences["getQuestionsCount:::filter_search"]=0
operation_parameters_maximum_occurences["getQuestionsCount:::filter_idset"]=0
operation_parameters_maximum_occurences["getQuestionsCount:::filter_category"]=0
operation_parameters_maximum_occurences["getQuestionsCount:::filter_tag"]=0
operation_parameters_maximum_occurences["getQuestionsCount:::filter_tagset"]=0
operation_parameters_maximum_occurences["getQuestionsCount:::filter_type"]=0
operation_parameters_maximum_occurences["getQuestionsCount:::filter_published"]=0
operation_parameters_maximum_occurences["processImportJob:::id"]=0
operation_parameters_maximum_occurences["processImportJob:::publish_now"]=0
operation_parameters_maximum_occurences["removeQuestionTag:::id"]=0
operation_parameters_maximum_occurences["removeQuestionTag:::tag"]=0
operation_parameters_maximum_occurences["removeTagToQuestionsBatch:::tag"]=0
operation_parameters_maximum_occurences["removeTagToQuestionsBatch:::filter_search"]=0
operation_parameters_maximum_occurences["removeTagToQuestionsBatch:::filter_idset"]=0
operation_parameters_maximum_occurences["removeTagToQuestionsBatch:::filter_category"]=0
operation_parameters_maximum_occurences["removeTagToQuestionsBatch:::filter_tag"]=0
operation_parameters_maximum_occurences["removeTagToQuestionsBatch:::filter_tagset"]=0
operation_parameters_maximum_occurences["removeTagToQuestionsBatch:::filter_type"]=0
operation_parameters_maximum_occurences["removeTagToQuestionsBatch:::filter_published"]=0
operation_parameters_maximum_occurences["removeTagToQuestionsBatch:::filter_import_id"]=0
operation_parameters_maximum_occurences["searchQuestionTags:::filter_search"]=0
operation_parameters_maximum_occurences["searchQuestionTags:::filter_category"]=0
operation_parameters_maximum_occurences["searchQuestionTags:::filter_import_id"]=0
operation_parameters_maximum_occurences["updateImportJob:::id"]=0
operation_parameters_maximum_occurences["updateImportJob:::request"]=0
operation_parameters_maximum_occurences["updateQuestion:::id"]=0
operation_parameters_maximum_occurences["updateQuestion:::question"]=0
operation_parameters_maximum_occurences["updateQuestionAnswer:::question_id"]=0
operation_parameters_maximum_occurences["updateQuestionAnswer:::id"]=0
operation_parameters_maximum_occurences["updateQuestionAnswer:::answer"]=0
operation_parameters_maximum_occurences["updateQuestionTemplate:::id"]=0
operation_parameters_maximum_occurences["updateQuestionTemplate:::question_template_resource"]=0
operation_parameters_maximum_occurences["updateQuestionsInBulk:::question"]=0
operation_parameters_maximum_occurences["updateQuestionsInBulk:::filter_search"]=0
operation_parameters_maximum_occurences["updateQuestionsInBulk:::filter_idset"]=0
operation_parameters_maximum_occurences["updateQuestionsInBulk:::filter_category"]=0
operation_parameters_maximum_occurences["updateQuestionsInBulk:::filter_tagset"]=0
operation_parameters_maximum_occurences["updateQuestionsInBulk:::filter_type"]=0
operation_parameters_maximum_occurences["updateQuestionsInBulk:::filter_published"]=0
operation_parameters_maximum_occurences["updateQuestionsInBulk:::filter_import_id"]=0
operation_parameters_maximum_occurences["createInvoice:::req"]=0
operation_parameters_maximum_occurences["getInvoice:::id"]=0
operation_parameters_maximum_occurences["getInvoiceLogs:::id"]=0
operation_parameters_maximum_occurences["getInvoiceLogs:::size"]=0
operation_parameters_maximum_occurences["getInvoiceLogs:::page"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_user"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_email"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_fulfillment_status"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_payment_status"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_item_name"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_external_ref"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_created_date"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_vendor_ids"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_currency"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_shipping_state_name"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_shipping_country_name"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_shipping"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_vendor_name"]=0
operation_parameters_maximum_occurences["getInvoices:::filter_sku"]=0
operation_parameters_maximum_occurences["getInvoices:::size"]=0
operation_parameters_maximum_occurences["getInvoices:::page"]=0
operation_parameters_maximum_occurences["getInvoices:::order"]=0
operation_parameters_maximum_occurences["payInvoice:::id"]=0
operation_parameters_maximum_occurences["payInvoice:::request"]=0
operation_parameters_maximum_occurences["setBundledInvoiceItemFulfillmentStatus:::id"]=0
operation_parameters_maximum_occurences["setBundledInvoiceItemFulfillmentStatus:::bundleSku"]=0
operation_parameters_maximum_occurences["setBundledInvoiceItemFulfillmentStatus:::sku"]=0
operation_parameters_maximum_occurences["setBundledInvoiceItemFulfillmentStatus:::status"]=0
operation_parameters_maximum_occurences["setExternalRef:::id"]=0
operation_parameters_maximum_occurences["setExternalRef:::externalRef"]=0
operation_parameters_maximum_occurences["setInvoiceItemFulfillmentStatus:::id"]=0
operation_parameters_maximum_occurences["setInvoiceItemFulfillmentStatus:::sku"]=0
operation_parameters_maximum_occurences["setInvoiceItemFulfillmentStatus:::status"]=0
operation_parameters_maximum_occurences["setOrderNotes:::id"]=0
operation_parameters_maximum_occurences["setOrderNotes:::orderNotes"]=0
operation_parameters_maximum_occurences["setPaymentStatus:::id"]=0
operation_parameters_maximum_occurences["setPaymentStatus:::request"]=0
operation_parameters_maximum_occurences["updateBillingInfo:::id"]=0
operation_parameters_maximum_occurences["updateBillingInfo:::billingInfoRequest"]=0
operation_parameters_maximum_occurences["getCountryStates:::country_code_iso3"]=0
operation_parameters_maximum_occurences["addUserLog:::log_entry"]=0
operation_parameters_maximum_occurences["getBREEventLog:::id"]=0
operation_parameters_maximum_occurences["getBREEventLogs:::filter_start_date"]=0
operation_parameters_maximum_occurences["getBREEventLogs:::filter_event_name"]=0
operation_parameters_maximum_occurences["getBREEventLogs:::filter_event_id"]=0
operation_parameters_maximum_occurences["getBREEventLogs:::size"]=0
operation_parameters_maximum_occurences["getBREEventLogs:::page"]=0
operation_parameters_maximum_occurences["getBREEventLogs:::order"]=0
operation_parameters_maximum_occurences["getBREForwardLog:::id"]=0
operation_parameters_maximum_occurences["getBREForwardLogs:::filter_start_date"]=0
operation_parameters_maximum_occurences["getBREForwardLogs:::filter_end_date"]=0
operation_parameters_maximum_occurences["getBREForwardLogs:::filter_status_code"]=0
operation_parameters_maximum_occurences["getBREForwardLogs:::size"]=0
operation_parameters_maximum_occurences["getBREForwardLogs:::page"]=0
operation_parameters_maximum_occurences["getBREForwardLogs:::order"]=0
operation_parameters_maximum_occurences["getUserLog:::id"]=0
operation_parameters_maximum_occurences["getUserLogs:::filter_user"]=0
operation_parameters_maximum_occurences["getUserLogs:::filter_action_name"]=0
operation_parameters_maximum_occurences["getUserLogs:::size"]=0
operation_parameters_maximum_occurences["getUserLogs:::page"]=0
operation_parameters_maximum_occurences["getUserLogs:::order"]=0
operation_parameters_maximum_occurences["addArtist:::artist_resource"]=0
operation_parameters_maximum_occurences["createArtistTemplate:::artist_template_resource"]=0
operation_parameters_maximum_occurences["deleteArtist:::id"]=0
operation_parameters_maximum_occurences["deleteArtistTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteArtistTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getArtist:::id"]=0
operation_parameters_maximum_occurences["getArtist:::show_contributions"]=0
operation_parameters_maximum_occurences["getArtistTemplate:::id"]=0
operation_parameters_maximum_occurences["getArtistTemplates:::size"]=0
operation_parameters_maximum_occurences["getArtistTemplates:::page"]=0
operation_parameters_maximum_occurences["getArtistTemplates:::order"]=0
operation_parameters_maximum_occurences["getArtists:::filter_artists_by_name"]=0
operation_parameters_maximum_occurences["getArtists:::size"]=0
operation_parameters_maximum_occurences["getArtists:::page"]=0
operation_parameters_maximum_occurences["getArtists:::order"]=0
operation_parameters_maximum_occurences["updateArtist:::id"]=0
operation_parameters_maximum_occurences["updateArtist:::artist_resource"]=0
operation_parameters_maximum_occurences["updateArtistTemplate:::id"]=0
operation_parameters_maximum_occurences["updateArtistTemplate:::artist_template_resource"]=0
operation_parameters_maximum_occurences["getModerationReport:::id"]=0
operation_parameters_maximum_occurences["getModerationReports:::exclude_resolved"]=0
operation_parameters_maximum_occurences["getModerationReports:::filter_context"]=0
operation_parameters_maximum_occurences["getModerationReports:::size"]=0
operation_parameters_maximum_occurences["getModerationReports:::page"]=0
operation_parameters_maximum_occurences["updateModerationReport:::id"]=0
operation_parameters_maximum_occurences["updateModerationReport:::flag_report_resource"]=0
operation_parameters_maximum_occurences["addUserToVideoWhitelist:::id"]=0
operation_parameters_maximum_occurences["addUserToVideoWhitelist:::user_id"]=0
operation_parameters_maximum_occurences["addVideo:::video_resource"]=0
operation_parameters_maximum_occurences["addVideoComment:::video_id"]=0
operation_parameters_maximum_occurences["addVideoComment:::comment_resource"]=0
operation_parameters_maximum_occurences["addVideoContributor:::video_id"]=0
operation_parameters_maximum_occurences["addVideoContributor:::contribution_resource"]=0
operation_parameters_maximum_occurences["addVideoFlag:::video_id"]=0
operation_parameters_maximum_occurences["addVideoFlag:::reason"]=0
operation_parameters_maximum_occurences["addVideoRelationships:::video_id"]=0
operation_parameters_maximum_occurences["addVideoRelationships:::video_relationship_resource"]=0
operation_parameters_maximum_occurences["createVideoDisposition:::video_id"]=0
operation_parameters_maximum_occurences["createVideoDisposition:::disposition_resource"]=0
operation_parameters_maximum_occurences["deleteVideo:::id"]=0
operation_parameters_maximum_occurences["deleteVideoComment:::video_id"]=0
operation_parameters_maximum_occurences["deleteVideoComment:::id"]=0
operation_parameters_maximum_occurences["deleteVideoDisposition:::disposition_id"]=0
operation_parameters_maximum_occurences["deleteVideoFlag:::video_id"]=0
operation_parameters_maximum_occurences["deleteVideoRelationship:::video_id"]=0
operation_parameters_maximum_occurences["deleteVideoRelationship:::id"]=0
operation_parameters_maximum_occurences["getUserVideos:::user_id"]=0
operation_parameters_maximum_occurences["getUserVideos:::exclude_flagged"]=0
operation_parameters_maximum_occurences["getUserVideos:::size"]=0
operation_parameters_maximum_occurences["getUserVideos:::page"]=0
operation_parameters_maximum_occurences["getVideo:::id"]=0
operation_parameters_maximum_occurences["getVideoComments:::video_id"]=0
operation_parameters_maximum_occurences["getVideoComments:::size"]=0
operation_parameters_maximum_occurences["getVideoComments:::page"]=0
operation_parameters_maximum_occurences["getVideoDispositions:::video_id"]=0
operation_parameters_maximum_occurences["getVideoDispositions:::size"]=0
operation_parameters_maximum_occurences["getVideoDispositions:::page"]=0
operation_parameters_maximum_occurences["getVideoRelationships:::video_id"]=0
operation_parameters_maximum_occurences["getVideoRelationships:::size"]=0
operation_parameters_maximum_occurences["getVideoRelationships:::page"]=0
operation_parameters_maximum_occurences["getVideos:::exclude_flagged"]=0
operation_parameters_maximum_occurences["getVideos:::filter_videos_by_uploader"]=0
operation_parameters_maximum_occurences["getVideos:::filter_category"]=0
operation_parameters_maximum_occurences["getVideos:::filter_tagset"]=0
operation_parameters_maximum_occurences["getVideos:::filter_videos_by_name"]=0
operation_parameters_maximum_occurences["getVideos:::filter_videos_by_contributor"]=0
operation_parameters_maximum_occurences["getVideos:::filter_videos_by_author"]=0
operation_parameters_maximum_occurences["getVideos:::filter_has_author"]=0
operation_parameters_maximum_occurences["getVideos:::filter_has_uploader"]=0
operation_parameters_maximum_occurences["getVideos:::filter_related_to"]=0
operation_parameters_maximum_occurences["getVideos:::filter_friends"]=0
operation_parameters_maximum_occurences["getVideos:::filter_disposition"]=0
operation_parameters_maximum_occurences["getVideos:::size"]=0
operation_parameters_maximum_occurences["getVideos:::page"]=0
operation_parameters_maximum_occurences["getVideos:::order"]=0
operation_parameters_maximum_occurences["removeUserFromVideoWhitelist:::video_id"]=0
operation_parameters_maximum_occurences["removeUserFromVideoWhitelist:::id"]=0
operation_parameters_maximum_occurences["removeVideoContributor:::video_id"]=0
operation_parameters_maximum_occurences["removeVideoContributor:::id"]=0
operation_parameters_maximum_occurences["updateVideo:::id"]=0
operation_parameters_maximum_occurences["updateVideo:::video_resource"]=0
operation_parameters_maximum_occurences["updateVideoComment:::video_id"]=0
operation_parameters_maximum_occurences["updateVideoComment:::id"]=0
operation_parameters_maximum_occurences["updateVideoComment:::content"]=0
operation_parameters_maximum_occurences["updateVideoRelationship:::video_id"]=0
operation_parameters_maximum_occurences["updateVideoRelationship:::relationship_id"]=0
operation_parameters_maximum_occurences["updateVideoRelationship:::details"]=0
operation_parameters_maximum_occurences["viewVideo:::id"]=0
operation_parameters_maximum_occurences["sendRawEmail:::raw_email_resource"]=0
operation_parameters_maximum_occurences["sendRawSMS:::raw_SMS_resource"]=0
operation_parameters_maximum_occurences["sendTemplatedEmail:::message_resource"]=0
operation_parameters_maximum_occurences["sendTemplatedSMS:::template_SMS_resource"]=0
operation_parameters_maximum_occurences["createPaymentMethod:::user_id"]=0
operation_parameters_maximum_occurences["createPaymentMethod:::payment_method"]=0
operation_parameters_maximum_occurences["deletePaymentMethod:::user_id"]=0
operation_parameters_maximum_occurences["deletePaymentMethod:::id"]=0
operation_parameters_maximum_occurences["getPaymentMethod:::user_id"]=0
operation_parameters_maximum_occurences["getPaymentMethod:::id"]=0
operation_parameters_maximum_occurences["getPaymentMethods:::user_id"]=0
operation_parameters_maximum_occurences["getPaymentMethods:::filter_name"]=0
operation_parameters_maximum_occurences["getPaymentMethods:::filter_payment_type"]=0
operation_parameters_maximum_occurences["getPaymentMethods:::filter_payment_method_type_id"]=0
operation_parameters_maximum_occurences["getPaymentMethods:::filter_payment_method_type_name"]=0
operation_parameters_maximum_occurences["getPaymentMethods:::size"]=0
operation_parameters_maximum_occurences["getPaymentMethods:::page"]=0
operation_parameters_maximum_occurences["getPaymentMethods:::order"]=0
operation_parameters_maximum_occurences["paymentAuthorization:::request"]=0
operation_parameters_maximum_occurences["paymentCapture:::id"]=0
operation_parameters_maximum_occurences["updatePaymentMethod:::user_id"]=0
operation_parameters_maximum_occurences["updatePaymentMethod:::id"]=0
operation_parameters_maximum_occurences["updatePaymentMethod:::payment_method"]=0
operation_parameters_maximum_occurences["verifyAppleReceipt:::request"]=0
operation_parameters_maximum_occurences["createOrUpdateFattMerchantPaymentMethod:::request"]=0
operation_parameters_maximum_occurences["handleGooglePayment:::request"]=0
operation_parameters_maximum_occurences["silentPostOptimal:::request"]=0
operation_parameters_maximum_occurences["createPayPalBillingAgreementUrl:::request"]=0
operation_parameters_maximum_occurences["createPayPalExpressCheckout:::request"]=0
operation_parameters_maximum_occurences["finalizePayPalBillingAgreement:::request"]=0
operation_parameters_maximum_occurences["finalizePayPalCheckout:::request"]=0
operation_parameters_maximum_occurences["createStripePaymentMethod:::request"]=0
operation_parameters_maximum_occurences["payStripeInvoice:::request"]=0
operation_parameters_maximum_occurences["getTransaction:::id"]=0
operation_parameters_maximum_occurences["getTransactions:::filter_invoice"]=0
operation_parameters_maximum_occurences["getTransactions:::size"]=0
operation_parameters_maximum_occurences["getTransactions:::page"]=0
operation_parameters_maximum_occurences["getTransactions:::order"]=0
operation_parameters_maximum_occurences["refundTransaction:::id"]=0
operation_parameters_maximum_occurences["refundTransaction:::request"]=0
operation_parameters_maximum_occurences["getUserWallet:::user_id"]=0
operation_parameters_maximum_occurences["getUserWallet:::currency_code"]=0
operation_parameters_maximum_occurences["getUserWalletTransactions:::user_id"]=0
operation_parameters_maximum_occurences["getUserWalletTransactions:::currency_code"]=0
operation_parameters_maximum_occurences["getUserWalletTransactions:::filter_type"]=0
operation_parameters_maximum_occurences["getUserWalletTransactions:::filter_max_date"]=0
operation_parameters_maximum_occurences["getUserWalletTransactions:::filter_min_date"]=0
operation_parameters_maximum_occurences["getUserWalletTransactions:::filter_sign"]=0
operation_parameters_maximum_occurences["getUserWalletTransactions:::size"]=0
operation_parameters_maximum_occurences["getUserWalletTransactions:::page"]=0
operation_parameters_maximum_occurences["getUserWalletTransactions:::order"]=0
operation_parameters_maximum_occurences["getUserWallets:::user_id"]=0
operation_parameters_maximum_occurences["getWalletTransactions:::filter_invoice"]=0
operation_parameters_maximum_occurences["getWalletTransactions:::filter_type"]=0
operation_parameters_maximum_occurences["getWalletTransactions:::filter_date"]=0
operation_parameters_maximum_occurences["getWalletTransactions:::filter_sign"]=0
operation_parameters_maximum_occurences["getWalletTransactions:::filter_user_id"]=0
operation_parameters_maximum_occurences["getWalletTransactions:::filter_username"]=0
operation_parameters_maximum_occurences["getWalletTransactions:::filter_details"]=0
operation_parameters_maximum_occurences["getWalletTransactions:::filter_currency_code"]=0
operation_parameters_maximum_occurences["getWalletTransactions:::size"]=0
operation_parameters_maximum_occurences["getWalletTransactions:::page"]=0
operation_parameters_maximum_occurences["getWalletTransactions:::order"]=0
operation_parameters_maximum_occurences["getWallets:::size"]=0
operation_parameters_maximum_occurences["getWallets:::page"]=0
operation_parameters_maximum_occurences["getWallets:::order"]=0
operation_parameters_maximum_occurences["updateWalletBalance:::user_id"]=0
operation_parameters_maximum_occurences["updateWalletBalance:::currency_code"]=0
operation_parameters_maximum_occurences["updateWalletBalance:::request"]=0
operation_parameters_maximum_occurences["createXsollaTokenUrl:::request"]=0
operation_parameters_maximum_occurences["getChallengeEventLeaderboard:::filter_event"]=0
operation_parameters_maximum_occurences["getChallengeEventLeaderboard:::size"]=0
operation_parameters_maximum_occurences["getChallengeEventLeaderboard:::page"]=0
operation_parameters_maximum_occurences["getChallengeEventLeaderboard:::order"]=0
operation_parameters_maximum_occurences["getChallengeEventParticipants:::filter_event"]=0
operation_parameters_maximum_occurences["getChallengeEventParticipants:::size"]=0
operation_parameters_maximum_occurences["getChallengeEventParticipants:::page"]=0
operation_parameters_maximum_occurences["getChallengeEventParticipants:::order"]=0
operation_parameters_maximum_occurences["getInvoiceReports:::currency_code"]=0
operation_parameters_maximum_occurences["getInvoiceReports:::granularity"]=0
operation_parameters_maximum_occurences["getInvoiceReports:::filter_payment_status"]=0
operation_parameters_maximum_occurences["getInvoiceReports:::filter_fulfillment_status"]=0
operation_parameters_maximum_occurences["getInvoiceReports:::start_date"]=0
operation_parameters_maximum_occurences["getInvoiceReports:::end_date"]=0
operation_parameters_maximum_occurences["getInvoiceReports:::size"]=0
operation_parameters_maximum_occurences["getInvoiceReports:::page"]=0
operation_parameters_maximum_occurences["getItemRevenue:::currency_code"]=0
operation_parameters_maximum_occurences["getItemRevenue:::start_date"]=0
operation_parameters_maximum_occurences["getItemRevenue:::end_date"]=0
operation_parameters_maximum_occurences["getRefundRevenue:::currency_code"]=0
operation_parameters_maximum_occurences["getRefundRevenue:::start_date"]=0
operation_parameters_maximum_occurences["getRefundRevenue:::end_date"]=0
operation_parameters_maximum_occurences["getRevenueByCountry:::currency_code"]=0
operation_parameters_maximum_occurences["getRevenueByCountry:::start_date"]=0
operation_parameters_maximum_occurences["getRevenueByCountry:::end_date"]=0
operation_parameters_maximum_occurences["getRevenueByCountry:::size"]=0
operation_parameters_maximum_occurences["getRevenueByCountry:::page"]=0
operation_parameters_maximum_occurences["getRevenueByItem:::currency_code"]=0
operation_parameters_maximum_occurences["getRevenueByItem:::start_date"]=0
operation_parameters_maximum_occurences["getRevenueByItem:::end_date"]=0
operation_parameters_maximum_occurences["getRevenueByItem:::size"]=0
operation_parameters_maximum_occurences["getRevenueByItem:::page"]=0
operation_parameters_maximum_occurences["getSubscriptionRevenue:::currency_code"]=0
operation_parameters_maximum_occurences["getSubscriptionRevenue:::start_date"]=0
operation_parameters_maximum_occurences["getSubscriptionRevenue:::end_date"]=0
operation_parameters_maximum_occurences["getSubscriptionReports:::size"]=0
operation_parameters_maximum_occurences["getSubscriptionReports:::page"]=0
operation_parameters_maximum_occurences["getUsageByDay:::start_date"]=0
operation_parameters_maximum_occurences["getUsageByDay:::end_date"]=0
operation_parameters_maximum_occurences["getUsageByDay:::combine_endpoints"]=0
operation_parameters_maximum_occurences["getUsageByDay:::method"]=0
operation_parameters_maximum_occurences["getUsageByDay:::url"]=0
operation_parameters_maximum_occurences["getUsageByDay:::size"]=0
operation_parameters_maximum_occurences["getUsageByDay:::page"]=0
operation_parameters_maximum_occurences["getUsageByHour:::start_date"]=0
operation_parameters_maximum_occurences["getUsageByHour:::end_date"]=0
operation_parameters_maximum_occurences["getUsageByHour:::combine_endpoints"]=0
operation_parameters_maximum_occurences["getUsageByHour:::method"]=0
operation_parameters_maximum_occurences["getUsageByHour:::url"]=0
operation_parameters_maximum_occurences["getUsageByHour:::size"]=0
operation_parameters_maximum_occurences["getUsageByHour:::page"]=0
operation_parameters_maximum_occurences["getUsageByMinute:::start_date"]=0
operation_parameters_maximum_occurences["getUsageByMinute:::end_date"]=0
operation_parameters_maximum_occurences["getUsageByMinute:::combine_endpoints"]=0
operation_parameters_maximum_occurences["getUsageByMinute:::method"]=0
operation_parameters_maximum_occurences["getUsageByMinute:::url"]=0
operation_parameters_maximum_occurences["getUsageByMinute:::size"]=0
operation_parameters_maximum_occurences["getUsageByMinute:::page"]=0
operation_parameters_maximum_occurences["getUsageByMonth:::start_date"]=0
operation_parameters_maximum_occurences["getUsageByMonth:::end_date"]=0
operation_parameters_maximum_occurences["getUsageByMonth:::combine_endpoints"]=0
operation_parameters_maximum_occurences["getUsageByMonth:::method"]=0
operation_parameters_maximum_occurences["getUsageByMonth:::url"]=0
operation_parameters_maximum_occurences["getUsageByMonth:::size"]=0
operation_parameters_maximum_occurences["getUsageByMonth:::page"]=0
operation_parameters_maximum_occurences["getUsageByYear:::start_date"]=0
operation_parameters_maximum_occurences["getUsageByYear:::end_date"]=0
operation_parameters_maximum_occurences["getUsageByYear:::combine_endpoints"]=0
operation_parameters_maximum_occurences["getUsageByYear:::method"]=0
operation_parameters_maximum_occurences["getUsageByYear:::url"]=0
operation_parameters_maximum_occurences["getUsageByYear:::size"]=0
operation_parameters_maximum_occurences["getUsageByYear:::page"]=0
operation_parameters_maximum_occurences["getUsageEndpoints:::start_date"]=0
operation_parameters_maximum_occurences["getUsageEndpoints:::end_date"]=0
operation_parameters_maximum_occurences["getUserRegistrations:::granularity"]=0
operation_parameters_maximum_occurences["getUserRegistrations:::start_date"]=0
operation_parameters_maximum_occurences["getUserRegistrations:::end_date"]=0
operation_parameters_maximum_occurences["getUserRegistrations:::size"]=0
operation_parameters_maximum_occurences["getUserRegistrations:::page"]=0
operation_parameters_maximum_occurences["addSearchIndex:::type"]=0
operation_parameters_maximum_occurences["addSearchIndex:::id"]=0
operation_parameters_maximum_occurences["addSearchIndex:::object"]=0
operation_parameters_maximum_occurences["addSearchMappings:::mappings"]=0
operation_parameters_maximum_occurences["deleteSearchIndex:::type"]=0
operation_parameters_maximum_occurences["deleteSearchIndex:::id"]=0
operation_parameters_maximum_occurences["deleteSearchIndexes:::type"]=0
operation_parameters_maximum_occurences["searchIndex:::type"]=0
operation_parameters_maximum_occurences["searchIndex:::query"]=0
operation_parameters_maximum_occurences["searchIndex:::size"]=0
operation_parameters_maximum_occurences["searchIndex:::page"]=0
operation_parameters_maximum_occurences["linkAccounts:::facebook_token"]=0
operation_parameters_maximum_occurences["linkAccounts1:::google_token"]=0
operation_parameters_maximum_occurences["createItemTemplate:::item_template_resource"]=0
operation_parameters_maximum_occurences["createStoreItem:::cascade"]=0
operation_parameters_maximum_occurences["createStoreItem:::store_item"]=0
operation_parameters_maximum_occurences["deleteItemTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteItemTemplate:::cascade"]=0
operation_parameters_maximum_occurences["deleteStoreItem:::id"]=0
operation_parameters_maximum_occurences["getItemTemplate:::id"]=0
operation_parameters_maximum_occurences["getItemTemplates:::size"]=0
operation_parameters_maximum_occurences["getItemTemplates:::page"]=0
operation_parameters_maximum_occurences["getItemTemplates:::order"]=0
operation_parameters_maximum_occurences["getStore:::limit"]=0
operation_parameters_maximum_occurences["getStore:::page"]=0
operation_parameters_maximum_occurences["getStore:::use_catalog"]=0
operation_parameters_maximum_occurences["getStore:::ignore_location"]=0
operation_parameters_maximum_occurences["getStore:::in_stock_only"]=0
operation_parameters_maximum_occurences["getStoreItem:::id"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_name_search"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_unique_key"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_published"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_displayable"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_start"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_end"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_start_date"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_stop_date"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_sku"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_price"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_tag"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_items_by_type"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_bundled_skus"]=0
operation_parameters_maximum_occurences["getStoreItems:::filter_vendor"]=0
operation_parameters_maximum_occurences["getStoreItems:::size"]=0
operation_parameters_maximum_occurences["getStoreItems:::page"]=0
operation_parameters_maximum_occurences["getStoreItems:::order"]=0
operation_parameters_maximum_occurences["quickBuy:::quick_buy_request"]=0
operation_parameters_maximum_occurences["updateItemTemplate:::id"]=0
operation_parameters_maximum_occurences["updateItemTemplate:::item_template_resource"]=0
operation_parameters_maximum_occurences["updateStoreItem:::id"]=0
operation_parameters_maximum_occurences["updateStoreItem:::cascade"]=0
operation_parameters_maximum_occurences["updateStoreItem:::store_item"]=0
operation_parameters_maximum_occurences["createBundleItem:::cascade"]=0
operation_parameters_maximum_occurences["createBundleItem:::bundle_item"]=0
operation_parameters_maximum_occurences["createBundleTemplate:::bundle_template_resource"]=0
operation_parameters_maximum_occurences["deleteBundleItem:::id"]=0
operation_parameters_maximum_occurences["deleteBundleTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteBundleTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getBundleItem:::id"]=0
operation_parameters_maximum_occurences["getBundleTemplate:::id"]=0
operation_parameters_maximum_occurences["getBundleTemplates:::size"]=0
operation_parameters_maximum_occurences["getBundleTemplates:::page"]=0
operation_parameters_maximum_occurences["getBundleTemplates:::order"]=0
operation_parameters_maximum_occurences["updateBundleItem:::id"]=0
operation_parameters_maximum_occurences["updateBundleItem:::cascade"]=0
operation_parameters_maximum_occurences["updateBundleItem:::bundle_item"]=0
operation_parameters_maximum_occurences["updateBundleTemplate:::id"]=0
operation_parameters_maximum_occurences["updateBundleTemplate:::bundle_template_resource"]=0
operation_parameters_maximum_occurences["createCouponItem:::cascade"]=0
operation_parameters_maximum_occurences["createCouponItem:::coupon_item"]=0
operation_parameters_maximum_occurences["createCouponTemplate:::coupon_template_resource"]=0
operation_parameters_maximum_occurences["deleteCouponItem:::id"]=0
operation_parameters_maximum_occurences["deleteCouponTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteCouponTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getCouponItem:::id"]=0
operation_parameters_maximum_occurences["getCouponTemplate:::id"]=0
operation_parameters_maximum_occurences["getCouponTemplates:::size"]=0
operation_parameters_maximum_occurences["getCouponTemplates:::page"]=0
operation_parameters_maximum_occurences["getCouponTemplates:::order"]=0
operation_parameters_maximum_occurences["updateCouponItem:::id"]=0
operation_parameters_maximum_occurences["updateCouponItem:::cascade"]=0
operation_parameters_maximum_occurences["updateCouponItem:::coupon_item"]=0
operation_parameters_maximum_occurences["updateCouponTemplate:::id"]=0
operation_parameters_maximum_occurences["updateCouponTemplate:::coupon_template_resource"]=0
operation_parameters_maximum_occurences["createCatalogSale:::catalog_sale"]=0
operation_parameters_maximum_occurences["deleteCatalogSale:::id"]=0
operation_parameters_maximum_occurences["getCatalogSale:::id"]=0
operation_parameters_maximum_occurences["getCatalogSales:::size"]=0
operation_parameters_maximum_occurences["getCatalogSales:::page"]=0
operation_parameters_maximum_occurences["getCatalogSales:::order"]=0
operation_parameters_maximum_occurences["updateCatalogSale:::id"]=0
operation_parameters_maximum_occurences["updateCatalogSale:::catalog_sale"]=0
operation_parameters_maximum_occurences["createShippingItem:::cascade"]=0
operation_parameters_maximum_occurences["createShippingItem:::shipping_item"]=0
operation_parameters_maximum_occurences["createShippingTemplate:::shipping_template_resource"]=0
operation_parameters_maximum_occurences["deleteShippingItem:::id"]=0
operation_parameters_maximum_occurences["deleteShippingTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteShippingTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getShippingItem:::id"]=0
operation_parameters_maximum_occurences["getShippingTemplate:::id"]=0
operation_parameters_maximum_occurences["getShippingTemplates:::size"]=0
operation_parameters_maximum_occurences["getShippingTemplates:::page"]=0
operation_parameters_maximum_occurences["getShippingTemplates:::order"]=0
operation_parameters_maximum_occurences["updateShippingItem:::id"]=0
operation_parameters_maximum_occurences["updateShippingItem:::cascade"]=0
operation_parameters_maximum_occurences["updateShippingItem:::shipping_item"]=0
operation_parameters_maximum_occurences["updateShippingTemplate:::id"]=0
operation_parameters_maximum_occurences["updateShippingTemplate:::shipping_template_resource"]=0
operation_parameters_maximum_occurences["addCustomDiscount:::id"]=0
operation_parameters_maximum_occurences["addCustomDiscount:::custom_discount"]=0
operation_parameters_maximum_occurences["addDiscountToCart:::id"]=0
operation_parameters_maximum_occurences["addDiscountToCart:::sku_request"]=0
operation_parameters_maximum_occurences["addItemToCart:::id"]=0
operation_parameters_maximum_occurences["addItemToCart:::cart_item_request"]=0
operation_parameters_maximum_occurences["createCart:::owner"]=0
operation_parameters_maximum_occurences["createCart:::currency_code"]=0
operation_parameters_maximum_occurences["getCart:::id"]=0
operation_parameters_maximum_occurences["getCarts:::filter_owner_id"]=0
operation_parameters_maximum_occurences["getCarts:::size"]=0
operation_parameters_maximum_occurences["getCarts:::page"]=0
operation_parameters_maximum_occurences["getCarts:::order"]=0
operation_parameters_maximum_occurences["getShippable:::id"]=0
operation_parameters_maximum_occurences["getShippingCountries:::id"]=0
operation_parameters_maximum_occurences["removeDiscountFromCart:::id"]=0
operation_parameters_maximum_occurences["removeDiscountFromCart:::code"]=0
operation_parameters_maximum_occurences["setCartCurrency:::id"]=0
operation_parameters_maximum_occurences["setCartCurrency:::currency_code"]=0
operation_parameters_maximum_occurences["setCartOwner:::id"]=0
operation_parameters_maximum_occurences["setCartOwner:::user_id"]=0
operation_parameters_maximum_occurences["updateItemInCart:::id"]=0
operation_parameters_maximum_occurences["updateItemInCart:::cart_item_request"]=0
operation_parameters_maximum_occurences["updateShippingAddress:::id"]=0
operation_parameters_maximum_occurences["updateShippingAddress:::cart_shipping_address_request"]=0
operation_parameters_maximum_occurences["createSubscription:::subscription_resource"]=0
operation_parameters_maximum_occurences["createSubscriptionTemplate:::subscription_template_resource"]=0
operation_parameters_maximum_occurences["deleteSubscription:::id"]=0
operation_parameters_maximum_occurences["deleteSubscription:::plan_id"]=0
operation_parameters_maximum_occurences["deleteSubscriptionTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteSubscriptionTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getSubscription:::id"]=0
operation_parameters_maximum_occurences["getSubscriptionTemplate:::id"]=0
operation_parameters_maximum_occurences["getSubscriptionTemplates:::size"]=0
operation_parameters_maximum_occurences["getSubscriptionTemplates:::page"]=0
operation_parameters_maximum_occurences["getSubscriptionTemplates:::order"]=0
operation_parameters_maximum_occurences["getSubscriptions:::size"]=0
operation_parameters_maximum_occurences["getSubscriptions:::page"]=0
operation_parameters_maximum_occurences["getSubscriptions:::order"]=0
operation_parameters_maximum_occurences["updateSubscription:::id"]=0
operation_parameters_maximum_occurences["updateSubscription:::subscription_resource"]=0
operation_parameters_maximum_occurences["updateSubscriptionTemplate:::id"]=0
operation_parameters_maximum_occurences["updateSubscriptionTemplate:::subscription_template_resource"]=0
operation_parameters_maximum_occurences["createVendor:::vendor"]=0
operation_parameters_maximum_occurences["createVendorTemplate:::vendor_template_resource"]=0
operation_parameters_maximum_occurences["deleteVendor:::id"]=0
operation_parameters_maximum_occurences["deleteVendorTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteVendorTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getVendor:::id"]=0
operation_parameters_maximum_occurences["getVendorTemplate:::id"]=0
operation_parameters_maximum_occurences["getVendorTemplates:::size"]=0
operation_parameters_maximum_occurences["getVendorTemplates:::page"]=0
operation_parameters_maximum_occurences["getVendorTemplates:::order"]=0
operation_parameters_maximum_occurences["getVendors:::filter_name"]=0
operation_parameters_maximum_occurences["getVendors:::size"]=0
operation_parameters_maximum_occurences["getVendors:::page"]=0
operation_parameters_maximum_occurences["getVendors:::order"]=0
operation_parameters_maximum_occurences["updateVendor:::id"]=0
operation_parameters_maximum_occurences["updateVendor:::vendor"]=0
operation_parameters_maximum_occurences["updateVendorTemplate:::id"]=0
operation_parameters_maximum_occurences["updateVendorTemplate:::vendor_template_resource"]=0
operation_parameters_maximum_occurences["createCountryTax:::tax_resource"]=0
operation_parameters_maximum_occurences["createStateTax:::country_code_iso3"]=0
operation_parameters_maximum_occurences["createStateTax:::tax_resource"]=0
operation_parameters_maximum_occurences["deleteCountryTax:::country_code_iso3"]=0
operation_parameters_maximum_occurences["deleteStateTax:::country_code_iso3"]=0
operation_parameters_maximum_occurences["deleteStateTax:::state_code"]=0
operation_parameters_maximum_occurences["getCountryTax:::country_code_iso3"]=0
operation_parameters_maximum_occurences["getCountryTaxes:::size"]=0
operation_parameters_maximum_occurences["getCountryTaxes:::page"]=0
operation_parameters_maximum_occurences["getCountryTaxes:::order"]=0
operation_parameters_maximum_occurences["getStateTax:::country_code_iso3"]=0
operation_parameters_maximum_occurences["getStateTax:::state_code"]=0
operation_parameters_maximum_occurences["getStateTaxesForCountries:::size"]=0
operation_parameters_maximum_occurences["getStateTaxesForCountries:::page"]=0
operation_parameters_maximum_occurences["getStateTaxesForCountries:::order"]=0
operation_parameters_maximum_occurences["getStateTaxesForCountry:::country_code_iso3"]=0
operation_parameters_maximum_occurences["getStateTaxesForCountry:::size"]=0
operation_parameters_maximum_occurences["getStateTaxesForCountry:::page"]=0
operation_parameters_maximum_occurences["getStateTaxesForCountry:::order"]=0
operation_parameters_maximum_occurences["updateCountryTax:::country_code_iso3"]=0
operation_parameters_maximum_occurences["updateCountryTax:::tax_resource"]=0
operation_parameters_maximum_occurences["updateStateTax:::country_code_iso3"]=0
operation_parameters_maximum_occurences["updateStateTax:::state_code"]=0
operation_parameters_maximum_occurences["updateStateTax:::tax_resource"]=0
operation_parameters_maximum_occurences["getTemplatePropertyType:::type"]=0
operation_parameters_maximum_occurences["addUserTag:::user_id"]=0
operation_parameters_maximum_occurences["addUserTag:::tag"]=0
operation_parameters_maximum_occurences["createUserTemplate:::user_template_resource"]=0
operation_parameters_maximum_occurences["deleteUserTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteUserTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getUser:::id"]=0
operation_parameters_maximum_occurences["getUserTags:::user_id"]=0
operation_parameters_maximum_occurences["getUserTemplate:::id"]=0
operation_parameters_maximum_occurences["getUserTemplates:::size"]=0
operation_parameters_maximum_occurences["getUserTemplates:::page"]=0
operation_parameters_maximum_occurences["getUserTemplates:::order"]=0
operation_parameters_maximum_occurences["getUsers:::filter_displayname"]=0
operation_parameters_maximum_occurences["getUsers:::filter_email"]=0
operation_parameters_maximum_occurences["getUsers:::filter_firstname"]=0
operation_parameters_maximum_occurences["getUsers:::filter_fullname"]=0
operation_parameters_maximum_occurences["getUsers:::filter_lastname"]=0
operation_parameters_maximum_occurences["getUsers:::filter_username"]=0
operation_parameters_maximum_occurences["getUsers:::filter_tag"]=0
operation_parameters_maximum_occurences["getUsers:::filter_group"]=0
operation_parameters_maximum_occurences["getUsers:::filter_role"]=0
operation_parameters_maximum_occurences["getUsers:::filter_search"]=0
operation_parameters_maximum_occurences["getUsers:::size"]=0
operation_parameters_maximum_occurences["getUsers:::page"]=0
operation_parameters_maximum_occurences["getUsers:::order"]=0
operation_parameters_maximum_occurences["passwordReset:::id"]=0
operation_parameters_maximum_occurences["passwordReset:::new_password_request"]=0
operation_parameters_maximum_occurences["registerUser:::user_resource"]=0
operation_parameters_maximum_occurences["removeUserTag:::user_id"]=0
operation_parameters_maximum_occurences["removeUserTag:::tag"]=0
operation_parameters_maximum_occurences["setPassword:::id"]=0
operation_parameters_maximum_occurences["setPassword:::password"]=0
operation_parameters_maximum_occurences["startPasswordReset:::id"]=0
operation_parameters_maximum_occurences["submitPasswordReset:::password_reset"]=0
operation_parameters_maximum_occurences["updateUser:::id"]=0
operation_parameters_maximum_occurences["updateUser:::user_resource"]=0
operation_parameters_maximum_occurences["updateUserTemplate:::id"]=0
operation_parameters_maximum_occurences["updateUserTemplate:::user_template_resource"]=0
operation_parameters_maximum_occurences["createAddress:::user_id"]=0
operation_parameters_maximum_occurences["createAddress:::saved_address_resource"]=0
operation_parameters_maximum_occurences["deleteAddress:::user_id"]=0
operation_parameters_maximum_occurences["deleteAddress:::id"]=0
operation_parameters_maximum_occurences["getAddress:::user_id"]=0
operation_parameters_maximum_occurences["getAddress:::id"]=0
operation_parameters_maximum_occurences["getAddresses:::user_id"]=0
operation_parameters_maximum_occurences["getAddresses:::size"]=0
operation_parameters_maximum_occurences["getAddresses:::page"]=0
operation_parameters_maximum_occurences["getAddresses:::order"]=0
operation_parameters_maximum_occurences["updateAddress:::user_id"]=0
operation_parameters_maximum_occurences["updateAddress:::id"]=0
operation_parameters_maximum_occurences["updateAddress:::saved_address_resource"]=0
operation_parameters_maximum_occurences["addFriend:::user_id"]=0
operation_parameters_maximum_occurences["addFriend:::id"]=0
operation_parameters_maximum_occurences["getFriends:::user_id"]=0
operation_parameters_maximum_occurences["getFriends:::size"]=0
operation_parameters_maximum_occurences["getFriends:::page"]=0
operation_parameters_maximum_occurences["getInviteToken:::user_id"]=0
operation_parameters_maximum_occurences["getInvites:::user_id"]=0
operation_parameters_maximum_occurences["getInvites:::size"]=0
operation_parameters_maximum_occurences["getInvites:::page"]=0
operation_parameters_maximum_occurences["redeemFriendshipToken:::user_id"]=0
operation_parameters_maximum_occurences["redeemFriendshipToken:::token"]=0
operation_parameters_maximum_occurences["removeOrDeclineFriend:::user_id"]=0
operation_parameters_maximum_occurences["removeOrDeclineFriend:::id"]=0
operation_parameters_maximum_occurences["addMemberToGroup:::unique_name"]=0
operation_parameters_maximum_occurences["addMemberToGroup:::user"]=0
operation_parameters_maximum_occurences["addMembersToGroup:::unique_name"]=0
operation_parameters_maximum_occurences["addMembersToGroup:::users"]=0
operation_parameters_maximum_occurences["createGroup:::group_resource"]=0
operation_parameters_maximum_occurences["createGroupTemplate:::group_template_resource"]=0
operation_parameters_maximum_occurences["deleteGroup:::unique_name"]=0
operation_parameters_maximum_occurences["deleteGroupTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteGroupTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getGroup:::unique_name"]=0
operation_parameters_maximum_occurences["getGroupMember:::unique_name"]=0
operation_parameters_maximum_occurences["getGroupMember:::user_id"]=0
operation_parameters_maximum_occurences["getGroupMembers:::unique_name"]=0
operation_parameters_maximum_occurences["getGroupMembers:::size"]=0
operation_parameters_maximum_occurences["getGroupMembers:::page"]=0
operation_parameters_maximum_occurences["getGroupMembers:::order"]=0
operation_parameters_maximum_occurences["getGroupTemplate:::id"]=0
operation_parameters_maximum_occurences["getGroupTemplates:::size"]=0
operation_parameters_maximum_occurences["getGroupTemplates:::page"]=0
operation_parameters_maximum_occurences["getGroupTemplates:::order"]=0
operation_parameters_maximum_occurences["getGroupsForUser:::user_id"]=0
operation_parameters_maximum_occurences["removeGroupMember:::unique_name"]=0
operation_parameters_maximum_occurences["removeGroupMember:::user_id"]=0
operation_parameters_maximum_occurences["updateGroup:::unique_name"]=0
operation_parameters_maximum_occurences["updateGroup:::group_resource"]=0
operation_parameters_maximum_occurences["updateGroupMemberStatus:::unique_name"]=0
operation_parameters_maximum_occurences["updateGroupMemberStatus:::user_id"]=0
operation_parameters_maximum_occurences["updateGroupMemberStatus:::Status"]=0
operation_parameters_maximum_occurences["updateGroupTemplate:::id"]=0
operation_parameters_maximum_occurences["updateGroupTemplate:::group_template_resource"]=0
operation_parameters_maximum_occurences["updateGroups:::filter_template"]=0
operation_parameters_maximum_occurences["updateGroups:::filter_member_count"]=0
operation_parameters_maximum_occurences["updateGroups:::filter_name"]=0
operation_parameters_maximum_occurences["updateGroups:::filter_unique_name"]=0
operation_parameters_maximum_occurences["updateGroups:::filter_parent"]=0
operation_parameters_maximum_occurences["updateGroups:::filter_status"]=0
operation_parameters_maximum_occurences["updateGroups:::size"]=0
operation_parameters_maximum_occurences["updateGroups:::page"]=0
operation_parameters_maximum_occurences["updateGroups:::order"]=0
operation_parameters_maximum_occurences["addItemToUserInventory:::id"]=0
operation_parameters_maximum_occurences["addItemToUserInventory:::user_inventory_add_request"]=0
operation_parameters_maximum_occurences["checkUserEntitlementItem:::user_id"]=0
operation_parameters_maximum_occurences["checkUserEntitlementItem:::item_id"]=0
operation_parameters_maximum_occurences["checkUserEntitlementItem:::sku"]=0
operation_parameters_maximum_occurences["createEntitlementItem:::cascade"]=0
operation_parameters_maximum_occurences["createEntitlementItem:::entitlement_item"]=0
operation_parameters_maximum_occurences["createEntitlementTemplate:::template"]=0
operation_parameters_maximum_occurences["deleteEntitlementItem:::entitlement_id"]=0
operation_parameters_maximum_occurences["deleteEntitlementTemplate:::id"]=0
operation_parameters_maximum_occurences["deleteEntitlementTemplate:::cascade"]=0
operation_parameters_maximum_occurences["getEntitlementItem:::entitlement_id"]=0
operation_parameters_maximum_occurences["getEntitlementItems:::size"]=0
operation_parameters_maximum_occurences["getEntitlementItems:::page"]=0
operation_parameters_maximum_occurences["getEntitlementItems:::order"]=0
operation_parameters_maximum_occurences["getEntitlementTemplate:::id"]=0
operation_parameters_maximum_occurences["getEntitlementTemplates:::size"]=0
operation_parameters_maximum_occurences["getEntitlementTemplates:::page"]=0
operation_parameters_maximum_occurences["getEntitlementTemplates:::order"]=0
operation_parameters_maximum_occurences["getUserInventories:::id"]=0
operation_parameters_maximum_occurences["getUserInventories:::inactive"]=0
operation_parameters_maximum_occurences["getUserInventories:::size"]=0
operation_parameters_maximum_occurences["getUserInventories:::page"]=0
operation_parameters_maximum_occurences["getUserInventories:::filter_item_name"]=0
operation_parameters_maximum_occurences["getUserInventories:::filter_item_id"]=0
operation_parameters_maximum_occurences["getUserInventories:::filter_username"]=0
operation_parameters_maximum_occurences["getUserInventories:::filter_group"]=0
operation_parameters_maximum_occurences["getUserInventories:::filter_date"]=0
operation_parameters_maximum_occurences["getUserInventory:::user_id"]=0
operation_parameters_maximum_occurences["getUserInventory:::id"]=0
operation_parameters_maximum_occurences["getUserInventoryLog:::user_id"]=0
operation_parameters_maximum_occurences["getUserInventoryLog:::id"]=0
operation_parameters_maximum_occurences["getUserInventoryLog:::size"]=0
operation_parameters_maximum_occurences["getUserInventoryLog:::page"]=0
operation_parameters_maximum_occurences["getUsersInventory:::inactive"]=0
operation_parameters_maximum_occurences["getUsersInventory:::size"]=0
operation_parameters_maximum_occurences["getUsersInventory:::page"]=0
operation_parameters_maximum_occurences["getUsersInventory:::filter_item_name"]=0
operation_parameters_maximum_occurences["getUsersInventory:::filter_item_id"]=0
operation_parameters_maximum_occurences["getUsersInventory:::filter_username"]=0
operation_parameters_maximum_occurences["getUsersInventory:::filter_group"]=0
operation_parameters_maximum_occurences["getUsersInventory:::filter_date"]=0
operation_parameters_maximum_occurences["grantUserEntitlement:::user_id"]=0
operation_parameters_maximum_occurences["grantUserEntitlement:::grantRequest"]=0
operation_parameters_maximum_occurences["updateEntitlementItem:::entitlement_id"]=0
operation_parameters_maximum_occurences["updateEntitlementItem:::cascade"]=0
operation_parameters_maximum_occurences["updateEntitlementItem:::entitlement_item"]=0
operation_parameters_maximum_occurences["updateEntitlementTemplate:::id"]=0
operation_parameters_maximum_occurences["updateEntitlementTemplate:::template"]=0
operation_parameters_maximum_occurences["updateUserInventoryBehaviorData:::user_id"]=0
operation_parameters_maximum_occurences["updateUserInventoryBehaviorData:::id"]=0
operation_parameters_maximum_occurences["updateUserInventoryBehaviorData:::data"]=0
operation_parameters_maximum_occurences["updateUserInventoryExpires:::user_id"]=0
operation_parameters_maximum_occurences["updateUserInventoryExpires:::id"]=0
operation_parameters_maximum_occurences["updateUserInventoryExpires:::timestamp"]=0
operation_parameters_maximum_occurences["updateUserInventoryStatus:::user_id"]=0
operation_parameters_maximum_occurences["updateUserInventoryStatus:::id"]=0
operation_parameters_maximum_occurences["updateUserInventoryStatus:::inventory_status"]=0
operation_parameters_maximum_occurences["useUserEntitlementItem:::user_id"]=0
operation_parameters_maximum_occurences["useUserEntitlementItem:::item_id"]=0
operation_parameters_maximum_occurences["useUserEntitlementItem:::sku"]=0
operation_parameters_maximum_occurences["useUserEntitlementItem:::info"]=0
operation_parameters_maximum_occurences["createUserRelationship:::relationship"]=0
operation_parameters_maximum_occurences["deleteUserRelationship:::id"]=0
operation_parameters_maximum_occurences["getUserRelationship:::id"]=0
operation_parameters_maximum_occurences["getUserRelationships:::size"]=0
operation_parameters_maximum_occurences["getUserRelationships:::page"]=0
operation_parameters_maximum_occurences["getUserRelationships:::order"]=0
operation_parameters_maximum_occurences["updateUserRelationship:::id"]=0
operation_parameters_maximum_occurences["updateUserRelationship:::relationship"]=0
operation_parameters_maximum_occurences["getUserSubscriptionDetails:::user_id"]=0
operation_parameters_maximum_occurences["getUserSubscriptionDetails:::inventory_id"]=0
operation_parameters_maximum_occurences["getUsersSubscriptionDetails:::user_id"]=0
operation_parameters_maximum_occurences["reactivateUserSubscription:::user_id"]=0
operation_parameters_maximum_occurences["reactivateUserSubscription:::inventory_id"]=0
operation_parameters_maximum_occurences["reactivateUserSubscription:::reactivate_subscription_request"]=0
operation_parameters_maximum_occurences["setSubscriptionBillDate:::user_id"]=0
operation_parameters_maximum_occurences["setSubscriptionBillDate:::inventory_id"]=0
operation_parameters_maximum_occurences["setSubscriptionBillDate:::bill_date"]=0
operation_parameters_maximum_occurences["setSubscriptionPaymentMethod:::user_id"]=0
operation_parameters_maximum_occurences["setSubscriptionPaymentMethod:::inventory_id"]=0
operation_parameters_maximum_occurences["setSubscriptionPaymentMethod:::payment_method_id"]=0
operation_parameters_maximum_occurences["setSubscriptionStatus:::user_id"]=0
operation_parameters_maximum_occurences["setSubscriptionStatus:::inventory_id"]=0
operation_parameters_maximum_occurences["setSubscriptionStatus:::status"]=0
operation_parameters_maximum_occurences["setUserSubscriptionPlan:::user_id"]=0
operation_parameters_maximum_occurences["setUserSubscriptionPlan:::inventory_id"]=0
operation_parameters_maximum_occurences["setUserSubscriptionPlan:::plan_id"]=0
operation_parameters_maximum_occurences["setUserSubscriptionPrice:::user_id"]=0
operation_parameters_maximum_occurences["setUserSubscriptionPrice:::inventory_id"]=0
operation_parameters_maximum_occurences["setUserSubscriptionPrice:::The override details"]=0
operation_parameters_maximum_occurences["getBatch:::token"]=0
operation_parameters_maximum_occurences["sendBatch:::batch"]=0
operation_parameters_maximum_occurences["setMaintenance:::maintenance"]=0
operation_parameters_maximum_occurences["updateMaintenance:::maintenance"]=0
operation_parameters_maximum_occurences["getUserLocationLog:::user_id"]=0
operation_parameters_maximum_occurences["getUserLocationLog:::size"]=0
operation_parameters_maximum_occurences["getUserLocationLog:::page"]=0
operation_parameters_maximum_occurences["getUserLocationLog:::order"]=0

##
# The type of collection for specifying multiple values for parameter:
# - multi, csv, ssv, tsv
declare -A operation_parameters_collection_type
operation_parameters_collection_type["getOAuthToken:::grant_type"]=""
operation_parameters_collection_type["getOAuthToken:::client_id"]=""
operation_parameters_collection_type["getOAuthToken:::client_secret"]=""
operation_parameters_collection_type["getOAuthToken:::username"]=""
operation_parameters_collection_type["getOAuthToken:::password"]=""
operation_parameters_collection_type["createActivity:::activity_resource"]=""
operation_parameters_collection_type["createActivityOccurrence:::test"]=""
operation_parameters_collection_type["createActivityOccurrence:::activity_occurrence_resource"]=""
operation_parameters_collection_type["createActivityTemplate:::activity_template_resource"]=""
operation_parameters_collection_type["deleteActivity:::id"]=""
operation_parameters_collection_type["deleteActivityTemplate:::id"]=""
operation_parameters_collection_type["deleteActivityTemplate:::cascade"]=""
operation_parameters_collection_type["getActivities:::filter_template"]=""
operation_parameters_collection_type["getActivities:::filter_name"]=""
operation_parameters_collection_type["getActivities:::filter_id"]=""
operation_parameters_collection_type["getActivities:::size"]=""
operation_parameters_collection_type["getActivities:::page"]=""
operation_parameters_collection_type["getActivities:::order"]=""
operation_parameters_collection_type["getActivity:::id"]=""
operation_parameters_collection_type["getActivityTemplate:::id"]=""
operation_parameters_collection_type["getActivityTemplates:::size"]=""
operation_parameters_collection_type["getActivityTemplates:::page"]=""
operation_parameters_collection_type["getActivityTemplates:::order"]=""
operation_parameters_collection_type["setActivityOccurrenceResults:::activity_occurrence_id"]=""
operation_parameters_collection_type["setActivityOccurrenceResults:::activity_occurrence_results"]=""
operation_parameters_collection_type["updateActivity:::id"]=""
operation_parameters_collection_type["updateActivity:::activity_resource"]=""
operation_parameters_collection_type["updateActivityOccurrence:::activity_occurrence_id"]=""
operation_parameters_collection_type["updateActivityOccurrence:::activity_cccurrence_status"]=""
operation_parameters_collection_type["updateActivityTemplate:::id"]=""
operation_parameters_collection_type["updateActivityTemplate:::activity_template_resource"]=""
operation_parameters_collection_type["getDownloadURL:::bucket"]=""
operation_parameters_collection_type["getDownloadURL:::path"]=""
operation_parameters_collection_type["getDownloadURL:::expiration"]=""
operation_parameters_collection_type["getSignedS3URL:::filename"]=""
operation_parameters_collection_type["getSignedS3URL:::content_type"]=""
operation_parameters_collection_type["createClient:::client_resource"]=""
operation_parameters_collection_type["deleteClient:::client_key"]=""
operation_parameters_collection_type["getClient:::client_key"]=""
operation_parameters_collection_type["getClients:::size"]=""
operation_parameters_collection_type["getClients:::page"]=""
operation_parameters_collection_type["getClients:::order"]=""
operation_parameters_collection_type["setClientGrantTypes:::client_key"]=""
operation_parameters_collection_type["setClientGrantTypes:::grant_list"]=
operation_parameters_collection_type["setClientRedirectUris:::client_key"]=""
operation_parameters_collection_type["setClientRedirectUris:::redirect_list"]=
operation_parameters_collection_type["updateClient:::client_key"]=""
operation_parameters_collection_type["updateClient:::client_resource"]=""
operation_parameters_collection_type["createPermission:::permission_resource"]=""
operation_parameters_collection_type["deletePermission:::permission"]=""
operation_parameters_collection_type["deletePermission:::force"]=""
operation_parameters_collection_type["getPermission:::permission"]=""
operation_parameters_collection_type["getPermissions:::size"]=""
operation_parameters_collection_type["getPermissions:::page"]=""
operation_parameters_collection_type["getPermissions:::order"]=""
operation_parameters_collection_type["updatePermission:::permission"]=""
operation_parameters_collection_type["updatePermission:::permission_resource"]=""
operation_parameters_collection_type["createRole:::role_resource"]=""
operation_parameters_collection_type["deleteRole:::role"]=""
operation_parameters_collection_type["deleteRole:::force"]=""
operation_parameters_collection_type["getClientRoles:::client_key"]=""
operation_parameters_collection_type["getRole:::role"]=""
operation_parameters_collection_type["getRoles:::filter_name"]=""
operation_parameters_collection_type["getRoles:::filter_role"]=""
operation_parameters_collection_type["getRoles:::size"]=""
operation_parameters_collection_type["getRoles:::page"]=""
operation_parameters_collection_type["getRoles:::order"]=""
operation_parameters_collection_type["getUserRoles:::user_id"]=""
operation_parameters_collection_type["setClientRoles:::client_key"]=""
operation_parameters_collection_type["setClientRoles:::roles_list"]=
operation_parameters_collection_type["setPermissionsForRole:::role"]=""
operation_parameters_collection_type["setPermissionsForRole:::permissions_list"]=
operation_parameters_collection_type["setUserRoles:::user_id"]=""
operation_parameters_collection_type["setUserRoles:::roles_list"]=
operation_parameters_collection_type["updateRole:::role"]=""
operation_parameters_collection_type["updateRole:::role_resource"]=""
operation_parameters_collection_type["deleteTokens:::username"]=""
operation_parameters_collection_type["deleteTokens:::client_id"]=""
operation_parameters_collection_type["getToken:::username"]=""
operation_parameters_collection_type["getToken:::client_id"]=""
operation_parameters_collection_type["getTokens:::filter_client_id"]=""
operation_parameters_collection_type["getTokens:::filter_username"]=""
operation_parameters_collection_type["getTokens:::size"]=""
operation_parameters_collection_type["getTokens:::page"]=""
operation_parameters_collection_type["getTokens:::order"]=""
operation_parameters_collection_type["getBREActions:::filter_category"]=""
operation_parameters_collection_type["getBREActions:::filter_name"]=""
operation_parameters_collection_type["getBREActions:::filter_tags"]=""
operation_parameters_collection_type["getBREActions:::filter_search"]=""
operation_parameters_collection_type["createBRECategoryTemplate:::template"]=""
operation_parameters_collection_type["deleteBRECategoryTemplate:::id"]=""
operation_parameters_collection_type["deleteBRECategoryTemplate:::cascade"]=""
operation_parameters_collection_type["getBRECategories:::size"]=""
operation_parameters_collection_type["getBRECategories:::page"]=""
operation_parameters_collection_type["getBRECategory:::name"]=""
operation_parameters_collection_type["getBRECategoryTemplate:::id"]=""
operation_parameters_collection_type["getBRECategoryTemplates:::size"]=""
operation_parameters_collection_type["getBRECategoryTemplates:::page"]=""
operation_parameters_collection_type["getBRECategoryTemplates:::order"]=""
operation_parameters_collection_type["updateBRECategory:::name"]=""
operation_parameters_collection_type["updateBRECategory:::category"]=""
operation_parameters_collection_type["updateBRECategoryTemplate:::id"]=""
operation_parameters_collection_type["updateBRECategoryTemplate:::template"]=""
operation_parameters_collection_type["sendBREEvent:::bre_event"]=""
operation_parameters_collection_type["createBREGlobal:::bre_global_resource"]=""
operation_parameters_collection_type["deleteBREGlobal:::id"]=""
operation_parameters_collection_type["getBREGlobal:::id"]=""
operation_parameters_collection_type["getBREGlobals:::filter_system"]=""
operation_parameters_collection_type["getBREGlobals:::size"]=""
operation_parameters_collection_type["getBREGlobals:::page"]=""
operation_parameters_collection_type["updateBREGlobal:::id"]=""
operation_parameters_collection_type["updateBREGlobal:::bre_global_resource"]=""
operation_parameters_collection_type["createBRERule:::bre_rule"]=""
operation_parameters_collection_type["deleteBRERule:::id"]=""
operation_parameters_collection_type["getBREExpressionAsString:::expression"]=""
operation_parameters_collection_type["getBRERule:::id"]=""
operation_parameters_collection_type["getBRERules:::filter_name"]=""
operation_parameters_collection_type["getBRERules:::filter_enabled"]=""
operation_parameters_collection_type["getBRERules:::filter_system"]=""
operation_parameters_collection_type["getBRERules:::filter_trigger"]=""
operation_parameters_collection_type["getBRERules:::filter_action"]=""
operation_parameters_collection_type["getBRERules:::filter_condition"]=""
operation_parameters_collection_type["getBRERules:::size"]=""
operation_parameters_collection_type["getBRERules:::page"]=""
operation_parameters_collection_type["setBRERule:::id"]=""
operation_parameters_collection_type["setBRERule:::enabled"]=""
operation_parameters_collection_type["updateBRERule:::id"]=""
operation_parameters_collection_type["updateBRERule:::bre_rule"]=""
operation_parameters_collection_type["createBRETrigger:::bre_trigger_resource"]=""
operation_parameters_collection_type["deleteBRETrigger:::event_name"]=""
operation_parameters_collection_type["getBRETrigger:::event_name"]=""
operation_parameters_collection_type["getBRETriggers:::filter_system"]=""
operation_parameters_collection_type["getBRETriggers:::filter_category"]=""
operation_parameters_collection_type["getBRETriggers:::filter_tags"]=""
operation_parameters_collection_type["getBRETriggers:::filter_name"]=""
operation_parameters_collection_type["getBRETriggers:::filter_search"]=""
operation_parameters_collection_type["getBRETriggers:::size"]=""
operation_parameters_collection_type["getBRETriggers:::page"]=""
operation_parameters_collection_type["updateBRETrigger:::event_name"]=""
operation_parameters_collection_type["updateBRETrigger:::bre_trigger_resource"]=""
operation_parameters_collection_type["getBREVariableValues:::name"]=""
operation_parameters_collection_type["getBREVariableValues:::filter_name"]=""
operation_parameters_collection_type["getBREVariableValues:::size"]=""
operation_parameters_collection_type["getBREVariableValues:::page"]=""
operation_parameters_collection_type["addChallengeToCampaign:::id"]=""
operation_parameters_collection_type["addChallengeToCampaign:::challenge_id"]=""
operation_parameters_collection_type["createCampaign:::campaign_resource"]=""
operation_parameters_collection_type["createCampaignTemplate:::campaign_template_resource"]=""
operation_parameters_collection_type["deleteCampaign:::id"]=""
operation_parameters_collection_type["deleteCampaignTemplate:::id"]=""
operation_parameters_collection_type["deleteCampaignTemplate:::cascade"]=""
operation_parameters_collection_type["getCampaign:::id"]=""
operation_parameters_collection_type["getCampaignChallenges:::id"]=""
operation_parameters_collection_type["getCampaignChallenges:::filter_start_date"]=""
operation_parameters_collection_type["getCampaignChallenges:::filter_end_date"]=""
operation_parameters_collection_type["getCampaignChallenges:::size"]=""
operation_parameters_collection_type["getCampaignChallenges:::page"]=""
operation_parameters_collection_type["getCampaignChallenges:::order"]=""
operation_parameters_collection_type["getCampaignTemplate:::id"]=""
operation_parameters_collection_type["getCampaignTemplates:::size"]=""
operation_parameters_collection_type["getCampaignTemplates:::page"]=""
operation_parameters_collection_type["getCampaignTemplates:::order"]=""
operation_parameters_collection_type["getCampaigns:::filter_active"]=""
operation_parameters_collection_type["getCampaigns:::size"]=""
operation_parameters_collection_type["getCampaigns:::page"]=""
operation_parameters_collection_type["getCampaigns:::order"]=""
operation_parameters_collection_type["removeChallengeFromCampaign:::campaign_id"]=""
operation_parameters_collection_type["removeChallengeFromCampaign:::id"]=""
operation_parameters_collection_type["updateCampaign:::id"]=""
operation_parameters_collection_type["updateCampaign:::campaign_resource"]=""
operation_parameters_collection_type["updateCampaignTemplate:::id"]=""
operation_parameters_collection_type["updateCampaignTemplate:::campaign_template_resource"]=""
operation_parameters_collection_type["createChallenge:::challenge_resource"]=""
operation_parameters_collection_type["createChallengeActivity:::challenge_id"]=""
operation_parameters_collection_type["createChallengeActivity:::challenge_activity_resource"]=""
operation_parameters_collection_type["createChallengeActivity:::validateSettings"]=""
operation_parameters_collection_type["createChallengeActivityTemplate:::challengeActivity_template_resource"]=""
operation_parameters_collection_type["createChallengeTemplate:::challenge_template_resource"]=""
operation_parameters_collection_type["deleteChallenge:::id"]=""
operation_parameters_collection_type["deleteChallengeActivity:::id"]=""
operation_parameters_collection_type["deleteChallengeActivity:::challenge_id"]=""
operation_parameters_collection_type["deleteChallengeActivityTemplate:::id"]=""
operation_parameters_collection_type["deleteChallengeActivityTemplate:::cascade"]=""
operation_parameters_collection_type["deleteChallengeEvent:::id"]=""
operation_parameters_collection_type["deleteChallengeTemplate:::id"]=""
operation_parameters_collection_type["deleteChallengeTemplate:::cascade"]=""
operation_parameters_collection_type["getChallenge:::id"]=""
operation_parameters_collection_type["getChallengeActivities:::challenge_id"]=""
operation_parameters_collection_type["getChallengeActivities:::size"]=""
operation_parameters_collection_type["getChallengeActivities:::page"]=""
operation_parameters_collection_type["getChallengeActivities:::order"]=""
operation_parameters_collection_type["getChallengeActivity:::id"]=""
operation_parameters_collection_type["getChallengeActivity:::challenge_id"]=""
operation_parameters_collection_type["getChallengeActivityTemplate:::id"]=""
operation_parameters_collection_type["getChallengeActivityTemplates:::size"]=""
operation_parameters_collection_type["getChallengeActivityTemplates:::page"]=""
operation_parameters_collection_type["getChallengeActivityTemplates:::order"]=""
operation_parameters_collection_type["getChallengeEvent:::id"]=""
operation_parameters_collection_type["getChallengeEvents:::filter_start_date"]=""
operation_parameters_collection_type["getChallengeEvents:::filter_end_date"]=""
operation_parameters_collection_type["getChallengeEvents:::filter_campaigns"]=""
operation_parameters_collection_type["getChallengeEvents:::filter_challenge"]=""
operation_parameters_collection_type["getChallengeEvents:::size"]=""
operation_parameters_collection_type["getChallengeEvents:::page"]=""
operation_parameters_collection_type["getChallengeEvents:::order"]=""
operation_parameters_collection_type["getChallengeTemplate:::id"]=""
operation_parameters_collection_type["getChallengeTemplates:::size"]=""
operation_parameters_collection_type["getChallengeTemplates:::page"]=""
operation_parameters_collection_type["getChallengeTemplates:::order"]=""
operation_parameters_collection_type["getChallenges:::filter_template"]=""
operation_parameters_collection_type["getChallenges:::filter_active_campaign"]=""
operation_parameters_collection_type["getChallenges:::filter_start_date"]=""
operation_parameters_collection_type["getChallenges:::filter_end_date"]=""
operation_parameters_collection_type["getChallenges:::size"]=""
operation_parameters_collection_type["getChallenges:::page"]=""
operation_parameters_collection_type["getChallenges:::order"]=""
operation_parameters_collection_type["updateChallenge:::id"]=""
operation_parameters_collection_type["updateChallenge:::challenge_resource"]=""
operation_parameters_collection_type["updateChallengeActivity:::id"]=""
operation_parameters_collection_type["updateChallengeActivity:::challenge_id"]=""
operation_parameters_collection_type["updateChallengeActivity:::challenge_activity_resource"]=""
operation_parameters_collection_type["updateChallengeActivityTemplate:::id"]=""
operation_parameters_collection_type["updateChallengeActivityTemplate:::challengeActivity_template_resource"]=""
operation_parameters_collection_type["updateChallengeTemplate:::id"]=""
operation_parameters_collection_type["updateChallengeTemplate:::challenge_template_resource"]=""
operation_parameters_collection_type["createRewardSet:::reward_set_resource"]=""
operation_parameters_collection_type["deleteRewardSet:::id"]=""
operation_parameters_collection_type["getRewardSet:::id"]=""
operation_parameters_collection_type["getRewardSets:::size"]=""
operation_parameters_collection_type["getRewardSets:::page"]=""
operation_parameters_collection_type["getRewardSets:::order"]=""
operation_parameters_collection_type["updateRewardSet:::id"]=""
operation_parameters_collection_type["updateRewardSet:::reward_set_resource"]=""
operation_parameters_collection_type["createCategory:::category"]=""
operation_parameters_collection_type["createCategoryTemplate:::template"]=""
operation_parameters_collection_type["deleteCategory:::id"]=""
operation_parameters_collection_type["deleteCategoryTemplate:::id"]=""
operation_parameters_collection_type["deleteCategoryTemplate:::cascade"]=""
operation_parameters_collection_type["getCategories:::filter_search"]=""
operation_parameters_collection_type["getCategories:::filter_active"]=""
operation_parameters_collection_type["getCategories:::size"]=""
operation_parameters_collection_type["getCategories:::page"]=""
operation_parameters_collection_type["getCategories:::order"]=""
operation_parameters_collection_type["getCategory:::id"]=""
operation_parameters_collection_type["getCategoryTemplate:::id"]=""
operation_parameters_collection_type["getCategoryTemplates:::size"]=""
operation_parameters_collection_type["getCategoryTemplates:::page"]=""
operation_parameters_collection_type["getCategoryTemplates:::order"]=""
operation_parameters_collection_type["getTags:::size"]=""
operation_parameters_collection_type["getTags:::page"]=""
operation_parameters_collection_type["updateCategory:::id"]=""
operation_parameters_collection_type["updateCategory:::category"]=""
operation_parameters_collection_type["updateCategoryTemplate:::id"]=""
operation_parameters_collection_type["updateCategoryTemplate:::template"]=""
operation_parameters_collection_type["createConfig:::config"]=""
operation_parameters_collection_type["deleteConfig:::name"]=""
operation_parameters_collection_type["getConfig:::name"]=""
operation_parameters_collection_type["getConfigs:::filter_search"]=""
operation_parameters_collection_type["getConfigs:::size"]=""
operation_parameters_collection_type["getConfigs:::page"]=""
operation_parameters_collection_type["getConfigs:::order"]=""
operation_parameters_collection_type["updateConfig:::name"]=""
operation_parameters_collection_type["updateConfig:::config"]=""
operation_parameters_collection_type["createArticle:::article_resource"]=""
operation_parameters_collection_type["createArticleTemplate:::article_template_resource"]=""
operation_parameters_collection_type["deleteArticle:::id"]=""
operation_parameters_collection_type["deleteArticleTemplate:::id"]=""
operation_parameters_collection_type["deleteArticleTemplate:::cascade"]=""
operation_parameters_collection_type["getArticle:::id"]=""
operation_parameters_collection_type["getArticleTemplate:::id"]=""
operation_parameters_collection_type["getArticleTemplates:::size"]=""
operation_parameters_collection_type["getArticleTemplates:::page"]=""
operation_parameters_collection_type["getArticleTemplates:::order"]=""
operation_parameters_collection_type["getArticles:::filter_active_only"]=""
operation_parameters_collection_type["getArticles:::filter_category"]=""
operation_parameters_collection_type["getArticles:::filter_tagset"]=""
operation_parameters_collection_type["getArticles:::filter_tag_intersection"]=""
operation_parameters_collection_type["getArticles:::filter_tag_exclusion"]=""
operation_parameters_collection_type["getArticles:::filter_title"]=""
operation_parameters_collection_type["getArticles:::size"]=""
operation_parameters_collection_type["getArticles:::page"]=""
operation_parameters_collection_type["getArticles:::order"]=""
operation_parameters_collection_type["updateArticle:::id"]=""
operation_parameters_collection_type["updateArticle:::article_resource"]=""
operation_parameters_collection_type["updateArticleTemplate:::id"]=""
operation_parameters_collection_type["updateArticleTemplate:::article_template_resource"]=""
operation_parameters_collection_type["addComment:::comment_resource"]=""
operation_parameters_collection_type["deleteComment:::id"]=""
operation_parameters_collection_type["getComment:::id"]=""
operation_parameters_collection_type["getComments:::context"]=""
operation_parameters_collection_type["getComments:::context_id"]=""
operation_parameters_collection_type["getComments:::size"]=""
operation_parameters_collection_type["getComments:::page"]=""
operation_parameters_collection_type["searchComments:::query"]=""
operation_parameters_collection_type["searchComments:::size"]=""
operation_parameters_collection_type["searchComments:::page"]=""
operation_parameters_collection_type["updateComment:::id"]=""
operation_parameters_collection_type["updateComment:::content"]=""
operation_parameters_collection_type["answerPoll:::id"]=""
operation_parameters_collection_type["answerPoll:::answer_key"]=""
operation_parameters_collection_type["createPoll:::poll_resource"]=""
operation_parameters_collection_type["createPollTemplate:::poll_template_resource"]=""
operation_parameters_collection_type["deletePoll:::id"]=""
operation_parameters_collection_type["deletePollTemplate:::id"]=""
operation_parameters_collection_type["deletePollTemplate:::cascade"]=""
operation_parameters_collection_type["getPoll:::id"]=""
operation_parameters_collection_type["getPollAnswer:::id"]=""
operation_parameters_collection_type["getPollTemplate:::id"]=""
operation_parameters_collection_type["getPollTemplates:::size"]=""
operation_parameters_collection_type["getPollTemplates:::page"]=""
operation_parameters_collection_type["getPollTemplates:::order"]=""
operation_parameters_collection_type["getPolls:::filter_category"]=""
operation_parameters_collection_type["getPolls:::filter_tagset"]=""
operation_parameters_collection_type["getPolls:::filter_text"]=""
operation_parameters_collection_type["getPolls:::size"]=""
operation_parameters_collection_type["getPolls:::page"]=""
operation_parameters_collection_type["getPolls:::order"]=""
operation_parameters_collection_type["updatePoll:::id"]=""
operation_parameters_collection_type["updatePoll:::poll_resource"]=""
operation_parameters_collection_type["updatePollTemplate:::id"]=""
operation_parameters_collection_type["updatePollTemplate:::poll_template_resource"]=""
operation_parameters_collection_type["createCurrency:::currency"]=""
operation_parameters_collection_type["deleteCurrency:::code"]=""
operation_parameters_collection_type["getCurrencies:::filter_enabled_currencies"]=""
operation_parameters_collection_type["getCurrencies:::filter_type"]=""
operation_parameters_collection_type["getCurrencies:::size"]=""
operation_parameters_collection_type["getCurrencies:::page"]=""
operation_parameters_collection_type["getCurrencies:::order"]=""
operation_parameters_collection_type["getCurrency:::code"]=""
operation_parameters_collection_type["updateCurrency:::code"]=""
operation_parameters_collection_type["updateCurrency:::currency"]=""
operation_parameters_collection_type["addDeviceUsers:::userResources"]=
operation_parameters_collection_type["addDeviceUsers:::id"]=""
operation_parameters_collection_type["createDevice:::device"]=""
operation_parameters_collection_type["deleteDevice:::id"]=""
operation_parameters_collection_type["deleteDeviceUser:::id"]=""
operation_parameters_collection_type["deleteDeviceUser:::user_id"]=""
operation_parameters_collection_type["deleteDeviceUsers:::id"]=""
operation_parameters_collection_type["deleteDeviceUsers:::filter_id"]=""
operation_parameters_collection_type["getDevice:::id"]=""
operation_parameters_collection_type["getDevices:::filter_make"]=""
operation_parameters_collection_type["getDevices:::filter_model"]=""
operation_parameters_collection_type["getDevices:::size"]=""
operation_parameters_collection_type["getDevices:::page"]=""
operation_parameters_collection_type["getDevices:::order"]=""
operation_parameters_collection_type["updateDevice:::device"]=""
operation_parameters_collection_type["updateDevice:::id"]=""
operation_parameters_collection_type["addDisposition:::disposition"]=""
operation_parameters_collection_type["deleteDisposition:::id"]=""
operation_parameters_collection_type["getDisposition:::id"]=""
operation_parameters_collection_type["getDispositionCounts:::filter_context"]=""
operation_parameters_collection_type["getDispositionCounts:::filter_owner"]=""
operation_parameters_collection_type["getDispositions:::filter_context"]=""
operation_parameters_collection_type["getDispositions:::filter_owner"]=""
operation_parameters_collection_type["getDispositions:::size"]=""
operation_parameters_collection_type["getDispositions:::page"]=""
operation_parameters_collection_type["getDispositions:::order"]=""
operation_parameters_collection_type["createFulfillmentType:::type"]=""
operation_parameters_collection_type["deleteFulfillmentType:::id"]=""
operation_parameters_collection_type["getFulfillmentType:::id"]=""
operation_parameters_collection_type["getFulfillmentTypes:::size"]=""
operation_parameters_collection_type["getFulfillmentTypes:::page"]=""
operation_parameters_collection_type["getFulfillmentTypes:::order"]=""
operation_parameters_collection_type["updateFulfillmentType:::id"]=""
operation_parameters_collection_type["updateFulfillmentType:::fulfillmentType"]=""
operation_parameters_collection_type["createAchievement:::achievement"]=""
operation_parameters_collection_type["createAchievementTemplate:::template"]=""
operation_parameters_collection_type["deleteAchievement:::name"]=""
operation_parameters_collection_type["deleteAchievementTemplate:::id"]=""
operation_parameters_collection_type["deleteAchievementTemplate:::cascade"]=""
operation_parameters_collection_type["getAchievement:::name"]=""
operation_parameters_collection_type["getAchievementTemplate:::id"]=""
operation_parameters_collection_type["getAchievementTemplates:::size"]=""
operation_parameters_collection_type["getAchievementTemplates:::page"]=""
operation_parameters_collection_type["getAchievementTemplates:::order"]=""
operation_parameters_collection_type["getAchievements:::filter_tagset"]=""
operation_parameters_collection_type["getAchievements:::filter_name"]=""
operation_parameters_collection_type["getAchievements:::filter_hidden"]=""
operation_parameters_collection_type["getAchievements:::size"]=""
operation_parameters_collection_type["getAchievements:::page"]=""
operation_parameters_collection_type["getAchievements:::order"]=""
operation_parameters_collection_type["getAchievements:::filter_derived"]=""
operation_parameters_collection_type["getDerivedAchievements:::name"]=""
operation_parameters_collection_type["getUserAchievementProgress:::user_id"]=""
operation_parameters_collection_type["getUserAchievementProgress:::achievement_name"]=""
operation_parameters_collection_type["getUserAchievementsProgress:::user_id"]=""
operation_parameters_collection_type["getUserAchievementsProgress:::filter_achievement_derived"]=""
operation_parameters_collection_type["getUserAchievementsProgress:::filter_achievement_tagset"]=""
operation_parameters_collection_type["getUserAchievementsProgress:::filter_achievement_name"]=""
operation_parameters_collection_type["getUserAchievementsProgress:::size"]=""
operation_parameters_collection_type["getUserAchievementsProgress:::page"]=""
operation_parameters_collection_type["getUsersAchievementProgress:::achievement_name"]=""
operation_parameters_collection_type["getUsersAchievementProgress:::filter_achievement_derived"]=""
operation_parameters_collection_type["getUsersAchievementProgress:::filter_achievement_tagset"]=""
operation_parameters_collection_type["getUsersAchievementProgress:::filter_achievement_name"]=""
operation_parameters_collection_type["getUsersAchievementProgress:::size"]=""
operation_parameters_collection_type["getUsersAchievementProgress:::page"]=""
operation_parameters_collection_type["getUsersAchievementsProgress:::filter_achievement_derived"]=""
operation_parameters_collection_type["getUsersAchievementsProgress:::filter_achievement_tagset"]=""
operation_parameters_collection_type["getUsersAchievementsProgress:::filter_achievement_name"]=""
operation_parameters_collection_type["getUsersAchievementsProgress:::size"]=""
operation_parameters_collection_type["getUsersAchievementsProgress:::page"]=""
operation_parameters_collection_type["incrementAchievementProgress:::user_id"]=""
operation_parameters_collection_type["incrementAchievementProgress:::achievement_name"]=""
operation_parameters_collection_type["incrementAchievementProgress:::progress"]=""
operation_parameters_collection_type["setAchievementProgress:::user_id"]=""
operation_parameters_collection_type["setAchievementProgress:::achievement_name"]=""
operation_parameters_collection_type["setAchievementProgress:::progress"]=""
operation_parameters_collection_type["updateAchievement:::name"]=""
operation_parameters_collection_type["updateAchievement:::achievement"]=""
operation_parameters_collection_type["updateAchievementTemplate:::id"]=""
operation_parameters_collection_type["updateAchievementTemplate:::template"]=""
operation_parameters_collection_type["getLeaderboard:::context_type"]=""
operation_parameters_collection_type["getLeaderboard:::context_id"]=""
operation_parameters_collection_type["getLeaderboard:::size"]=""
operation_parameters_collection_type["getLeaderboard:::page"]=""
operation_parameters_collection_type["getLeaderboard:::order"]=""
operation_parameters_collection_type["getLeaderboardRank:::context_type"]=""
operation_parameters_collection_type["getLeaderboardRank:::context_id"]=""
operation_parameters_collection_type["getLeaderboardRank:::id"]=""
operation_parameters_collection_type["createLevel:::level"]=""
operation_parameters_collection_type["deleteLevel:::name"]=""
operation_parameters_collection_type["getLevel:::name"]=""
operation_parameters_collection_type["getLevels:::filter_name"]=""
operation_parameters_collection_type["getLevels:::size"]=""
operation_parameters_collection_type["getLevels:::page"]=""
operation_parameters_collection_type["getLevels:::order"]=""
operation_parameters_collection_type["getUserLevel:::user_id"]=""
operation_parameters_collection_type["getUserLevel:::name"]=""
operation_parameters_collection_type["getUserLevels:::user_id"]=""
operation_parameters_collection_type["getUserLevels:::filter_name"]=""
operation_parameters_collection_type["getUserLevels:::size"]=""
operation_parameters_collection_type["getUserLevels:::page"]=""
operation_parameters_collection_type["getUserLevels:::order"]=""
operation_parameters_collection_type["incrementProgress:::user_id"]=""
operation_parameters_collection_type["incrementProgress:::name"]=""
operation_parameters_collection_type["incrementProgress:::progress"]=""
operation_parameters_collection_type["setProgress:::user_id"]=""
operation_parameters_collection_type["setProgress:::name"]=""
operation_parameters_collection_type["setProgress:::progress"]=""
operation_parameters_collection_type["updateLevel:::name"]=""
operation_parameters_collection_type["updateLevel:::newLevel"]=""
operation_parameters_collection_type["addMetric:::metric"]=""
operation_parameters_collection_type["addQuestionAnswers:::question_id"]=""
operation_parameters_collection_type["addQuestionAnswers:::answer"]=""
operation_parameters_collection_type["addQuestionTag:::id"]=""
operation_parameters_collection_type["addQuestionTag:::tag"]=""
operation_parameters_collection_type["addTagToQuestionsBatch:::tag"]=""
operation_parameters_collection_type["addTagToQuestionsBatch:::filter_search"]=""
operation_parameters_collection_type["addTagToQuestionsBatch:::filter_idset"]=""
operation_parameters_collection_type["addTagToQuestionsBatch:::filter_category"]=""
operation_parameters_collection_type["addTagToQuestionsBatch:::filter_tag"]=""
operation_parameters_collection_type["addTagToQuestionsBatch:::filter_tagset"]=""
operation_parameters_collection_type["addTagToQuestionsBatch:::filter_type"]=""
operation_parameters_collection_type["addTagToQuestionsBatch:::filter_published"]=""
operation_parameters_collection_type["addTagToQuestionsBatch:::filter_import_id"]=""
operation_parameters_collection_type["createImportJob:::request"]=""
operation_parameters_collection_type["createQuestion:::question"]=""
operation_parameters_collection_type["createQuestionTemplate:::question_template_resource"]=""
operation_parameters_collection_type["deleteImportJob:::id"]=""
operation_parameters_collection_type["deleteQuestion:::id"]=""
operation_parameters_collection_type["deleteQuestionAnswers:::question_id"]=""
operation_parameters_collection_type["deleteQuestionAnswers:::id"]=""
operation_parameters_collection_type["deleteQuestionTemplate:::id"]=""
operation_parameters_collection_type["deleteQuestionTemplate:::cascade"]=""
operation_parameters_collection_type["getImportJob:::id"]=""
operation_parameters_collection_type["getImportJobs:::filter_vendor"]=""
operation_parameters_collection_type["getImportJobs:::filter_category"]=""
operation_parameters_collection_type["getImportJobs:::filter_name"]=""
operation_parameters_collection_type["getImportJobs:::filter_status"]=""
operation_parameters_collection_type["getImportJobs:::size"]=""
operation_parameters_collection_type["getImportJobs:::page"]=""
operation_parameters_collection_type["getImportJobs:::order"]=""
operation_parameters_collection_type["getQuestion:::id"]=""
operation_parameters_collection_type["getQuestionAnswer:::question_id"]=""
operation_parameters_collection_type["getQuestionAnswer:::id"]=""
operation_parameters_collection_type["getQuestionAnswers:::question_id"]=""
operation_parameters_collection_type["getQuestionDeltas:::since"]=""
operation_parameters_collection_type["getQuestionTags:::id"]=""
operation_parameters_collection_type["getQuestionTemplate:::id"]=""
operation_parameters_collection_type["getQuestionTemplates:::size"]=""
operation_parameters_collection_type["getQuestionTemplates:::page"]=""
operation_parameters_collection_type["getQuestionTemplates:::order"]=""
operation_parameters_collection_type["getQuestions:::size"]=""
operation_parameters_collection_type["getQuestions:::page"]=""
operation_parameters_collection_type["getQuestions:::order"]=""
operation_parameters_collection_type["getQuestions:::filter_search"]=""
operation_parameters_collection_type["getQuestions:::filter_idset"]=""
operation_parameters_collection_type["getQuestions:::filter_category"]=""
operation_parameters_collection_type["getQuestions:::filter_tagset"]=""
operation_parameters_collection_type["getQuestions:::filter_tag"]=""
operation_parameters_collection_type["getQuestions:::filter_type"]=""
operation_parameters_collection_type["getQuestions:::filter_published"]=""
operation_parameters_collection_type["getQuestions:::filter_import_id"]=""
operation_parameters_collection_type["getQuestionsCount:::filter_search"]=""
operation_parameters_collection_type["getQuestionsCount:::filter_idset"]=""
operation_parameters_collection_type["getQuestionsCount:::filter_category"]=""
operation_parameters_collection_type["getQuestionsCount:::filter_tag"]=""
operation_parameters_collection_type["getQuestionsCount:::filter_tagset"]=""
operation_parameters_collection_type["getQuestionsCount:::filter_type"]=""
operation_parameters_collection_type["getQuestionsCount:::filter_published"]=""
operation_parameters_collection_type["processImportJob:::id"]=""
operation_parameters_collection_type["processImportJob:::publish_now"]=""
operation_parameters_collection_type["removeQuestionTag:::id"]=""
operation_parameters_collection_type["removeQuestionTag:::tag"]=""
operation_parameters_collection_type["removeTagToQuestionsBatch:::tag"]=""
operation_parameters_collection_type["removeTagToQuestionsBatch:::filter_search"]=""
operation_parameters_collection_type["removeTagToQuestionsBatch:::filter_idset"]=""
operation_parameters_collection_type["removeTagToQuestionsBatch:::filter_category"]=""
operation_parameters_collection_type["removeTagToQuestionsBatch:::filter_tag"]=""
operation_parameters_collection_type["removeTagToQuestionsBatch:::filter_tagset"]=""
operation_parameters_collection_type["removeTagToQuestionsBatch:::filter_type"]=""
operation_parameters_collection_type["removeTagToQuestionsBatch:::filter_published"]=""
operation_parameters_collection_type["removeTagToQuestionsBatch:::filter_import_id"]=""
operation_parameters_collection_type["searchQuestionTags:::filter_search"]=""
operation_parameters_collection_type["searchQuestionTags:::filter_category"]=""
operation_parameters_collection_type["searchQuestionTags:::filter_import_id"]=""
operation_parameters_collection_type["updateImportJob:::id"]=""
operation_parameters_collection_type["updateImportJob:::request"]=""
operation_parameters_collection_type["updateQuestion:::id"]=""
operation_parameters_collection_type["updateQuestion:::question"]=""
operation_parameters_collection_type["updateQuestionAnswer:::question_id"]=""
operation_parameters_collection_type["updateQuestionAnswer:::id"]=""
operation_parameters_collection_type["updateQuestionAnswer:::answer"]=""
operation_parameters_collection_type["updateQuestionTemplate:::id"]=""
operation_parameters_collection_type["updateQuestionTemplate:::question_template_resource"]=""
operation_parameters_collection_type["updateQuestionsInBulk:::question"]=""
operation_parameters_collection_type["updateQuestionsInBulk:::filter_search"]=""
operation_parameters_collection_type["updateQuestionsInBulk:::filter_idset"]=""
operation_parameters_collection_type["updateQuestionsInBulk:::filter_category"]=""
operation_parameters_collection_type["updateQuestionsInBulk:::filter_tagset"]=""
operation_parameters_collection_type["updateQuestionsInBulk:::filter_type"]=""
operation_parameters_collection_type["updateQuestionsInBulk:::filter_published"]=""
operation_parameters_collection_type["updateQuestionsInBulk:::filter_import_id"]=""
operation_parameters_collection_type["createInvoice:::req"]=""
operation_parameters_collection_type["getInvoice:::id"]=""
operation_parameters_collection_type["getInvoiceLogs:::id"]=""
operation_parameters_collection_type["getInvoiceLogs:::size"]=""
operation_parameters_collection_type["getInvoiceLogs:::page"]=""
operation_parameters_collection_type["getInvoices:::filter_user"]=""
operation_parameters_collection_type["getInvoices:::filter_email"]=""
operation_parameters_collection_type["getInvoices:::filter_fulfillment_status"]=""
operation_parameters_collection_type["getInvoices:::filter_payment_status"]=""
operation_parameters_collection_type["getInvoices:::filter_item_name"]=""
operation_parameters_collection_type["getInvoices:::filter_external_ref"]=""
operation_parameters_collection_type["getInvoices:::filter_created_date"]=""
operation_parameters_collection_type["getInvoices:::filter_vendor_ids"]=""
operation_parameters_collection_type["getInvoices:::filter_currency"]=""
operation_parameters_collection_type["getInvoices:::filter_shipping_state_name"]=""
operation_parameters_collection_type["getInvoices:::filter_shipping_country_name"]=""
operation_parameters_collection_type["getInvoices:::filter_shipping"]=""
operation_parameters_collection_type["getInvoices:::filter_vendor_name"]=""
operation_parameters_collection_type["getInvoices:::filter_sku"]=""
operation_parameters_collection_type["getInvoices:::size"]=""
operation_parameters_collection_type["getInvoices:::page"]=""
operation_parameters_collection_type["getInvoices:::order"]=""
operation_parameters_collection_type["payInvoice:::id"]=""
operation_parameters_collection_type["payInvoice:::request"]=""
operation_parameters_collection_type["setBundledInvoiceItemFulfillmentStatus:::id"]=""
operation_parameters_collection_type["setBundledInvoiceItemFulfillmentStatus:::bundleSku"]=""
operation_parameters_collection_type["setBundledInvoiceItemFulfillmentStatus:::sku"]=""
operation_parameters_collection_type["setBundledInvoiceItemFulfillmentStatus:::status"]=""
operation_parameters_collection_type["setExternalRef:::id"]=""
operation_parameters_collection_type["setExternalRef:::externalRef"]=""
operation_parameters_collection_type["setInvoiceItemFulfillmentStatus:::id"]=""
operation_parameters_collection_type["setInvoiceItemFulfillmentStatus:::sku"]=""
operation_parameters_collection_type["setInvoiceItemFulfillmentStatus:::status"]=""
operation_parameters_collection_type["setOrderNotes:::id"]=""
operation_parameters_collection_type["setOrderNotes:::orderNotes"]=""
operation_parameters_collection_type["setPaymentStatus:::id"]=""
operation_parameters_collection_type["setPaymentStatus:::request"]=""
operation_parameters_collection_type["updateBillingInfo:::id"]=""
operation_parameters_collection_type["updateBillingInfo:::billingInfoRequest"]=""
operation_parameters_collection_type["getCountryStates:::country_code_iso3"]=""
operation_parameters_collection_type["addUserLog:::log_entry"]=""
operation_parameters_collection_type["getBREEventLog:::id"]=""
operation_parameters_collection_type["getBREEventLogs:::filter_start_date"]=""
operation_parameters_collection_type["getBREEventLogs:::filter_event_name"]=""
operation_parameters_collection_type["getBREEventLogs:::filter_event_id"]=""
operation_parameters_collection_type["getBREEventLogs:::size"]=""
operation_parameters_collection_type["getBREEventLogs:::page"]=""
operation_parameters_collection_type["getBREEventLogs:::order"]=""
operation_parameters_collection_type["getBREForwardLog:::id"]=""
operation_parameters_collection_type["getBREForwardLogs:::filter_start_date"]=""
operation_parameters_collection_type["getBREForwardLogs:::filter_end_date"]=""
operation_parameters_collection_type["getBREForwardLogs:::filter_status_code"]=""
operation_parameters_collection_type["getBREForwardLogs:::size"]=""
operation_parameters_collection_type["getBREForwardLogs:::page"]=""
operation_parameters_collection_type["getBREForwardLogs:::order"]=""
operation_parameters_collection_type["getUserLog:::id"]=""
operation_parameters_collection_type["getUserLogs:::filter_user"]=""
operation_parameters_collection_type["getUserLogs:::filter_action_name"]=""
operation_parameters_collection_type["getUserLogs:::size"]=""
operation_parameters_collection_type["getUserLogs:::page"]=""
operation_parameters_collection_type["getUserLogs:::order"]=""
operation_parameters_collection_type["addArtist:::artist_resource"]=""
operation_parameters_collection_type["createArtistTemplate:::artist_template_resource"]=""
operation_parameters_collection_type["deleteArtist:::id"]=""
operation_parameters_collection_type["deleteArtistTemplate:::id"]=""
operation_parameters_collection_type["deleteArtistTemplate:::cascade"]=""
operation_parameters_collection_type["getArtist:::id"]=""
operation_parameters_collection_type["getArtist:::show_contributions"]=""
operation_parameters_collection_type["getArtistTemplate:::id"]=""
operation_parameters_collection_type["getArtistTemplates:::size"]=""
operation_parameters_collection_type["getArtistTemplates:::page"]=""
operation_parameters_collection_type["getArtistTemplates:::order"]=""
operation_parameters_collection_type["getArtists:::filter_artists_by_name"]=""
operation_parameters_collection_type["getArtists:::size"]=""
operation_parameters_collection_type["getArtists:::page"]=""
operation_parameters_collection_type["getArtists:::order"]=""
operation_parameters_collection_type["updateArtist:::id"]=""
operation_parameters_collection_type["updateArtist:::artist_resource"]=""
operation_parameters_collection_type["updateArtistTemplate:::id"]=""
operation_parameters_collection_type["updateArtistTemplate:::artist_template_resource"]=""
operation_parameters_collection_type["getModerationReport:::id"]=""
operation_parameters_collection_type["getModerationReports:::exclude_resolved"]=""
operation_parameters_collection_type["getModerationReports:::filter_context"]=""
operation_parameters_collection_type["getModerationReports:::size"]=""
operation_parameters_collection_type["getModerationReports:::page"]=""
operation_parameters_collection_type["updateModerationReport:::id"]=""
operation_parameters_collection_type["updateModerationReport:::flag_report_resource"]=""
operation_parameters_collection_type["addUserToVideoWhitelist:::id"]=""
operation_parameters_collection_type["addUserToVideoWhitelist:::user_id"]=""
operation_parameters_collection_type["addVideo:::video_resource"]=""
operation_parameters_collection_type["addVideoComment:::video_id"]=""
operation_parameters_collection_type["addVideoComment:::comment_resource"]=""
operation_parameters_collection_type["addVideoContributor:::video_id"]=""
operation_parameters_collection_type["addVideoContributor:::contribution_resource"]=""
operation_parameters_collection_type["addVideoFlag:::video_id"]=""
operation_parameters_collection_type["addVideoFlag:::reason"]=""
operation_parameters_collection_type["addVideoRelationships:::video_id"]=""
operation_parameters_collection_type["addVideoRelationships:::video_relationship_resource"]=""
operation_parameters_collection_type["createVideoDisposition:::video_id"]=""
operation_parameters_collection_type["createVideoDisposition:::disposition_resource"]=""
operation_parameters_collection_type["deleteVideo:::id"]=""
operation_parameters_collection_type["deleteVideoComment:::video_id"]=""
operation_parameters_collection_type["deleteVideoComment:::id"]=""
operation_parameters_collection_type["deleteVideoDisposition:::disposition_id"]=""
operation_parameters_collection_type["deleteVideoFlag:::video_id"]=""
operation_parameters_collection_type["deleteVideoRelationship:::video_id"]=""
operation_parameters_collection_type["deleteVideoRelationship:::id"]=""
operation_parameters_collection_type["getUserVideos:::user_id"]=""
operation_parameters_collection_type["getUserVideos:::exclude_flagged"]=""
operation_parameters_collection_type["getUserVideos:::size"]=""
operation_parameters_collection_type["getUserVideos:::page"]=""
operation_parameters_collection_type["getVideo:::id"]=""
operation_parameters_collection_type["getVideoComments:::video_id"]=""
operation_parameters_collection_type["getVideoComments:::size"]=""
operation_parameters_collection_type["getVideoComments:::page"]=""
operation_parameters_collection_type["getVideoDispositions:::video_id"]=""
operation_parameters_collection_type["getVideoDispositions:::size"]=""
operation_parameters_collection_type["getVideoDispositions:::page"]=""
operation_parameters_collection_type["getVideoRelationships:::video_id"]=""
operation_parameters_collection_type["getVideoRelationships:::size"]=""
operation_parameters_collection_type["getVideoRelationships:::page"]=""
operation_parameters_collection_type["getVideos:::exclude_flagged"]=""
operation_parameters_collection_type["getVideos:::filter_videos_by_uploader"]=""
operation_parameters_collection_type["getVideos:::filter_category"]=""
operation_parameters_collection_type["getVideos:::filter_tagset"]=""
operation_parameters_collection_type["getVideos:::filter_videos_by_name"]=""
operation_parameters_collection_type["getVideos:::filter_videos_by_contributor"]=""
operation_parameters_collection_type["getVideos:::filter_videos_by_author"]=""
operation_parameters_collection_type["getVideos:::filter_has_author"]=""
operation_parameters_collection_type["getVideos:::filter_has_uploader"]=""
operation_parameters_collection_type["getVideos:::filter_related_to"]=""
operation_parameters_collection_type["getVideos:::filter_friends"]=""
operation_parameters_collection_type["getVideos:::filter_disposition"]=""
operation_parameters_collection_type["getVideos:::size"]=""
operation_parameters_collection_type["getVideos:::page"]=""
operation_parameters_collection_type["getVideos:::order"]=""
operation_parameters_collection_type["removeUserFromVideoWhitelist:::video_id"]=""
operation_parameters_collection_type["removeUserFromVideoWhitelist:::id"]=""
operation_parameters_collection_type["removeVideoContributor:::video_id"]=""
operation_parameters_collection_type["removeVideoContributor:::id"]=""
operation_parameters_collection_type["updateVideo:::id"]=""
operation_parameters_collection_type["updateVideo:::video_resource"]=""
operation_parameters_collection_type["updateVideoComment:::video_id"]=""
operation_parameters_collection_type["updateVideoComment:::id"]=""
operation_parameters_collection_type["updateVideoComment:::content"]=""
operation_parameters_collection_type["updateVideoRelationship:::video_id"]=""
operation_parameters_collection_type["updateVideoRelationship:::relationship_id"]=""
operation_parameters_collection_type["updateVideoRelationship:::details"]=""
operation_parameters_collection_type["viewVideo:::id"]=""
operation_parameters_collection_type["sendRawEmail:::raw_email_resource"]=""
operation_parameters_collection_type["sendRawSMS:::raw_SMS_resource"]=""
operation_parameters_collection_type["sendTemplatedEmail:::message_resource"]=""
operation_parameters_collection_type["sendTemplatedSMS:::template_SMS_resource"]=""
operation_parameters_collection_type["createPaymentMethod:::user_id"]=""
operation_parameters_collection_type["createPaymentMethod:::payment_method"]=""
operation_parameters_collection_type["deletePaymentMethod:::user_id"]=""
operation_parameters_collection_type["deletePaymentMethod:::id"]=""
operation_parameters_collection_type["getPaymentMethod:::user_id"]=""
operation_parameters_collection_type["getPaymentMethod:::id"]=""
operation_parameters_collection_type["getPaymentMethods:::user_id"]=""
operation_parameters_collection_type["getPaymentMethods:::filter_name"]=""
operation_parameters_collection_type["getPaymentMethods:::filter_payment_type"]=""
operation_parameters_collection_type["getPaymentMethods:::filter_payment_method_type_id"]=""
operation_parameters_collection_type["getPaymentMethods:::filter_payment_method_type_name"]=""
operation_parameters_collection_type["getPaymentMethods:::size"]=""
operation_parameters_collection_type["getPaymentMethods:::page"]=""
operation_parameters_collection_type["getPaymentMethods:::order"]=""
operation_parameters_collection_type["paymentAuthorization:::request"]=""
operation_parameters_collection_type["paymentCapture:::id"]=""
operation_parameters_collection_type["updatePaymentMethod:::user_id"]=""
operation_parameters_collection_type["updatePaymentMethod:::id"]=""
operation_parameters_collection_type["updatePaymentMethod:::payment_method"]=""
operation_parameters_collection_type["verifyAppleReceipt:::request"]=""
operation_parameters_collection_type["createOrUpdateFattMerchantPaymentMethod:::request"]=""
operation_parameters_collection_type["handleGooglePayment:::request"]=""
operation_parameters_collection_type["silentPostOptimal:::request"]=""
operation_parameters_collection_type["createPayPalBillingAgreementUrl:::request"]=""
operation_parameters_collection_type["createPayPalExpressCheckout:::request"]=""
operation_parameters_collection_type["finalizePayPalBillingAgreement:::request"]=""
operation_parameters_collection_type["finalizePayPalCheckout:::request"]=""
operation_parameters_collection_type["createStripePaymentMethod:::request"]=""
operation_parameters_collection_type["payStripeInvoice:::request"]=""
operation_parameters_collection_type["getTransaction:::id"]=""
operation_parameters_collection_type["getTransactions:::filter_invoice"]=""
operation_parameters_collection_type["getTransactions:::size"]=""
operation_parameters_collection_type["getTransactions:::page"]=""
operation_parameters_collection_type["getTransactions:::order"]=""
operation_parameters_collection_type["refundTransaction:::id"]=""
operation_parameters_collection_type["refundTransaction:::request"]=""
operation_parameters_collection_type["getUserWallet:::user_id"]=""
operation_parameters_collection_type["getUserWallet:::currency_code"]=""
operation_parameters_collection_type["getUserWalletTransactions:::user_id"]=""
operation_parameters_collection_type["getUserWalletTransactions:::currency_code"]=""
operation_parameters_collection_type["getUserWalletTransactions:::filter_type"]=""
operation_parameters_collection_type["getUserWalletTransactions:::filter_max_date"]=""
operation_parameters_collection_type["getUserWalletTransactions:::filter_min_date"]=""
operation_parameters_collection_type["getUserWalletTransactions:::filter_sign"]=""
operation_parameters_collection_type["getUserWalletTransactions:::size"]=""
operation_parameters_collection_type["getUserWalletTransactions:::page"]=""
operation_parameters_collection_type["getUserWalletTransactions:::order"]=""
operation_parameters_collection_type["getUserWallets:::user_id"]=""
operation_parameters_collection_type["getWalletTransactions:::filter_invoice"]=""
operation_parameters_collection_type["getWalletTransactions:::filter_type"]=""
operation_parameters_collection_type["getWalletTransactions:::filter_date"]=""
operation_parameters_collection_type["getWalletTransactions:::filter_sign"]=""
operation_parameters_collection_type["getWalletTransactions:::filter_user_id"]=""
operation_parameters_collection_type["getWalletTransactions:::filter_username"]=""
operation_parameters_collection_type["getWalletTransactions:::filter_details"]=""
operation_parameters_collection_type["getWalletTransactions:::filter_currency_code"]=""
operation_parameters_collection_type["getWalletTransactions:::size"]=""
operation_parameters_collection_type["getWalletTransactions:::page"]=""
operation_parameters_collection_type["getWalletTransactions:::order"]=""
operation_parameters_collection_type["getWallets:::size"]=""
operation_parameters_collection_type["getWallets:::page"]=""
operation_parameters_collection_type["getWallets:::order"]=""
operation_parameters_collection_type["updateWalletBalance:::user_id"]=""
operation_parameters_collection_type["updateWalletBalance:::currency_code"]=""
operation_parameters_collection_type["updateWalletBalance:::request"]=""
operation_parameters_collection_type["createXsollaTokenUrl:::request"]=""
operation_parameters_collection_type["getChallengeEventLeaderboard:::filter_event"]=""
operation_parameters_collection_type["getChallengeEventLeaderboard:::size"]=""
operation_parameters_collection_type["getChallengeEventLeaderboard:::page"]=""
operation_parameters_collection_type["getChallengeEventLeaderboard:::order"]=""
operation_parameters_collection_type["getChallengeEventParticipants:::filter_event"]=""
operation_parameters_collection_type["getChallengeEventParticipants:::size"]=""
operation_parameters_collection_type["getChallengeEventParticipants:::page"]=""
operation_parameters_collection_type["getChallengeEventParticipants:::order"]=""
operation_parameters_collection_type["getInvoiceReports:::currency_code"]=""
operation_parameters_collection_type["getInvoiceReports:::granularity"]=""
operation_parameters_collection_type["getInvoiceReports:::filter_payment_status"]=""
operation_parameters_collection_type["getInvoiceReports:::filter_fulfillment_status"]=""
operation_parameters_collection_type["getInvoiceReports:::start_date"]=""
operation_parameters_collection_type["getInvoiceReports:::end_date"]=""
operation_parameters_collection_type["getInvoiceReports:::size"]=""
operation_parameters_collection_type["getInvoiceReports:::page"]=""
operation_parameters_collection_type["getItemRevenue:::currency_code"]=""
operation_parameters_collection_type["getItemRevenue:::start_date"]=""
operation_parameters_collection_type["getItemRevenue:::end_date"]=""
operation_parameters_collection_type["getRefundRevenue:::currency_code"]=""
operation_parameters_collection_type["getRefundRevenue:::start_date"]=""
operation_parameters_collection_type["getRefundRevenue:::end_date"]=""
operation_parameters_collection_type["getRevenueByCountry:::currency_code"]=""
operation_parameters_collection_type["getRevenueByCountry:::start_date"]=""
operation_parameters_collection_type["getRevenueByCountry:::end_date"]=""
operation_parameters_collection_type["getRevenueByCountry:::size"]=""
operation_parameters_collection_type["getRevenueByCountry:::page"]=""
operation_parameters_collection_type["getRevenueByItem:::currency_code"]=""
operation_parameters_collection_type["getRevenueByItem:::start_date"]=""
operation_parameters_collection_type["getRevenueByItem:::end_date"]=""
operation_parameters_collection_type["getRevenueByItem:::size"]=""
operation_parameters_collection_type["getRevenueByItem:::page"]=""
operation_parameters_collection_type["getSubscriptionRevenue:::currency_code"]=""
operation_parameters_collection_type["getSubscriptionRevenue:::start_date"]=""
operation_parameters_collection_type["getSubscriptionRevenue:::end_date"]=""
operation_parameters_collection_type["getSubscriptionReports:::size"]=""
operation_parameters_collection_type["getSubscriptionReports:::page"]=""
operation_parameters_collection_type["getUsageByDay:::start_date"]=""
operation_parameters_collection_type["getUsageByDay:::end_date"]=""
operation_parameters_collection_type["getUsageByDay:::combine_endpoints"]=""
operation_parameters_collection_type["getUsageByDay:::method"]=""
operation_parameters_collection_type["getUsageByDay:::url"]=""
operation_parameters_collection_type["getUsageByDay:::size"]=""
operation_parameters_collection_type["getUsageByDay:::page"]=""
operation_parameters_collection_type["getUsageByHour:::start_date"]=""
operation_parameters_collection_type["getUsageByHour:::end_date"]=""
operation_parameters_collection_type["getUsageByHour:::combine_endpoints"]=""
operation_parameters_collection_type["getUsageByHour:::method"]=""
operation_parameters_collection_type["getUsageByHour:::url"]=""
operation_parameters_collection_type["getUsageByHour:::size"]=""
operation_parameters_collection_type["getUsageByHour:::page"]=""
operation_parameters_collection_type["getUsageByMinute:::start_date"]=""
operation_parameters_collection_type["getUsageByMinute:::end_date"]=""
operation_parameters_collection_type["getUsageByMinute:::combine_endpoints"]=""
operation_parameters_collection_type["getUsageByMinute:::method"]=""
operation_parameters_collection_type["getUsageByMinute:::url"]=""
operation_parameters_collection_type["getUsageByMinute:::size"]=""
operation_parameters_collection_type["getUsageByMinute:::page"]=""
operation_parameters_collection_type["getUsageByMonth:::start_date"]=""
operation_parameters_collection_type["getUsageByMonth:::end_date"]=""
operation_parameters_collection_type["getUsageByMonth:::combine_endpoints"]=""
operation_parameters_collection_type["getUsageByMonth:::method"]=""
operation_parameters_collection_type["getUsageByMonth:::url"]=""
operation_parameters_collection_type["getUsageByMonth:::size"]=""
operation_parameters_collection_type["getUsageByMonth:::page"]=""
operation_parameters_collection_type["getUsageByYear:::start_date"]=""
operation_parameters_collection_type["getUsageByYear:::end_date"]=""
operation_parameters_collection_type["getUsageByYear:::combine_endpoints"]=""
operation_parameters_collection_type["getUsageByYear:::method"]=""
operation_parameters_collection_type["getUsageByYear:::url"]=""
operation_parameters_collection_type["getUsageByYear:::size"]=""
operation_parameters_collection_type["getUsageByYear:::page"]=""
operation_parameters_collection_type["getUsageEndpoints:::start_date"]=""
operation_parameters_collection_type["getUsageEndpoints:::end_date"]=""
operation_parameters_collection_type["getUserRegistrations:::granularity"]=""
operation_parameters_collection_type["getUserRegistrations:::start_date"]=""
operation_parameters_collection_type["getUserRegistrations:::end_date"]=""
operation_parameters_collection_type["getUserRegistrations:::size"]=""
operation_parameters_collection_type["getUserRegistrations:::page"]=""
operation_parameters_collection_type["addSearchIndex:::type"]=""
operation_parameters_collection_type["addSearchIndex:::id"]=""
operation_parameters_collection_type["addSearchIndex:::object"]=""
operation_parameters_collection_type["addSearchMappings:::mappings"]=
operation_parameters_collection_type["deleteSearchIndex:::type"]=""
operation_parameters_collection_type["deleteSearchIndex:::id"]=""
operation_parameters_collection_type["deleteSearchIndexes:::type"]=""
operation_parameters_collection_type["searchIndex:::type"]=""
operation_parameters_collection_type["searchIndex:::query"]=""
operation_parameters_collection_type["searchIndex:::size"]=""
operation_parameters_collection_type["searchIndex:::page"]=""
operation_parameters_collection_type["linkAccounts:::facebook_token"]=""
operation_parameters_collection_type["linkAccounts1:::google_token"]=""
operation_parameters_collection_type["createItemTemplate:::item_template_resource"]=""
operation_parameters_collection_type["createStoreItem:::cascade"]=""
operation_parameters_collection_type["createStoreItem:::store_item"]=""
operation_parameters_collection_type["deleteItemTemplate:::id"]=""
operation_parameters_collection_type["deleteItemTemplate:::cascade"]=""
operation_parameters_collection_type["deleteStoreItem:::id"]=""
operation_parameters_collection_type["getItemTemplate:::id"]=""
operation_parameters_collection_type["getItemTemplates:::size"]=""
operation_parameters_collection_type["getItemTemplates:::page"]=""
operation_parameters_collection_type["getItemTemplates:::order"]=""
operation_parameters_collection_type["getStore:::limit"]=""
operation_parameters_collection_type["getStore:::page"]=""
operation_parameters_collection_type["getStore:::use_catalog"]=""
operation_parameters_collection_type["getStore:::ignore_location"]=""
operation_parameters_collection_type["getStore:::in_stock_only"]=""
operation_parameters_collection_type["getStoreItem:::id"]=""
operation_parameters_collection_type["getStoreItems:::filter_name_search"]=""
operation_parameters_collection_type["getStoreItems:::filter_unique_key"]=""
operation_parameters_collection_type["getStoreItems:::filter_published"]=""
operation_parameters_collection_type["getStoreItems:::filter_displayable"]=""
operation_parameters_collection_type["getStoreItems:::filter_start"]=""
operation_parameters_collection_type["getStoreItems:::filter_end"]=""
operation_parameters_collection_type["getStoreItems:::filter_start_date"]=""
operation_parameters_collection_type["getStoreItems:::filter_stop_date"]=""
operation_parameters_collection_type["getStoreItems:::filter_sku"]=""
operation_parameters_collection_type["getStoreItems:::filter_price"]=""
operation_parameters_collection_type["getStoreItems:::filter_tag"]=""
operation_parameters_collection_type["getStoreItems:::filter_items_by_type"]=""
operation_parameters_collection_type["getStoreItems:::filter_bundled_skus"]=""
operation_parameters_collection_type["getStoreItems:::filter_vendor"]=""
operation_parameters_collection_type["getStoreItems:::size"]=""
operation_parameters_collection_type["getStoreItems:::page"]=""
operation_parameters_collection_type["getStoreItems:::order"]=""
operation_parameters_collection_type["quickBuy:::quick_buy_request"]=""
operation_parameters_collection_type["updateItemTemplate:::id"]=""
operation_parameters_collection_type["updateItemTemplate:::item_template_resource"]=""
operation_parameters_collection_type["updateStoreItem:::id"]=""
operation_parameters_collection_type["updateStoreItem:::cascade"]=""
operation_parameters_collection_type["updateStoreItem:::store_item"]=""
operation_parameters_collection_type["createBundleItem:::cascade"]=""
operation_parameters_collection_type["createBundleItem:::bundle_item"]=""
operation_parameters_collection_type["createBundleTemplate:::bundle_template_resource"]=""
operation_parameters_collection_type["deleteBundleItem:::id"]=""
operation_parameters_collection_type["deleteBundleTemplate:::id"]=""
operation_parameters_collection_type["deleteBundleTemplate:::cascade"]=""
operation_parameters_collection_type["getBundleItem:::id"]=""
operation_parameters_collection_type["getBundleTemplate:::id"]=""
operation_parameters_collection_type["getBundleTemplates:::size"]=""
operation_parameters_collection_type["getBundleTemplates:::page"]=""
operation_parameters_collection_type["getBundleTemplates:::order"]=""
operation_parameters_collection_type["updateBundleItem:::id"]=""
operation_parameters_collection_type["updateBundleItem:::cascade"]=""
operation_parameters_collection_type["updateBundleItem:::bundle_item"]=""
operation_parameters_collection_type["updateBundleTemplate:::id"]=""
operation_parameters_collection_type["updateBundleTemplate:::bundle_template_resource"]=""
operation_parameters_collection_type["createCouponItem:::cascade"]=""
operation_parameters_collection_type["createCouponItem:::coupon_item"]=""
operation_parameters_collection_type["createCouponTemplate:::coupon_template_resource"]=""
operation_parameters_collection_type["deleteCouponItem:::id"]=""
operation_parameters_collection_type["deleteCouponTemplate:::id"]=""
operation_parameters_collection_type["deleteCouponTemplate:::cascade"]=""
operation_parameters_collection_type["getCouponItem:::id"]=""
operation_parameters_collection_type["getCouponTemplate:::id"]=""
operation_parameters_collection_type["getCouponTemplates:::size"]=""
operation_parameters_collection_type["getCouponTemplates:::page"]=""
operation_parameters_collection_type["getCouponTemplates:::order"]=""
operation_parameters_collection_type["updateCouponItem:::id"]=""
operation_parameters_collection_type["updateCouponItem:::cascade"]=""
operation_parameters_collection_type["updateCouponItem:::coupon_item"]=""
operation_parameters_collection_type["updateCouponTemplate:::id"]=""
operation_parameters_collection_type["updateCouponTemplate:::coupon_template_resource"]=""
operation_parameters_collection_type["createCatalogSale:::catalog_sale"]=""
operation_parameters_collection_type["deleteCatalogSale:::id"]=""
operation_parameters_collection_type["getCatalogSale:::id"]=""
operation_parameters_collection_type["getCatalogSales:::size"]=""
operation_parameters_collection_type["getCatalogSales:::page"]=""
operation_parameters_collection_type["getCatalogSales:::order"]=""
operation_parameters_collection_type["updateCatalogSale:::id"]=""
operation_parameters_collection_type["updateCatalogSale:::catalog_sale"]=""
operation_parameters_collection_type["createShippingItem:::cascade"]=""
operation_parameters_collection_type["createShippingItem:::shipping_item"]=""
operation_parameters_collection_type["createShippingTemplate:::shipping_template_resource"]=""
operation_parameters_collection_type["deleteShippingItem:::id"]=""
operation_parameters_collection_type["deleteShippingTemplate:::id"]=""
operation_parameters_collection_type["deleteShippingTemplate:::cascade"]=""
operation_parameters_collection_type["getShippingItem:::id"]=""
operation_parameters_collection_type["getShippingTemplate:::id"]=""
operation_parameters_collection_type["getShippingTemplates:::size"]=""
operation_parameters_collection_type["getShippingTemplates:::page"]=""
operation_parameters_collection_type["getShippingTemplates:::order"]=""
operation_parameters_collection_type["updateShippingItem:::id"]=""
operation_parameters_collection_type["updateShippingItem:::cascade"]=""
operation_parameters_collection_type["updateShippingItem:::shipping_item"]=""
operation_parameters_collection_type["updateShippingTemplate:::id"]=""
operation_parameters_collection_type["updateShippingTemplate:::shipping_template_resource"]=""
operation_parameters_collection_type["addCustomDiscount:::id"]=""
operation_parameters_collection_type["addCustomDiscount:::custom_discount"]=""
operation_parameters_collection_type["addDiscountToCart:::id"]=""
operation_parameters_collection_type["addDiscountToCart:::sku_request"]=""
operation_parameters_collection_type["addItemToCart:::id"]=""
operation_parameters_collection_type["addItemToCart:::cart_item_request"]=""
operation_parameters_collection_type["createCart:::owner"]=""
operation_parameters_collection_type["createCart:::currency_code"]=""
operation_parameters_collection_type["getCart:::id"]=""
operation_parameters_collection_type["getCarts:::filter_owner_id"]=""
operation_parameters_collection_type["getCarts:::size"]=""
operation_parameters_collection_type["getCarts:::page"]=""
operation_parameters_collection_type["getCarts:::order"]=""
operation_parameters_collection_type["getShippable:::id"]=""
operation_parameters_collection_type["getShippingCountries:::id"]=""
operation_parameters_collection_type["removeDiscountFromCart:::id"]=""
operation_parameters_collection_type["removeDiscountFromCart:::code"]=""
operation_parameters_collection_type["setCartCurrency:::id"]=""
operation_parameters_collection_type["setCartCurrency:::currency_code"]=""
operation_parameters_collection_type["setCartOwner:::id"]=""
operation_parameters_collection_type["setCartOwner:::user_id"]=""
operation_parameters_collection_type["updateItemInCart:::id"]=""
operation_parameters_collection_type["updateItemInCart:::cart_item_request"]=""
operation_parameters_collection_type["updateShippingAddress:::id"]=""
operation_parameters_collection_type["updateShippingAddress:::cart_shipping_address_request"]=""
operation_parameters_collection_type["createSubscription:::subscription_resource"]=""
operation_parameters_collection_type["createSubscriptionTemplate:::subscription_template_resource"]=""
operation_parameters_collection_type["deleteSubscription:::id"]=""
operation_parameters_collection_type["deleteSubscription:::plan_id"]=""
operation_parameters_collection_type["deleteSubscriptionTemplate:::id"]=""
operation_parameters_collection_type["deleteSubscriptionTemplate:::cascade"]=""
operation_parameters_collection_type["getSubscription:::id"]=""
operation_parameters_collection_type["getSubscriptionTemplate:::id"]=""
operation_parameters_collection_type["getSubscriptionTemplates:::size"]=""
operation_parameters_collection_type["getSubscriptionTemplates:::page"]=""
operation_parameters_collection_type["getSubscriptionTemplates:::order"]=""
operation_parameters_collection_type["getSubscriptions:::size"]=""
operation_parameters_collection_type["getSubscriptions:::page"]=""
operation_parameters_collection_type["getSubscriptions:::order"]=""
operation_parameters_collection_type["updateSubscription:::id"]=""
operation_parameters_collection_type["updateSubscription:::subscription_resource"]=""
operation_parameters_collection_type["updateSubscriptionTemplate:::id"]=""
operation_parameters_collection_type["updateSubscriptionTemplate:::subscription_template_resource"]=""
operation_parameters_collection_type["createVendor:::vendor"]=""
operation_parameters_collection_type["createVendorTemplate:::vendor_template_resource"]=""
operation_parameters_collection_type["deleteVendor:::id"]=""
operation_parameters_collection_type["deleteVendorTemplate:::id"]=""
operation_parameters_collection_type["deleteVendorTemplate:::cascade"]=""
operation_parameters_collection_type["getVendor:::id"]=""
operation_parameters_collection_type["getVendorTemplate:::id"]=""
operation_parameters_collection_type["getVendorTemplates:::size"]=""
operation_parameters_collection_type["getVendorTemplates:::page"]=""
operation_parameters_collection_type["getVendorTemplates:::order"]=""
operation_parameters_collection_type["getVendors:::filter_name"]=""
operation_parameters_collection_type["getVendors:::size"]=""
operation_parameters_collection_type["getVendors:::page"]=""
operation_parameters_collection_type["getVendors:::order"]=""
operation_parameters_collection_type["updateVendor:::id"]=""
operation_parameters_collection_type["updateVendor:::vendor"]=""
operation_parameters_collection_type["updateVendorTemplate:::id"]=""
operation_parameters_collection_type["updateVendorTemplate:::vendor_template_resource"]=""
operation_parameters_collection_type["createCountryTax:::tax_resource"]=""
operation_parameters_collection_type["createStateTax:::country_code_iso3"]=""
operation_parameters_collection_type["createStateTax:::tax_resource"]=""
operation_parameters_collection_type["deleteCountryTax:::country_code_iso3"]=""
operation_parameters_collection_type["deleteStateTax:::country_code_iso3"]=""
operation_parameters_collection_type["deleteStateTax:::state_code"]=""
operation_parameters_collection_type["getCountryTax:::country_code_iso3"]=""
operation_parameters_collection_type["getCountryTaxes:::size"]=""
operation_parameters_collection_type["getCountryTaxes:::page"]=""
operation_parameters_collection_type["getCountryTaxes:::order"]=""
operation_parameters_collection_type["getStateTax:::country_code_iso3"]=""
operation_parameters_collection_type["getStateTax:::state_code"]=""
operation_parameters_collection_type["getStateTaxesForCountries:::size"]=""
operation_parameters_collection_type["getStateTaxesForCountries:::page"]=""
operation_parameters_collection_type["getStateTaxesForCountries:::order"]=""
operation_parameters_collection_type["getStateTaxesForCountry:::country_code_iso3"]=""
operation_parameters_collection_type["getStateTaxesForCountry:::size"]=""
operation_parameters_collection_type["getStateTaxesForCountry:::page"]=""
operation_parameters_collection_type["getStateTaxesForCountry:::order"]=""
operation_parameters_collection_type["updateCountryTax:::country_code_iso3"]=""
operation_parameters_collection_type["updateCountryTax:::tax_resource"]=""
operation_parameters_collection_type["updateStateTax:::country_code_iso3"]=""
operation_parameters_collection_type["updateStateTax:::state_code"]=""
operation_parameters_collection_type["updateStateTax:::tax_resource"]=""
operation_parameters_collection_type["getTemplatePropertyType:::type"]=""
operation_parameters_collection_type["addUserTag:::user_id"]=""
operation_parameters_collection_type["addUserTag:::tag"]=""
operation_parameters_collection_type["createUserTemplate:::user_template_resource"]=""
operation_parameters_collection_type["deleteUserTemplate:::id"]=""
operation_parameters_collection_type["deleteUserTemplate:::cascade"]=""
operation_parameters_collection_type["getUser:::id"]=""
operation_parameters_collection_type["getUserTags:::user_id"]=""
operation_parameters_collection_type["getUserTemplate:::id"]=""
operation_parameters_collection_type["getUserTemplates:::size"]=""
operation_parameters_collection_type["getUserTemplates:::page"]=""
operation_parameters_collection_type["getUserTemplates:::order"]=""
operation_parameters_collection_type["getUsers:::filter_displayname"]=""
operation_parameters_collection_type["getUsers:::filter_email"]=""
operation_parameters_collection_type["getUsers:::filter_firstname"]=""
operation_parameters_collection_type["getUsers:::filter_fullname"]=""
operation_parameters_collection_type["getUsers:::filter_lastname"]=""
operation_parameters_collection_type["getUsers:::filter_username"]=""
operation_parameters_collection_type["getUsers:::filter_tag"]=""
operation_parameters_collection_type["getUsers:::filter_group"]=""
operation_parameters_collection_type["getUsers:::filter_role"]=""
operation_parameters_collection_type["getUsers:::filter_search"]=""
operation_parameters_collection_type["getUsers:::size"]=""
operation_parameters_collection_type["getUsers:::page"]=""
operation_parameters_collection_type["getUsers:::order"]=""
operation_parameters_collection_type["passwordReset:::id"]=""
operation_parameters_collection_type["passwordReset:::new_password_request"]=""
operation_parameters_collection_type["registerUser:::user_resource"]=""
operation_parameters_collection_type["removeUserTag:::user_id"]=""
operation_parameters_collection_type["removeUserTag:::tag"]=""
operation_parameters_collection_type["setPassword:::id"]=""
operation_parameters_collection_type["setPassword:::password"]=""
operation_parameters_collection_type["startPasswordReset:::id"]=""
operation_parameters_collection_type["submitPasswordReset:::password_reset"]=""
operation_parameters_collection_type["updateUser:::id"]=""
operation_parameters_collection_type["updateUser:::user_resource"]=""
operation_parameters_collection_type["updateUserTemplate:::id"]=""
operation_parameters_collection_type["updateUserTemplate:::user_template_resource"]=""
operation_parameters_collection_type["createAddress:::user_id"]=""
operation_parameters_collection_type["createAddress:::saved_address_resource"]=""
operation_parameters_collection_type["deleteAddress:::user_id"]=""
operation_parameters_collection_type["deleteAddress:::id"]=""
operation_parameters_collection_type["getAddress:::user_id"]=""
operation_parameters_collection_type["getAddress:::id"]=""
operation_parameters_collection_type["getAddresses:::user_id"]=""
operation_parameters_collection_type["getAddresses:::size"]=""
operation_parameters_collection_type["getAddresses:::page"]=""
operation_parameters_collection_type["getAddresses:::order"]=""
operation_parameters_collection_type["updateAddress:::user_id"]=""
operation_parameters_collection_type["updateAddress:::id"]=""
operation_parameters_collection_type["updateAddress:::saved_address_resource"]=""
operation_parameters_collection_type["addFriend:::user_id"]=""
operation_parameters_collection_type["addFriend:::id"]=""
operation_parameters_collection_type["getFriends:::user_id"]=""
operation_parameters_collection_type["getFriends:::size"]=""
operation_parameters_collection_type["getFriends:::page"]=""
operation_parameters_collection_type["getInviteToken:::user_id"]=""
operation_parameters_collection_type["getInvites:::user_id"]=""
operation_parameters_collection_type["getInvites:::size"]=""
operation_parameters_collection_type["getInvites:::page"]=""
operation_parameters_collection_type["redeemFriendshipToken:::user_id"]=""
operation_parameters_collection_type["redeemFriendshipToken:::token"]=""
operation_parameters_collection_type["removeOrDeclineFriend:::user_id"]=""
operation_parameters_collection_type["removeOrDeclineFriend:::id"]=""
operation_parameters_collection_type["addMemberToGroup:::unique_name"]=""
operation_parameters_collection_type["addMemberToGroup:::user"]=""
operation_parameters_collection_type["addMembersToGroup:::unique_name"]=""
operation_parameters_collection_type["addMembersToGroup:::users"]=
operation_parameters_collection_type["createGroup:::group_resource"]=""
operation_parameters_collection_type["createGroupTemplate:::group_template_resource"]=""
operation_parameters_collection_type["deleteGroup:::unique_name"]=""
operation_parameters_collection_type["deleteGroupTemplate:::id"]=""
operation_parameters_collection_type["deleteGroupTemplate:::cascade"]=""
operation_parameters_collection_type["getGroup:::unique_name"]=""
operation_parameters_collection_type["getGroupMember:::unique_name"]=""
operation_parameters_collection_type["getGroupMember:::user_id"]=""
operation_parameters_collection_type["getGroupMembers:::unique_name"]=""
operation_parameters_collection_type["getGroupMembers:::size"]=""
operation_parameters_collection_type["getGroupMembers:::page"]=""
operation_parameters_collection_type["getGroupMembers:::order"]=""
operation_parameters_collection_type["getGroupTemplate:::id"]=""
operation_parameters_collection_type["getGroupTemplates:::size"]=""
operation_parameters_collection_type["getGroupTemplates:::page"]=""
operation_parameters_collection_type["getGroupTemplates:::order"]=""
operation_parameters_collection_type["getGroupsForUser:::user_id"]=""
operation_parameters_collection_type["removeGroupMember:::unique_name"]=""
operation_parameters_collection_type["removeGroupMember:::user_id"]=""
operation_parameters_collection_type["updateGroup:::unique_name"]=""
operation_parameters_collection_type["updateGroup:::group_resource"]=""
operation_parameters_collection_type["updateGroupMemberStatus:::unique_name"]=""
operation_parameters_collection_type["updateGroupMemberStatus:::user_id"]=""
operation_parameters_collection_type["updateGroupMemberStatus:::Status"]=""
operation_parameters_collection_type["updateGroupTemplate:::id"]=""
operation_parameters_collection_type["updateGroupTemplate:::group_template_resource"]=""
operation_parameters_collection_type["updateGroups:::filter_template"]=""
operation_parameters_collection_type["updateGroups:::filter_member_count"]=""
operation_parameters_collection_type["updateGroups:::filter_name"]=""
operation_parameters_collection_type["updateGroups:::filter_unique_name"]=""
operation_parameters_collection_type["updateGroups:::filter_parent"]=""
operation_parameters_collection_type["updateGroups:::filter_status"]=""
operation_parameters_collection_type["updateGroups:::size"]=""
operation_parameters_collection_type["updateGroups:::page"]=""
operation_parameters_collection_type["updateGroups:::order"]=""
operation_parameters_collection_type["addItemToUserInventory:::id"]=""
operation_parameters_collection_type["addItemToUserInventory:::user_inventory_add_request"]=""
operation_parameters_collection_type["checkUserEntitlementItem:::user_id"]=""
operation_parameters_collection_type["checkUserEntitlementItem:::item_id"]=""
operation_parameters_collection_type["checkUserEntitlementItem:::sku"]=""
operation_parameters_collection_type["createEntitlementItem:::cascade"]=""
operation_parameters_collection_type["createEntitlementItem:::entitlement_item"]=""
operation_parameters_collection_type["createEntitlementTemplate:::template"]=""
operation_parameters_collection_type["deleteEntitlementItem:::entitlement_id"]=""
operation_parameters_collection_type["deleteEntitlementTemplate:::id"]=""
operation_parameters_collection_type["deleteEntitlementTemplate:::cascade"]=""
operation_parameters_collection_type["getEntitlementItem:::entitlement_id"]=""
operation_parameters_collection_type["getEntitlementItems:::size"]=""
operation_parameters_collection_type["getEntitlementItems:::page"]=""
operation_parameters_collection_type["getEntitlementItems:::order"]=""
operation_parameters_collection_type["getEntitlementTemplate:::id"]=""
operation_parameters_collection_type["getEntitlementTemplates:::size"]=""
operation_parameters_collection_type["getEntitlementTemplates:::page"]=""
operation_parameters_collection_type["getEntitlementTemplates:::order"]=""
operation_parameters_collection_type["getUserInventories:::id"]=""
operation_parameters_collection_type["getUserInventories:::inactive"]=""
operation_parameters_collection_type["getUserInventories:::size"]=""
operation_parameters_collection_type["getUserInventories:::page"]=""
operation_parameters_collection_type["getUserInventories:::filter_item_name"]=""
operation_parameters_collection_type["getUserInventories:::filter_item_id"]=""
operation_parameters_collection_type["getUserInventories:::filter_username"]=""
operation_parameters_collection_type["getUserInventories:::filter_group"]=""
operation_parameters_collection_type["getUserInventories:::filter_date"]=""
operation_parameters_collection_type["getUserInventory:::user_id"]=""
operation_parameters_collection_type["getUserInventory:::id"]=""
operation_parameters_collection_type["getUserInventoryLog:::user_id"]=""
operation_parameters_collection_type["getUserInventoryLog:::id"]=""
operation_parameters_collection_type["getUserInventoryLog:::size"]=""
operation_parameters_collection_type["getUserInventoryLog:::page"]=""
operation_parameters_collection_type["getUsersInventory:::inactive"]=""
operation_parameters_collection_type["getUsersInventory:::size"]=""
operation_parameters_collection_type["getUsersInventory:::page"]=""
operation_parameters_collection_type["getUsersInventory:::filter_item_name"]=""
operation_parameters_collection_type["getUsersInventory:::filter_item_id"]=""
operation_parameters_collection_type["getUsersInventory:::filter_username"]=""
operation_parameters_collection_type["getUsersInventory:::filter_group"]=""
operation_parameters_collection_type["getUsersInventory:::filter_date"]=""
operation_parameters_collection_type["grantUserEntitlement:::user_id"]=""
operation_parameters_collection_type["grantUserEntitlement:::grantRequest"]=""
operation_parameters_collection_type["updateEntitlementItem:::entitlement_id"]=""
operation_parameters_collection_type["updateEntitlementItem:::cascade"]=""
operation_parameters_collection_type["updateEntitlementItem:::entitlement_item"]=""
operation_parameters_collection_type["updateEntitlementTemplate:::id"]=""
operation_parameters_collection_type["updateEntitlementTemplate:::template"]=""
operation_parameters_collection_type["updateUserInventoryBehaviorData:::user_id"]=""
operation_parameters_collection_type["updateUserInventoryBehaviorData:::id"]=""
operation_parameters_collection_type["updateUserInventoryBehaviorData:::data"]=""
operation_parameters_collection_type["updateUserInventoryExpires:::user_id"]=""
operation_parameters_collection_type["updateUserInventoryExpires:::id"]=""
operation_parameters_collection_type["updateUserInventoryExpires:::timestamp"]=""
operation_parameters_collection_type["updateUserInventoryStatus:::user_id"]=""
operation_parameters_collection_type["updateUserInventoryStatus:::id"]=""
operation_parameters_collection_type["updateUserInventoryStatus:::inventory_status"]=""
operation_parameters_collection_type["useUserEntitlementItem:::user_id"]=""
operation_parameters_collection_type["useUserEntitlementItem:::item_id"]=""
operation_parameters_collection_type["useUserEntitlementItem:::sku"]=""
operation_parameters_collection_type["useUserEntitlementItem:::info"]=""
operation_parameters_collection_type["createUserRelationship:::relationship"]=""
operation_parameters_collection_type["deleteUserRelationship:::id"]=""
operation_parameters_collection_type["getUserRelationship:::id"]=""
operation_parameters_collection_type["getUserRelationships:::size"]=""
operation_parameters_collection_type["getUserRelationships:::page"]=""
operation_parameters_collection_type["getUserRelationships:::order"]=""
operation_parameters_collection_type["updateUserRelationship:::id"]=""
operation_parameters_collection_type["updateUserRelationship:::relationship"]=""
operation_parameters_collection_type["getUserSubscriptionDetails:::user_id"]=""
operation_parameters_collection_type["getUserSubscriptionDetails:::inventory_id"]=""
operation_parameters_collection_type["getUsersSubscriptionDetails:::user_id"]=""
operation_parameters_collection_type["reactivateUserSubscription:::user_id"]=""
operation_parameters_collection_type["reactivateUserSubscription:::inventory_id"]=""
operation_parameters_collection_type["reactivateUserSubscription:::reactivate_subscription_request"]=""
operation_parameters_collection_type["setSubscriptionBillDate:::user_id"]=""
operation_parameters_collection_type["setSubscriptionBillDate:::inventory_id"]=""
operation_parameters_collection_type["setSubscriptionBillDate:::bill_date"]=""
operation_parameters_collection_type["setSubscriptionPaymentMethod:::user_id"]=""
operation_parameters_collection_type["setSubscriptionPaymentMethod:::inventory_id"]=""
operation_parameters_collection_type["setSubscriptionPaymentMethod:::payment_method_id"]=""
operation_parameters_collection_type["setSubscriptionStatus:::user_id"]=""
operation_parameters_collection_type["setSubscriptionStatus:::inventory_id"]=""
operation_parameters_collection_type["setSubscriptionStatus:::status"]=""
operation_parameters_collection_type["setUserSubscriptionPlan:::user_id"]=""
operation_parameters_collection_type["setUserSubscriptionPlan:::inventory_id"]=""
operation_parameters_collection_type["setUserSubscriptionPlan:::plan_id"]=""
operation_parameters_collection_type["setUserSubscriptionPrice:::user_id"]=""
operation_parameters_collection_type["setUserSubscriptionPrice:::inventory_id"]=""
operation_parameters_collection_type["setUserSubscriptionPrice:::The override details"]=""
operation_parameters_collection_type["getBatch:::token"]=""
operation_parameters_collection_type["sendBatch:::batch"]=""
operation_parameters_collection_type["setMaintenance:::maintenance"]=""
operation_parameters_collection_type["updateMaintenance:::maintenance"]=""
operation_parameters_collection_type["getUserLocationLog:::user_id"]=""
operation_parameters_collection_type["getUserLocationLog:::size"]=""
operation_parameters_collection_type["getUserLocationLog:::page"]=""
operation_parameters_collection_type["getUserLocationLog:::order"]=""


##
# Map for body parameters passed after operation as
# PARAMETER==STRING_VALUE or PARAMETER:=NUMERIC_VALUE
# These will be mapped to top level json keys ( { "PARAMETER": "VALUE" })
declare -A body_parameters

##
# These arguments will be directly passed to cURL
curl_arguments=""

##
# The host for making the request
host=""

##
# The user credentials for basic authentication
basic_auth_credential=""

##
# The user API key
apikey_auth_credential=""

##
# If true, the script will only output the actual cURL command that would be
# used
print_curl=false

##
# The operation ID passed on the command line
operation=""

##
# The provided Accept header value
header_accept=""

##
# The provided Content-type header value
header_content_type=""

##
# If there is any body content on the stdin pass it to the body of the request
body_content_temp_file=""

##
# If this variable is set to true, the request will be performed even
# if parameters for required query, header or body values are not provided
# (path parameters are still required).
force=false

##
# Declare some mime types abbreviations for easier content-type and accepts
# headers specification
declare -A mime_type_abbreviations
# text/*
mime_type_abbreviations["text"]="text/plain"
mime_type_abbreviations["html"]="text/html"
mime_type_abbreviations["md"]="text/x-markdown"
mime_type_abbreviations["csv"]="text/csv"
mime_type_abbreviations["css"]="text/css"
mime_type_abbreviations["rtf"]="text/rtf"
# application/*
mime_type_abbreviations["json"]="application/json"
mime_type_abbreviations["xml"]="application/xml"
mime_type_abbreviations["yaml"]="application/yaml"
mime_type_abbreviations["js"]="application/javascript"
mime_type_abbreviations["bin"]="application/octet-stream"
mime_type_abbreviations["rdf"]="application/rdf+xml"
# image/*
mime_type_abbreviations["jpg"]="image/jpeg"
mime_type_abbreviations["png"]="image/png"
mime_type_abbreviations["gif"]="image/gif"
mime_type_abbreviations["bmp"]="image/bmp"
mime_type_abbreviations["tiff"]="image/tiff"


##############################################################################
#
# Escape special URL characters
# Based on table at http://www.w3schools.com/tags/ref_urlencode.asp
#
##############################################################################
url_escape() {
    local raw_url="$1"

    value=$(sed -e 's/ /%20/g' \
       -e 's/!/%21/g' \
       -e 's/"/%22/g' \
       -e 's/#/%23/g' \
       -e 's/\&/%26/g' \
       -e 's/'\''/%28/g' \
       -e 's/(/%28/g' \
       -e 's/)/%29/g' \
       -e 's/:/%3A/g' \
       -e 's/\t/%09/g' \
       -e 's/?/%3F/g' <<<$raw_url);

    echo $value
}

##############################################################################
#
# Lookup the mime type abbreviation in the mime_type_abbreviations array.
# If not present assume the user provided a valid mime type
#
##############################################################################
lookup_mime_type() {
    local mime_type=$1

    if [[ ${mime_type_abbreviations[$mime_type]} ]]; then
        echo ${mime_type_abbreviations[$mime_type]}
    else
        echo $1
    fi
}

##############################################################################
#
# Converts an associative array into a list of cURL header
# arguments (-H "KEY: VALUE")
#
##############################################################################
header_arguments_to_curl() {
    local headers_curl=""
    local api_key_header=""
    local api_key_header_in_cli=""

    for key in "${!header_arguments[@]}"; do
        headers_curl+="-H \"${key}: ${header_arguments[${key}]}\" "
        if [[ "${key}XX" == "${api_key_header}XX" ]]; then
            api_key_header_in_cli="YES"
        fi
    done
    headers_curl+=" "

    echo "${headers_curl}"
}

##############################################################################
#
# Converts an associative array into a simple JSON with keys as top
# level object attributes
#
# \todo Add convertion of more complex attributes using paths
#
##############################################################################
body_parameters_to_json() {
    local body_json="-d '{"
    local body_parameter_count=${#body_parameters[@]}
    local count=0
    for key in "${!body_parameters[@]}"; do
        if [[ $((count++)) -gt 0 ]]; then
            body_json+=", "
        fi
        body_json+="\"${key}\": ${body_parameters[${key}]}"
    done
    body_json+="}'"

    if [[ "${#body_parameters[@]}" -eq 0 ]]; then
        echo ""
    else
        echo "${body_json}"
    fi
}

##############################################################################
#
# Helper method for showing error because for example echo in
# build_request_path() is evaluated as part of command line not printed on
# output. Anyway better idea for resource clean up ;-).
#
##############################################################################
ERROR_MSG=""
function finish {
    if [[ -n "$ERROR_MSG" ]]; then
        echo >&2 "${OFF}${RED}$ERROR_MSG"
        echo >&2 "${OFF}Check usage: '${script_name} --help'"
    fi
}
trap finish EXIT


##############################################################################
#
# Validate and build request path including query parameters
#
##############################################################################
build_request_path() {
    local path_template=$1
    local -n path_params=$2
    local -n query_params=$3


    #
    # Check input paramaters count against minimum and maximum required
    #
    if [[ "$force" = false ]]; then
        local was_error=""
        for qparam in "${query_params[@]}" "${path_params[@]}"; do
            local parameter_values=($(sed -e 's/'":::"'/\n/g' <<<"${operation_parameters[$qparam]}"))

            #
            # Check if the number of provided values is not less than minimum required
            #
            if [[ ${#parameter_values[@]} -lt ${operation_parameters_minimum_occurences["${operation}:::${qparam}"]} ]]; then
                echo "ERROR: Too few values provided for '${qparam}' parameter."
                was_error=true
            fi

            #
            # Check if the number of provided values is not more than maximum
            #
            if [[ ${operation_parameters_maximum_occurences["${operation}:::${qparam}"]} -gt 0 \
                  && ${#parameter_values[@]} -gt ${operation_parameters_maximum_occurences["${operation}:::${qparam}"]} ]]; then
                echo "ERROR: Too many values provided for '${qparam}' parameter"
                was_error=true
            fi
        done
        if [[ -n "$was_error" ]]; then
            exit 1
        fi
    fi

    # First replace all path parameters in the path
    for pparam in "${path_params[@]}"; do
        if [[ $path_template =~ (.*)(\{$pparam\})(.*) ]]; then
            path_template=${BASH_REMATCH[1]}${operation_parameters[$pparam]}${BASH_REMATCH[3]}
        fi
    done

    local query_request_part=""

    local query_parameter_count=${#query_params[@]}
    local count=0
    for qparam in "${query_params[@]}"; do
        # Get the array of parameter values
        local parameter_values=($(sed -e 's/'":::"'/\n/g' <<<"${operation_parameters[$qparam]}"))
        local parameter_value=""

        if [[ -n "${parameter_values[@]}" ]]; then
            if [[ $((count++)) -gt 0 ]]; then
                query_request_part+="&"
            fi
        fi

        #
        # Append parameters without specific cardinality
        #
        local collection_type="${operation_parameters_collection_type["${operation}:::${qparam}"]}"
 [[ "${collection_type}" == "" ]]; then
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="&"
                fi
                parameter_value+="${qparam}=${qvalue}"
            done
        #
        # Append parameters specified as 'mutli' collections i.e. param=value1&param=value2&...
        #
        elif [[ "${collection_type}" == "multi" ]]; then
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="&"
                fi
                parameter_value+="${qparam}=${qvalue}"
            done
        #
        # Append parameters specified as 'csv' collections i.e. param=value1,value2,...
        #
        elif [[ "${collection_type}" == "csv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+=","
                fi
                parameter_value+="${qvalue}"
            done
        #
        # Append parameters specified as 'ssv' collections i.e. param="value1 value2 ..."
        #
        elif [[ "${collection_type}" == "ssv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+=" "
                fi
                parameter_value+="${qvalue}"
            done
        #
        # Append parameters specified as 'tsv' collections i.e. param="value1\tvalue2\t..."
        #
        elif [[ "${collection_type}" == "tsv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="\t"
                fi
                parameter_value+="${qvalue}"
            done
        else
            echo "Unsupported collection format \"${collection_type}\""
            exit 1
        fi

        if [[ -n "${parameter_value}" ]]; then
            query_request_part+="${parameter_value}"
        fi

    done


    # Now append query parameters - if any
    if [[ -n "${query_request_part}" ]]; then
        path_template+="?${query_request_part}"
    fi

    echo $path_template
}



###############################################################################
#
# Print main help message
#
###############################################################################
print_help() {
cat <<EOF

${BOLD}${WHITE}Knetik Platform API Documentation latest command line client (API version latest
)${OFF}

${BOLD}${WHITE}Usage${OFF}

  ${GREEN}${script_name}${OFF} [-h|--help] [-V|--version] [--about] [${RED}<curl-options>${OFF}]
           [-ac|--accept ${GREEN}<mime-type>${OFF}] [-ct,--content-type ${GREEN}<mime-type>${OFF}]
           [--host ${CYAN}<url>${OFF}] [--dry-run] [-nc|--no-colors] ${YELLOW}<operation>${OFF} [-h|--help]
           [${BLUE}<headers>${OFF}] [${MAGENTA}<parameters>${OFF}] [${MAGENTA}<body-parameters>${OFF}]

  - ${CYAN}<url>${OFF} - endpoint of the REST service without basepath

  - ${RED}<curl-options>${OFF} - any valid cURL options can be passed before ${YELLOW}<operation>${OFF}
  - ${GREEN}<mime-type>${OFF} - either full mime-type or one of supported abbreviations:
                   (text, html, md, csv, css, rtf, json, xml, yaml, js, bin,
                    rdf, jpg, png, gif, bmp, tiff)
  - ${BLUE}<headers>${OFF} - HTTP headers can be passed in the form ${YELLOW}HEADER${OFF}:${BLUE}VALUE${OFF}
  - ${MAGENTA}<parameters>${OFF} - REST operation parameters can be passed in the following
                   forms:
                   * ${YELLOW}KEY${OFF}=${BLUE}VALUE${OFF} - path or query parameters
  - ${MAGENTA}<body-parameters>${OFF} - simple JSON body content (first level only) can be build
                        using the following arguments:
                        * ${YELLOW}KEY${OFF}==${BLUE}VALUE${OFF} - body parameters which will be added to body
                                      JSON as '{ ..., "${YELLOW}KEY${OFF}": "${BLUE}VALUE${OFF}", ... }'
                        * ${YELLOW}KEY${OFF}:=${BLUE}VALUE${OFF} - body parameters which will be added to body
                                      JSON as '{ ..., "${YELLOW}KEY${OFF}": ${BLUE}VALUE${OFF}, ... }'

EOF
    echo -e "${BOLD}${WHITE}Authentication methods${OFF}"
    echo -e ""
    echo -e "  - ${MAGENTA}OAuth2 (flow: application)${OFF}"
    echo -e "      Authorization URL: "
    echo -e "        * "
    echo -e "      Scopes:"
    echo -e "        * read write - read write"
    echo -e "  - ${MAGENTA}OAuth2 (flow: password)${OFF}"
    echo -e "      Authorization URL: "
    echo -e "        * "
    echo -e "      Scopes:"
    echo -e "        * read write - read write"
    echo ""
    echo -e "${BOLD}${WHITE}Operations (grouped by tags)${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}[accessToken]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getOAuthToken${OFF};Get access token
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[activities]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createActivity${OFF};Create an activity
  ${CYAN}createActivityOccurrence${OFF};Create a new activity occurrence. Ex: start a game
  ${CYAN}createActivityTemplate${OFF};Create a activity template
  ${CYAN}deleteActivity${OFF};Delete an activity
  ${CYAN}deleteActivityTemplate${OFF};Delete a activity template
  ${CYAN}getActivities${OFF};List activity definitions
  ${CYAN}getActivity${OFF};Get a single activity
  ${CYAN}getActivityTemplate${OFF};Get a single activity template
  ${CYAN}getActivityTemplates${OFF};List and search activity templates
  ${CYAN}setActivityOccurrenceResults${OFF};Sets the status of an activity occurrence to FINISHED and logs metrics
  ${CYAN}updateActivity${OFF};Update an activity
  ${CYAN}updateActivityOccurrence${OFF};Updated the status of an activity occurrence
  ${CYAN}updateActivityTemplate${OFF};Update an activity template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[amazonWebServicesS3]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getDownloadURL${OFF};Get a temporary signed S3 URL for download
  ${CYAN}getSignedS3URL${OFF};Get a signed S3 URL for upload
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[authClients]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createClient${OFF};Create a new client
  ${CYAN}deleteClient${OFF};Delete a client
  ${CYAN}getClient${OFF};Get a single client
  ${CYAN}getClientGrantTypes${OFF};List available client grant types
  ${CYAN}getClients${OFF};List and search clients
  ${CYAN}setClientGrantTypes${OFF};Set grant types for a client
  ${CYAN}setClientRedirectUris${OFF};Set redirect uris for a client
  ${CYAN}updateClient${OFF};Update a client
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[authPermissions]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createPermission${OFF};Create a new permission
  ${CYAN}deletePermission${OFF};Delete a permission
  ${CYAN}getPermission${OFF};Get a single permission
  ${CYAN}getPermissions${OFF};List and search permissions
  ${CYAN}updatePermission${OFF};Update a permission
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[authRoles]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createRole${OFF};Create a new role
  ${CYAN}deleteRole${OFF};Delete a role
  ${CYAN}getClientRoles${OFF};Get roles for a client
  ${CYAN}getRole${OFF};Get a single role
  ${CYAN}getRoles${OFF};List and search roles
  ${CYAN}getUserRoles${OFF};Get roles for a user
  ${CYAN}setClientRoles${OFF};Set roles for a client
  ${CYAN}setPermissionsForRole${OFF};Set permissions for a role
  ${CYAN}setUserRoles${OFF};Set roles for a user
  ${CYAN}updateRole${OFF};Update a role
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[authTokens]${OFF}"
read -d '' ops <<EOF
  ${CYAN}deleteTokens${OFF};Delete tokens by username, client id, or both
  ${CYAN}getToken${OFF};Get a single token by username and client id
  ${CYAN}getTokens${OFF};List usernames and client ids
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[bRERuleEngineActions]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getBREActions${OFF};Get a list of available actions
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[bRERuleEngineCategories]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createBRECategoryTemplate${OFF};Create a BRE category template
  ${CYAN}deleteBRECategoryTemplate${OFF};Delete a BRE category template
  ${CYAN}getBRECategories${OFF};List categories
  ${CYAN}getBRECategory${OFF};Get a single category
  ${CYAN}getBRECategoryTemplate${OFF};Get a single BRE category template
  ${CYAN}getBRECategoryTemplates${OFF};List and search BRE category templates
  ${CYAN}updateBRECategory${OFF};Update a category
  ${CYAN}updateBRECategoryTemplate${OFF};Update a BRE category template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[bRERuleEngineEvents]${OFF}"
read -d '' ops <<EOF
  ${CYAN}sendBREEvent${OFF};Fire a new event, based on an existing trigger
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[bRERuleEngineExpressions]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getBREExpressions${OFF};Get a list of 'lookup' type expressions
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[bRERuleEngineGlobals]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createBREGlobal${OFF};Create a global definition
  ${CYAN}deleteBREGlobal${OFF};Delete a global
  ${CYAN}getBREGlobal${OFF};Get a single global definition
  ${CYAN}getBREGlobals${OFF};List global definitions
  ${CYAN}updateBREGlobal${OFF};Update a global definition
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[bRERuleEngineRules]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createBRERule${OFF};Create a rule
  ${CYAN}deleteBRERule${OFF};Delete a rule
  ${CYAN}getBREExpressionAsString${OFF};Returns a string representation of the provided expression
  ${CYAN}getBRERule${OFF};Get a single rule
  ${CYAN}getBRERules${OFF};List rules
  ${CYAN}setBRERule${OFF};Enable or disable a rule
  ${CYAN}updateBRERule${OFF};Update a rule
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[bRERuleEngineTriggers]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createBRETrigger${OFF};Create a trigger
  ${CYAN}deleteBRETrigger${OFF};Delete a trigger
  ${CYAN}getBRETrigger${OFF};Get a single trigger
  ${CYAN}getBRETriggers${OFF};List triggers
  ${CYAN}updateBRETrigger${OFF};Update a trigger
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[bRERuleEngineVariables]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getBREVariableTypes${OFF};Get a list of variable types available
  ${CYAN}getBREVariableValues${OFF};List valid values for a type
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[campaigns]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addChallengeToCampaign${OFF};Add a challenge to a campaign
  ${CYAN}createCampaign${OFF};Create a campaign
  ${CYAN}createCampaignTemplate${OFF};Create a campaign template
  ${CYAN}deleteCampaign${OFF};Delete a campaign
  ${CYAN}deleteCampaignTemplate${OFF};Delete a campaign template
  ${CYAN}getCampaign${OFF};Returns a single campaign
  ${CYAN}getCampaignChallenges${OFF};List the challenges associated with a campaign
  ${CYAN}getCampaignTemplate${OFF};Get a single campaign template
  ${CYAN}getCampaignTemplates${OFF};List and search campaign templates
  ${CYAN}getCampaigns${OFF};List and search campaigns
  ${CYAN}removeChallengeFromCampaign${OFF};Remove a challenge from a campaign
  ${CYAN}updateCampaign${OFF};Update a campaign
  ${CYAN}updateCampaignTemplate${OFF};Update an campaign template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[campaignsChallenges]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createChallenge${OFF};Create a challenge
  ${CYAN}createChallengeActivity${OFF};Create a challenge activity
  ${CYAN}createChallengeActivityTemplate${OFF};Create a challenge activity template
  ${CYAN}createChallengeTemplate${OFF};Create a challenge template
  ${CYAN}deleteChallenge${OFF};Delete a challenge
  ${CYAN}deleteChallengeActivity${OFF};Delete a challenge activity
  ${CYAN}deleteChallengeActivityTemplate${OFF};Delete a challenge activity template
  ${CYAN}deleteChallengeEvent${OFF};Delete a challenge event
  ${CYAN}deleteChallengeTemplate${OFF};Delete a challenge template
  ${CYAN}getChallenge${OFF};Retrieve a challenge
  ${CYAN}getChallengeActivities${OFF};List and search challenge activities
  ${CYAN}getChallengeActivity${OFF};Get a single challenge activity
  ${CYAN}getChallengeActivityTemplate${OFF};Get a single challenge activity template
  ${CYAN}getChallengeActivityTemplates${OFF};List and search challenge activity templates
  ${CYAN}getChallengeEvent${OFF};Retrieve a single challenge event details
  ${CYAN}getChallengeEvents${OFF};Retrieve a list of challenge events
  ${CYAN}getChallengeTemplate${OFF};Get a single challenge template
  ${CYAN}getChallengeTemplates${OFF};List and search challenge templates
  ${CYAN}getChallenges${OFF};Retrieve a list of challenges
  ${CYAN}updateChallenge${OFF};Update a challenge
  ${CYAN}updateChallengeActivity${OFF};Update a challenge activity
  ${CYAN}updateChallengeActivityTemplate${OFF};Update an challenge activity template
  ${CYAN}updateChallengeTemplate${OFF};Update a challenge template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[campaignsRewards]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createRewardSet${OFF};Create a reward set
  ${CYAN}deleteRewardSet${OFF};Delete a reward set
  ${CYAN}getRewardSet${OFF};Get a single reward set
  ${CYAN}getRewardSets${OFF};List and search reward sets
  ${CYAN}updateRewardSet${OFF};Update a reward set
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[categories]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createCategory${OFF};Create a new category
  ${CYAN}createCategoryTemplate${OFF};Create a category template
  ${CYAN}deleteCategory${OFF};Delete an existing category
  ${CYAN}deleteCategoryTemplate${OFF};Delete a category template
  ${CYAN}getCategories${OFF};List and search categories with optional filters
  ${CYAN}getCategory${OFF};Get a single category
  ${CYAN}getCategoryTemplate${OFF};Get a single category template
  ${CYAN}getCategoryTemplates${OFF};List and search category templates
  ${CYAN}getTags${OFF};List all trivia tags in the system
  ${CYAN}updateCategory${OFF};Update an existing category
  ${CYAN}updateCategoryTemplate${OFF};Update a category template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[configs]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createConfig${OFF};Create a new config
  ${CYAN}deleteConfig${OFF};Delete an existing config
  ${CYAN}getConfig${OFF};Get a single config
  ${CYAN}getConfigs${OFF};List and search configs
  ${CYAN}updateConfig${OFF};Update an existing config
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[contentArticles]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createArticle${OFF};Create a new article
  ${CYAN}createArticleTemplate${OFF};Create an article template
  ${CYAN}deleteArticle${OFF};Delete an existing article
  ${CYAN}deleteArticleTemplate${OFF};Delete an article template
  ${CYAN}getArticle${OFF};Get a single article
  ${CYAN}getArticleTemplate${OFF};Get a single article template
  ${CYAN}getArticleTemplates${OFF};List and search article templates
  ${CYAN}getArticles${OFF};List and search articles
  ${CYAN}updateArticle${OFF};Update an existing article
  ${CYAN}updateArticleTemplate${OFF};Update an article template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[contentComments]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addComment${OFF};Add a new comment
  ${CYAN}deleteComment${OFF};Delete a comment
  ${CYAN}getComment${OFF};Return a comment
  ${CYAN}getComments${OFF};Returns a page of comments
  ${CYAN}searchComments${OFF};Search the comment index
  ${CYAN}updateComment${OFF};Update a comment
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[contentPolls]${OFF}"
read -d '' ops <<EOF
  ${CYAN}answerPoll${OFF};Add your vote to a poll
  ${CYAN}createPoll${OFF};Create a new poll
  ${CYAN}createPollTemplate${OFF};Create a poll template
  ${CYAN}deletePoll${OFF};Delete an existing poll
  ${CYAN}deletePollTemplate${OFF};Delete a poll template
  ${CYAN}getPoll${OFF};Get a single poll
  ${CYAN}getPollAnswer${OFF};Get poll answer
  ${CYAN}getPollTemplate${OFF};Get a single poll template
  ${CYAN}getPollTemplates${OFF};List and search poll templates
  ${CYAN}getPolls${OFF};List and search polls
  ${CYAN}updatePoll${OFF};Update an existing poll
  ${CYAN}updatePollTemplate${OFF};Update a poll template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[currencies]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createCurrency${OFF};Create a currency
  ${CYAN}deleteCurrency${OFF};Delete a currency
  ${CYAN}getCurrencies${OFF};List and search currencies
  ${CYAN}getCurrency${OFF};Get a single currency
  ${CYAN}updateCurrency${OFF};Update a currency
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[devices]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addDeviceUsers${OFF};Add device users
  ${CYAN}createDevice${OFF};Create a device
  ${CYAN}deleteDevice${OFF};Delete a device
  ${CYAN}deleteDeviceUser${OFF};Delete a device user
  ${CYAN}deleteDeviceUsers${OFF};Delete all device users
  ${CYAN}getDevice${OFF};Get a single device
  ${CYAN}getDevices${OFF};List and search devices
  ${CYAN}updateDevice${OFF};Update a device
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[dispositions]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addDisposition${OFF};Add a new disposition
  ${CYAN}deleteDisposition${OFF};Delete a disposition
  ${CYAN}getDisposition${OFF};Returns a disposition
  ${CYAN}getDispositionCounts${OFF};Returns a list of disposition counts
  ${CYAN}getDispositions${OFF};Returns a page of dispositions
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[fulfillment]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createFulfillmentType${OFF};Create a fulfillment type
  ${CYAN}deleteFulfillmentType${OFF};Delete a fulfillment type
  ${CYAN}getFulfillmentType${OFF};Get a single fulfillment type
  ${CYAN}getFulfillmentTypes${OFF};List and search fulfillment types
  ${CYAN}updateFulfillmentType${OFF};Update a fulfillment type
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[gamificationAchievements]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createAchievement${OFF};Create a new achievement definition
  ${CYAN}createAchievementTemplate${OFF};Create an achievement template
  ${CYAN}deleteAchievement${OFF};Delete an achievement definition
  ${CYAN}deleteAchievementTemplate${OFF};Delete an achievement template
  ${CYAN}getAchievement${OFF};Get a single achievement definition
  ${CYAN}getAchievementTemplate${OFF};Get a single achievement template
  ${CYAN}getAchievementTemplates${OFF};List and search achievement templates
  ${CYAN}getAchievementTriggers${OFF};Get the list of triggers that can be used to trigger an achievement progress update
  ${CYAN}getAchievements${OFF};Get all achievement definitions in the system
  ${CYAN}getDerivedAchievements${OFF};Get a list of derived achievements
  ${CYAN}getUserAchievementProgress${OFF};Retrieve progress on a given achievement for a given user
  ${CYAN}getUserAchievementsProgress${OFF};Retrieve progress on achievements for a given user
  ${CYAN}getUsersAchievementProgress${OFF};Retrieve progress on a given achievement for all users
  ${CYAN}getUsersAchievementsProgress${OFF};Retrieve progress on achievements for all users
  ${CYAN}incrementAchievementProgress${OFF};Increment an achievement progress record for a user
  ${CYAN}setAchievementProgress${OFF};Set an achievement progress record for a user
  ${CYAN}updateAchievement${OFF};Update an achievement definition
  ${CYAN}updateAchievementTemplate${OFF};Update an achievement template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[gamificationLeaderboards]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getLeaderboard${OFF};Retrieves leaderboard details and paginated entries
  ${CYAN}getLeaderboardRank${OFF};Retrieves a specific user entry with rank
  ${CYAN}getLeaderboardStrategies${OFF};Get a list of available leaderboard strategy names
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[gamificationLeveling]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createLevel${OFF};Create a level schema
  ${CYAN}deleteLevel${OFF};Delete a level
  ${CYAN}getLevel${OFF};Retrieve a level
  ${CYAN}getLevelTriggers${OFF};Get the list of triggers that can be used to trigger a leveling progress update
  ${CYAN}getLevels${OFF};List and search levels
  ${CYAN}getUserLevel${OFF};Get a user's progress for a given level schema
  ${CYAN}getUserLevels${OFF};Get a user's progress for all level schemas
  ${CYAN}incrementProgress${OFF};Update or create a leveling progress record for a user
  ${CYAN}setProgress${OFF};Set leveling progress for a user
  ${CYAN}updateLevel${OFF};Update a level
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[gamificationMetrics]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addMetric${OFF};Add a metric
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[gamificationTrivia]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addQuestionAnswers${OFF};Add an answer to a question
  ${CYAN}addQuestionTag${OFF};Add a tag to a question
  ${CYAN}addTagToQuestionsBatch${OFF};Add a tag to a batch of questions
  ${CYAN}createImportJob${OFF};Create an import job
  ${CYAN}createQuestion${OFF};Create a question
  ${CYAN}createQuestionTemplate${OFF};Create a question template
  ${CYAN}deleteImportJob${OFF};Delete an import job
  ${CYAN}deleteQuestion${OFF};Delete a question
  ${CYAN}deleteQuestionAnswers${OFF};Remove an answer from a question
  ${CYAN}deleteQuestionTemplate${OFF};Delete a question template
  ${CYAN}getImportJob${OFF};Get an import job
  ${CYAN}getImportJobs${OFF};Get a list of import job
  ${CYAN}getQuestion${OFF};Get a single question
  ${CYAN}getQuestionAnswer${OFF};Get an answer for a question
  ${CYAN}getQuestionAnswers${OFF};List the answers available for a question
  ${CYAN}getQuestionDeltas${OFF};List question deltas in ascending order of updated date
  ${CYAN}getQuestionTags${OFF};List the tags for a question
  ${CYAN}getQuestionTemplate${OFF};Get a single question template
  ${CYAN}getQuestionTemplates${OFF};List and search question templates
  ${CYAN}getQuestions${OFF};List and search questions
  ${CYAN}getQuestionsCount${OFF};Count questions based on filters
  ${CYAN}processImportJob${OFF};Start processing an import job
  ${CYAN}removeQuestionTag${OFF};Remove a tag from a question
  ${CYAN}removeTagToQuestionsBatch${OFF};Remove a tag from a batch of questions
  ${CYAN}searchQuestionTags${OFF};List and search tags by the beginning of the string
  ${CYAN}updateImportJob${OFF};Update an import job
  ${CYAN}updateQuestion${OFF};Update a question
  ${CYAN}updateQuestionAnswer${OFF};Update an answer for a question
  ${CYAN}updateQuestionTemplate${OFF};Update a question template
  ${CYAN}updateQuestionsInBulk${OFF};Bulk update questions
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[invoices]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createInvoice${OFF};Create an invoice
  ${CYAN}getFulFillmentStatuses${OFF};Lists available fulfillment statuses
  ${CYAN}getInvoice${OFF};Retrieve an invoice
  ${CYAN}getInvoiceLogs${OFF};List invoice logs
  ${CYAN}getInvoices${OFF};Retrieve invoices
  ${CYAN}getPaymentStatuses${OFF};Lists available payment statuses
  ${CYAN}payInvoice${OFF};Pay an invoice using a saved payment method
  ${CYAN}setBundledInvoiceItemFulfillmentStatus${OFF};Set the fulfillment status of a bundled invoice item
  ${CYAN}setExternalRef${OFF};Set the external reference of an invoice
  ${CYAN}setInvoiceItemFulfillmentStatus${OFF};Set the fulfillment status of an invoice item
  ${CYAN}setOrderNotes${OFF};Set the order notes of an invoice
  ${CYAN}setPaymentStatus${OFF};Set the payment status of an invoice
  ${CYAN}updateBillingInfo${OFF};Set or update billing info
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[locations]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getCountries${OFF};Get a list of countries
  ${CYAN}getCountryByGeoLocation${OFF};Get the iso3 code of your country
  ${CYAN}getCountryStates${OFF};Get a list of a country's states
  ${CYAN}getCurrencyByGeoLocation${OFF};Get the currency information of your country
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[logs]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addUserLog${OFF};Add a user log entry
  ${CYAN}getBREEventLog${OFF};Get an existing BRE event log entry by id
  ${CYAN}getBREEventLogs${OFF};Returns a list of BRE event log entries
  ${CYAN}getBREForwardLog${OFF};Get an existing forward log entry by id
  ${CYAN}getBREForwardLogs${OFF};Returns a list of forward log entries
  ${CYAN}getUserLog${OFF};Returns a user log entry by id
  ${CYAN}getUserLogs${OFF};Returns a page of user logs entries
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[mediaArtists]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addArtist${OFF};Adds a new artist in the system
  ${CYAN}createArtistTemplate${OFF};Create an artist template
  ${CYAN}deleteArtist${OFF};Removes an artist from the system IF no resources are attached to it
  ${CYAN}deleteArtistTemplate${OFF};Delete an artist template
  ${CYAN}getArtist${OFF};Loads a specific artist details
  ${CYAN}getArtistTemplate${OFF};Get a single artist template
  ${CYAN}getArtistTemplates${OFF};List and search artist templates
  ${CYAN}getArtists${OFF};Search for artists
  ${CYAN}updateArtist${OFF};Modifies an artist details
  ${CYAN}updateArtistTemplate${OFF};Update an artist template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[mediaModeration]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getModerationReport${OFF};Get a flag report
  ${CYAN}getModerationReports${OFF};Returns a page of flag reports
  ${CYAN}updateModerationReport${OFF};Update a flag report
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[mediaVideos]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addUserToVideoWhitelist${OFF};Adds a user to a video's whitelist
  ${CYAN}addVideo${OFF};Adds a new video in the system
  ${CYAN}addVideoComment${OFF};Add a new video comment
  ${CYAN}addVideoContributor${OFF};Adds a contributor to a video
  ${CYAN}addVideoFlag${OFF};Add a new flag
  ${CYAN}addVideoRelationships${OFF};Adds one or more existing videos as related to this one
  ${CYAN}createVideoDisposition${OFF};Create a video disposition
  ${CYAN}deleteVideo${OFF};Deletes a video from the system if no resources are attached to it
  ${CYAN}deleteVideoComment${OFF};Delete a video comment
  ${CYAN}deleteVideoDisposition${OFF};Delete a video disposition
  ${CYAN}deleteVideoFlag${OFF};Delete a flag
  ${CYAN}deleteVideoRelationship${OFF};Delete a video's relationship
  ${CYAN}getUserVideos${OFF};Get user videos
  ${CYAN}getVideo${OFF};Loads a specific video details
  ${CYAN}getVideoComments${OFF};Returns a page of comments for a video
  ${CYAN}getVideoDispositions${OFF};Returns a page of dispositions for a video
  ${CYAN}getVideoRelationships${OFF};Returns a page of video relationships
  ${CYAN}getVideos${OFF};Search videos using the documented filters
  ${CYAN}removeUserFromVideoWhitelist${OFF};Removes a user from a video's whitelist
  ${CYAN}removeVideoContributor${OFF};Removes a contributor from a video
  ${CYAN}updateVideo${OFF};Modifies a video's details
  ${CYAN}updateVideoComment${OFF};Update a video comment
  ${CYAN}updateVideoRelationship${OFF};Update a video's relationship details
  ${CYAN}viewVideo${OFF};Increment a video's view count
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[messaging]${OFF}"
read -d '' ops <<EOF
  ${CYAN}sendRawEmail${OFF};Send a raw email to one or more users
  ${CYAN}sendRawSMS${OFF};Send a raw SMS
  ${CYAN}sendTemplatedEmail${OFF};Send a templated email to one or more users
  ${CYAN}sendTemplatedSMS${OFF};Send a new templated SMS
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[payments]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createPaymentMethod${OFF};Create a new payment method for a user
  ${CYAN}deletePaymentMethod${OFF};Delete an existing payment method for a user
  ${CYAN}getPaymentMethod${OFF};Get a single payment method for a user
  ${CYAN}getPaymentMethods${OFF};Get all payment methods for a user
  ${CYAN}paymentAuthorization${OFF};Authorize payment of an invoice for later capture
  ${CYAN}paymentCapture${OFF};Capture an existing invoice payment authorization
  ${CYAN}updatePaymentMethod${OFF};Update an existing payment method for a user
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[paymentsApple]${OFF}"
read -d '' ops <<EOF
  ${CYAN}verifyAppleReceipt${OFF};Pay invoice with Apple receipt
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[paymentsFattMerchant]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createOrUpdateFattMerchantPaymentMethod${OFF};Create or update a FattMerchant payment method for a user
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[paymentsGoogle]${OFF}"
read -d '' ops <<EOF
  ${CYAN}handleGooglePayment${OFF};Mark an invoice paid with Google
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[paymentsOptimal]${OFF}"
read -d '' ops <<EOF
  ${CYAN}silentPostOptimal${OFF};Initiate silent post with Optimal
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[paymentsPayPalClassic]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createPayPalBillingAgreementUrl${OFF};Create a PayPal Classic billing agreement for the user
  ${CYAN}createPayPalExpressCheckout${OFF};Create a payment token for PayPal express checkout
  ${CYAN}finalizePayPalBillingAgreement${OFF};Finalizes a billing agreement after the user has accepted through PayPal
  ${CYAN}finalizePayPalCheckout${OFF};Finalizes a payment after the user has completed checkout with PayPal
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[paymentsStripe]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createStripePaymentMethod${OFF};Create a Stripe payment method for a user
  ${CYAN}payStripeInvoice${OFF};Pay with a single use token
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[paymentsTransactions]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getTransaction${OFF};Get the details for a single transaction
  ${CYAN}getTransactions${OFF};List and search transactions
  ${CYAN}refundTransaction${OFF};Refund a payment transaction, in full or in part
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[paymentsWallets]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getUserWallet${OFF};Returns the user's wallet for the given currency code
  ${CYAN}getUserWalletTransactions${OFF};Retrieve a user's wallet transactions
  ${CYAN}getUserWallets${OFF};List all of a user's wallets
  ${CYAN}getWalletBalances${OFF};Retrieves a summation of wallet balances by currency code
  ${CYAN}getWalletTransactions${OFF};Retrieve wallet transactions across the system
  ${CYAN}getWallets${OFF};Retrieve a list of wallets across the system
  ${CYAN}updateWalletBalance${OFF};Updates the balance for a user's wallet
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[paymentsXsolla]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createXsollaTokenUrl${OFF};Create a payment token that should be used to forward the user to Xsolla so they can complete payment
  ${CYAN}receiveXsollaNotification${OFF};Receives payment response from Xsolla
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[reportingChallenges]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getChallengeEventLeaderboard${OFF};Retrieve a challenge event leaderboard details
  ${CYAN}getChallengeEventParticipants${OFF};Retrieve a challenge event participant details
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[reportingOrders]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getInvoiceReports${OFF};Retrieve invoice counts aggregated by time ranges
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[reportingRevenue]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getItemRevenue${OFF};Get item revenue info
  ${CYAN}getRefundRevenue${OFF};Get refund revenue info
  ${CYAN}getRevenueByCountry${OFF};Get revenue info by country
  ${CYAN}getRevenueByItem${OFF};Get revenue info by item
  ${CYAN}getSubscriptionRevenue${OFF};Get subscription revenue info
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[reportingSubscriptions]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getSubscriptionReports${OFF};Get a list of available subscription reports in most recent first order
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[reportingUsage]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getUsageByDay${OFF};Returns aggregated endpoint usage information by day
  ${CYAN}getUsageByHour${OFF};Returns aggregated endpoint usage information by hour
  ${CYAN}getUsageByMinute${OFF};Returns aggregated endpoint usage information by minute
  ${CYAN}getUsageByMonth${OFF};Returns aggregated endpoint usage information by month
  ${CYAN}getUsageByYear${OFF};Returns aggregated endpoint usage information by year
  ${CYAN}getUsageEndpoints${OFF};Returns list of endpoints called (method and url)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[reportingUsers]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getUserRegistrations${OFF};Get user registration info
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[search]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addSearchIndex${OFF};Add a new object to an index
  ${CYAN}addSearchMappings${OFF};Register reference mappings
  ${CYAN}deleteSearchIndex${OFF};Delete an object
  ${CYAN}deleteSearchIndexes${OFF};Delete all objects in an index
  ${CYAN}searchIndex${OFF};Search an index
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[socialFacebook]${OFF}"
read -d '' ops <<EOF
  ${CYAN}linkAccounts${OFF};Link facebook account
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[socialGoogle]${OFF}"
read -d '' ops <<EOF
  ${CYAN}linkAccounts1${OFF};Link google account
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[store]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createItemTemplate${OFF};Create an item template
  ${CYAN}createStoreItem${OFF};Create a store item
  ${CYAN}deleteItemTemplate${OFF};Delete an item template
  ${CYAN}deleteStoreItem${OFF};Delete a store item
  ${CYAN}getBehaviors${OFF};List available item behaviors
  ${CYAN}getItemTemplate${OFF};Get a single item template
  ${CYAN}getItemTemplates${OFF};List and search item templates
  ${CYAN}getStore${OFF};Get a listing of store items
  ${CYAN}getStoreItem${OFF};Get a single store item
  ${CYAN}getStoreItems${OFF};List and search store items
  ${CYAN}quickBuy${OFF};One-step purchase and pay for a single SKU item from a user's wallet
  ${CYAN}updateItemTemplate${OFF};Update an item template
  ${CYAN}updateStoreItem${OFF};Update a store item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[storeBundles]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createBundleItem${OFF};Create a bundle item
  ${CYAN}createBundleTemplate${OFF};Create a bundle template
  ${CYAN}deleteBundleItem${OFF};Delete a bundle item
  ${CYAN}deleteBundleTemplate${OFF};Delete a bundle template
  ${CYAN}getBundleItem${OFF};Get a single bundle item
  ${CYAN}getBundleTemplate${OFF};Get a single bundle template
  ${CYAN}getBundleTemplates${OFF};List and search bundle templates
  ${CYAN}updateBundleItem${OFF};Update a bundle item
  ${CYAN}updateBundleTemplate${OFF};Update a bundle template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[storeCoupons]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createCouponItem${OFF};Create a coupon item
  ${CYAN}createCouponTemplate${OFF};Create a coupon template
  ${CYAN}deleteCouponItem${OFF};Delete a coupon item
  ${CYAN}deleteCouponTemplate${OFF};Delete a coupon template
  ${CYAN}getCouponItem${OFF};Get a single coupon item
  ${CYAN}getCouponTemplate${OFF};Get a single coupon template
  ${CYAN}getCouponTemplates${OFF};List and search coupon templates
  ${CYAN}updateCouponItem${OFF};Update a coupon item
  ${CYAN}updateCouponTemplate${OFF};Update a coupon template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[storeSales]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createCatalogSale${OFF};Create a sale
  ${CYAN}deleteCatalogSale${OFF};Delete a sale
  ${CYAN}getCatalogSale${OFF};Get a single sale
  ${CYAN}getCatalogSales${OFF};List and search sales
  ${CYAN}updateCatalogSale${OFF};Update a sale
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[storeShipping]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createShippingItem${OFF};Create a shipping item
  ${CYAN}createShippingTemplate${OFF};Create a shipping template
  ${CYAN}deleteShippingItem${OFF};Delete a shipping item
  ${CYAN}deleteShippingTemplate${OFF};Delete a shipping template
  ${CYAN}getShippingItem${OFF};Get a single shipping item
  ${CYAN}getShippingTemplate${OFF};Get a single shipping template
  ${CYAN}getShippingTemplates${OFF};List and search shipping templates
  ${CYAN}updateShippingItem${OFF};Update a shipping item
  ${CYAN}updateShippingTemplate${OFF};Update a shipping template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[storeShoppingCarts]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addCustomDiscount${OFF};Adds a custom discount to the cart
  ${CYAN}addDiscountToCart${OFF};Adds a discount coupon to the cart
  ${CYAN}addItemToCart${OFF};Add an item to the cart
  ${CYAN}createCart${OFF};Create a cart
  ${CYAN}getCart${OFF};Returns the cart with the given GUID
  ${CYAN}getCarts${OFF};Get a list of carts
  ${CYAN}getShippable${OFF};Returns whether a cart requires shipping
  ${CYAN}getShippingCountries${OFF};Get the list of available shipping countries per vendor
  ${CYAN}removeDiscountFromCart${OFF};Removes a discount coupon from the cart
  ${CYAN}setCartCurrency${OFF};Sets the currency to use for the cart
  ${CYAN}setCartOwner${OFF};Sets the owner of a cart if none is set already
  ${CYAN}updateItemInCart${OFF};Changes the quantity of an item already in the cart
  ${CYAN}updateShippingAddress${OFF};Modifies or sets the order shipping address
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[storeSubscriptions]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createSubscription${OFF};Creates a subscription item and associated plans
  ${CYAN}createSubscriptionTemplate${OFF};Create a subscription template
  ${CYAN}deleteSubscription${OFF};Delete a subscription plan
  ${CYAN}deleteSubscriptionTemplate${OFF};Delete a subscription template
  ${CYAN}getSubscription${OFF};Retrieve a single subscription item and associated plans
  ${CYAN}getSubscriptionTemplate${OFF};Get a single subscription template
  ${CYAN}getSubscriptionTemplates${OFF};List and search subscription templates
  ${CYAN}getSubscriptions${OFF};List available subscription items and associated plans
  ${CYAN}processSubscriptions${OFF};Processes subscriptions and charge dues
  ${CYAN}updateSubscription${OFF};Updates a subscription item and associated plans
  ${CYAN}updateSubscriptionTemplate${OFF};Update a subscription template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[storeVendors]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createVendor${OFF};Create a vendor
  ${CYAN}createVendorTemplate${OFF};Create a vendor template
  ${CYAN}deleteVendor${OFF};Delete a vendor
  ${CYAN}deleteVendorTemplate${OFF};Delete a vendor template
  ${CYAN}getVendor${OFF};Get a single vendor
  ${CYAN}getVendorTemplate${OFF};Get a single vendor template
  ${CYAN}getVendorTemplates${OFF};List and search vendor templates
  ${CYAN}getVendors${OFF};List and search vendors
  ${CYAN}updateVendor${OFF};Update a vendor
  ${CYAN}updateVendorTemplate${OFF};Update a vendor template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[taxes]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createCountryTax${OFF};Create a country tax
  ${CYAN}createStateTax${OFF};Create a state tax
  ${CYAN}deleteCountryTax${OFF};Delete an existing tax
  ${CYAN}deleteStateTax${OFF};Delete an existing state tax
  ${CYAN}getCountryTax${OFF};Get a single tax
  ${CYAN}getCountryTaxes${OFF};List and search taxes
  ${CYAN}getStateTax${OFF};Get a single state tax
  ${CYAN}getStateTaxesForCountries${OFF};List and search taxes across all countries
  ${CYAN}getStateTaxesForCountry${OFF};List and search taxes within a country
  ${CYAN}updateCountryTax${OFF};Create or update a tax
  ${CYAN}updateStateTax${OFF};Create or update a state tax
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[templatesProperties]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getTemplatePropertyType${OFF};Get details for a template property type
  ${CYAN}getTemplatePropertyTypes${OFF};List template property types
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[users]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addUserTag${OFF};Add a tag to a user
  ${CYAN}createUserTemplate${OFF};Create a user template
  ${CYAN}deleteUserTemplate${OFF};Delete a user template
  ${CYAN}getUser${OFF};Get a single user
  ${CYAN}getUserTags${OFF};List tags for a user
  ${CYAN}getUserTemplate${OFF};Get a single user template
  ${CYAN}getUserTemplates${OFF};List and search user templates
  ${CYAN}getUsers${OFF};List and search users
  ${CYAN}passwordReset${OFF};Choose a new password after a reset
  ${CYAN}registerUser${OFF};Register a new user
  ${CYAN}removeUserTag${OFF};Remove a tag from a user
  ${CYAN}setPassword${OFF};Set a user's password
  ${CYAN}startPasswordReset${OFF};Reset a user's password
  ${CYAN}submitPasswordReset${OFF};Reset a user's password without user id
  ${CYAN}updateUser${OFF};Update a user
  ${CYAN}updateUserTemplate${OFF};Update a user template
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[usersAddresses]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createAddress${OFF};Create a new address
  ${CYAN}deleteAddress${OFF};Delete an address
  ${CYAN}getAddress${OFF};Get a single address
  ${CYAN}getAddresses${OFF};List and search addresses
  ${CYAN}updateAddress${OFF};Update an address
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[usersFriendships]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addFriend${OFF};Add a friend
  ${CYAN}getFriends${OFF};Get friends list
  ${CYAN}getInviteToken${OFF};Returns the invite token
  ${CYAN}getInvites${OFF};Get pending invites
  ${CYAN}redeemFriendshipToken${OFF};Redeem friendship token
  ${CYAN}removeOrDeclineFriend${OFF};Remove or decline a friend
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[usersGroups]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addMemberToGroup${OFF};Adds a new member to the group
  ${CYAN}addMembersToGroup${OFF};Adds multiple members to the group
  ${CYAN}createGroup${OFF};Create a group
  ${CYAN}createGroupTemplate${OFF};Create a group template
  ${CYAN}deleteGroup${OFF};Removes a group from the system IF no resources are attached to it
  ${CYAN}deleteGroupTemplate${OFF};Delete a group template
  ${CYAN}getGroup${OFF};Loads a specific group's details
  ${CYAN}getGroupMember${OFF};Get a user from a group
  ${CYAN}getGroupMembers${OFF};Lists members of the group
  ${CYAN}getGroupTemplate${OFF};Get a single group template
  ${CYAN}getGroupTemplates${OFF};List and search group templates
  ${CYAN}getGroupsForUser${OFF};List groups a user is in
  ${CYAN}removeGroupMember${OFF};Removes a user from a group
  ${CYAN}updateGroup${OFF};Update a group
  ${CYAN}updateGroupMemberStatus${OFF};Change a user's status
  ${CYAN}updateGroupTemplate${OFF};Update a group template
  ${CYAN}updateGroups${OFF};List and search groups
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[usersInventory]${OFF}"
read -d '' ops <<EOF
  ${CYAN}addItemToUserInventory${OFF};Adds an item to the user inventory
  ${CYAN}checkUserEntitlementItem${OFF};Check for access to an item without consuming
  ${CYAN}createEntitlementItem${OFF};Create an entitlement item
  ${CYAN}createEntitlementTemplate${OFF};Create an entitlement template
  ${CYAN}deleteEntitlementItem${OFF};Delete an entitlement item
  ${CYAN}deleteEntitlementTemplate${OFF};Delete an entitlement template
  ${CYAN}getEntitlementItem${OFF};Get a single entitlement item
  ${CYAN}getEntitlementItems${OFF};List and search entitlement items
  ${CYAN}getEntitlementTemplate${OFF};Get a single entitlement template
  ${CYAN}getEntitlementTemplates${OFF};List and search entitlement templates
  ${CYAN}getUserInventories${OFF};List the user inventory entries for a given user
  ${CYAN}getUserInventory${OFF};Get an inventory entry
  ${CYAN}getUserInventoryLog${OFF};List the log entries for this inventory entry
  ${CYAN}getUsersInventory${OFF};List the user inventory entries for all users
  ${CYAN}grantUserEntitlement${OFF};Grant an entitlement
  ${CYAN}updateEntitlementItem${OFF};Update an entitlement item
  ${CYAN}updateEntitlementTemplate${OFF};Update an entitlement template
  ${CYAN}updateUserInventoryBehaviorData${OFF};Set the behavior data for an inventory entry
  ${CYAN}updateUserInventoryExpires${OFF};Set the expiration date
  ${CYAN}updateUserInventoryStatus${OFF};Set the status for an inventory entry
  ${CYAN}useUserEntitlementItem${OFF};Use an item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[usersRelationships]${OFF}"
read -d '' ops <<EOF
  ${CYAN}createUserRelationship${OFF};Create a user relationship
  ${CYAN}deleteUserRelationship${OFF};Delete a user relationship
  ${CYAN}getUserRelationship${OFF};Get a user relationship
  ${CYAN}getUserRelationships${OFF};Get a list of user relationships
  ${CYAN}updateUserRelationship${OFF};Update a user relationship
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[usersSubscriptions]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getUserSubscriptionDetails${OFF};Get details about a user's subscription
  ${CYAN}getUsersSubscriptionDetails${OFF};Get details about a user's subscriptions
  ${CYAN}reactivateUserSubscription${OFF};Reactivate a subscription and charge fee
  ${CYAN}setSubscriptionBillDate${OFF};Set a new date to bill a subscription on
  ${CYAN}setSubscriptionPaymentMethod${OFF};Set the payment method to use for a subscription
  ${CYAN}setSubscriptionStatus${OFF};Set the status of a subscription
  ${CYAN}setUserSubscriptionPlan${OFF};Set a new subscription plan for a user
  ${CYAN}setUserSubscriptionPrice${OFF};Set a new subscription price for a user
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[utilBatch]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getBatch${OFF};Get batch result with token
  ${CYAN}sendBatch${OFF};Request to run API call given the method, content type, path url, and body of request
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[utilHealth]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getHealth${OFF};Get health info
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[utilMaintenance]${OFF}"
read -d '' ops <<EOF
  ${CYAN}deleteMaintenance${OFF};Delete maintenance info
  ${CYAN}getMaintenance${OFF};Get current maintenance info
  ${CYAN}setMaintenance${OFF};Set current maintenance info
  ${CYAN}updateMaintenance${OFF};Update current maintenance info
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[utilSecurity]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getUserLocationLog${OFF};Returns the authentication log for a user
  ${CYAN}getUserTokenDetails${OFF};Returns the authentication token details. Use /users endpoint for detailed user's info
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[utilVersion]${OFF}"
read -d '' ops <<EOF
  ${CYAN}getVersion${OFF};Get current version info
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}Options${OFF}"
    echo -e "  -h,--help\t\t\t\tPrint this help"
    echo -e "  -V,--version\t\t\t\tPrint API version"
    echo -e "  --about\t\t\t\tPrint the information about service"
    echo -e "  --host ${CYAN}<url>${OFF}\t\t\t\tSpecify the host URL "
echo -e "              \t\t\t\t(e.g. 'https://sandbox.knetikcloud.com')"

    echo -e "  --force\t\t\t\tForce command invocation in spite of missing"
    echo -e "         \t\t\t\trequired parameters or wrong content type"
    echo -e "  --dry-run\t\t\t\tPrint out the cURL command without"
    echo -e "           \t\t\t\texecuting it"
    echo -e "  -nc,--no-colors\t\t\tEnforce print without colors, otherwise autodected"
    echo -e "  -ac,--accept ${YELLOW}<mime-type>${OFF}\t\tSet the 'Accept' header in the request"
    echo -e "  -ct,--content-type ${YELLOW}<mime-type>${OFF}\tSet the 'Content-type' header in "
    echo -e "                                \tthe request"
    echo ""
}


##############################################################################
#
# Print REST service description
#
##############################################################################
print_about() {
    echo ""
    echo -e "${BOLD}${WHITE}Knetik Platform API Documentation latest command line client (API version latest
)${OFF}"
    echo ""
    echo -e "License: "
    echo -e "Contact: support@knetik.com"
    echo ""
read -d '' appdescription <<EOF

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
EOF
echo "$appdescription" | paste -sd' ' | fold -sw 80
}


##############################################################################
#
# Print REST api version
#
##############################################################################
print_version() {
    echo ""
    echo -e "${BOLD}Knetik Platform API Documentation latest command line client (API version latest
)${OFF}"
    echo ""
}

##############################################################################
#
# Print help for getOAuthToken operation
#
##############################################################################
print_getOAuthToken_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getOAuthToken - Get access token${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createActivity operation
#
##############################################################################
print_createActivity_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createActivity - Create an activity${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The activity resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createActivityOccurrence operation
#
##############################################################################
print_createActivityOccurrence_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createActivityOccurrence - Create a new activity occurrence. Ex: start a game${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Has to enforce extra rules if not used as an admin" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}test${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings${YELLOW} Specify as: test=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The activity occurrence object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Sucessful creation${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Attempted to set an admin only field (no 'result' returned), or missing an entitlement/wallet balance (result is an array of ActivityOccurrenceJoinResult explaining which users had what problems)${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createActivityTemplate operation
#
##############################################################################
print_createActivityTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createActivityTemplate - Create a activity template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Activity Templates define a type of activity and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The activity template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteActivity operation
#
##############################################################################
print_deleteActivity_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteActivity - Delete an activity${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the activity ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteActivityTemplate operation
#
##############################################################################
print_deleteActivityTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteActivityTemplate - Delete a activity template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getActivities operation
#
##############################################################################
print_getActivities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getActivities - List activity definitions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_template${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for activities that are templates, or specifically not if false${YELLOW} Specify as: filter_template=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for activities that have a name starting with specified string${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_id${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for activities with an id in the given comma separated list of ids${YELLOW} Specify as: filter_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getActivity operation
#
##############################################################################
print_getActivity_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getActivity - Get a single activity${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the activity ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getActivityTemplate operation
#
##############################################################################
print_getActivityTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getActivityTemplate - Get a single activity template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getActivityTemplates operation
#
##############################################################################
print_getActivityTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getActivityTemplates - List and search activity templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setActivityOccurrenceResults operation
#
##############################################################################
print_setActivityOccurrenceResults_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setActivityOccurrenceResults - Sets the status of an activity occurrence to FINISHED and logs metrics${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}activity_occurrence_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the activity occurrence ${YELLOW}Specify as: activity_occurrence_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The activity occurrence object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateActivity operation
#
##############################################################################
print_updateActivity_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateActivity - Update an activity${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the activity ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The activity resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateActivityOccurrence operation
#
##############################################################################
print_updateActivityOccurrence_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateActivityOccurrence - Updated the status of an activity occurrence${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If setting to 'FINISHED' you must POST to /results instead to record the metrics and get synchronous reward results" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}activity_occurrence_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the activity occurrence ${YELLOW}Specify as: activity_occurrence_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The activity occurrence status object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateActivityTemplate operation
#
##############################################################################
print_updateActivityTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateActivityTemplate - Update an activity template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The activity template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getDownloadURL operation
#
##############################################################################
print_getDownloadURL_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getDownloadURL - Get a temporary signed S3 URL for download${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "To give access to files in your own S3 account, you will need to grant KnetikcCloud access to the file by adjusting your bucket policy accordingly. See S3 documentation for details." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}bucket${OFF} ${BLUE}[String]${OFF}${OFF} - S3 bucket name${YELLOW} Specify as: bucket=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}path${OFF} ${BLUE}[String]${OFF}${OFF} - The path to the file relative the bucket (the s3 object key)${YELLOW} Specify as: path=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}expiration${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 60)${OFF} - The number of seconds this URL will be valid. Default to 60${YELLOW} Specify as: expiration=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getSignedS3URL operation
#
##############################################################################
print_getSignedS3URL_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getSignedS3URL - Get a signed S3 URL for upload${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Requires the file name and file content type (i.e., 'video/mpeg'). Make a PUT to the resulting url to upload the file and use the cdn_url to retrieve it after." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filename${OFF} ${BLUE}[String]${OFF}${OFF} - The file name${YELLOW} Specify as: filename=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}content_type${OFF} ${BLUE}[String]${OFF}${OFF} - The content type${YELLOW} Specify as: content_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createClient operation
#
##############################################################################
print_createClient_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createClient - Create a new client${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The client resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteClient operation
#
##############################################################################
print_deleteClient_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteClient - Delete a client${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}client_key${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The key of the client ${YELLOW}Specify as: client_key=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getClient operation
#
##############################################################################
print_getClient_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getClient - Get a single client${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}client_key${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The key of the client ${YELLOW}Specify as: client_key=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getClientGrantTypes operation
#
##############################################################################
print_getClientGrantTypes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getClientGrantTypes - List available client grant types${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getClients operation
#
##############################################################################
print_getClients_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getClients - List and search clients${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setClientGrantTypes operation
#
##############################################################################
print_setClientGrantTypes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setClientGrantTypes - Set grant types for a client${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}client_key${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The key of the client ${YELLOW}Specify as: client_key=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - A list of unique grant types" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setClientRedirectUris operation
#
##############################################################################
print_setClientRedirectUris_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setClientRedirectUris - Set redirect uris for a client${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}client_key${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The key of the client ${YELLOW}Specify as: client_key=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - A list of unique redirect uris" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateClient operation
#
##############################################################################
print_updateClient_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateClient - Update a client${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}client_key${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The key of the client ${YELLOW}Specify as: client_key=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The client resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createPermission operation
#
##############################################################################
print_createPermission_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createPermission - Create a new permission${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The permission resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deletePermission operation
#
##############################################################################
print_deletePermission_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deletePermission - Delete a permission${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}permission${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The permission value ${YELLOW}Specify as: permission=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}force${OFF} ${BLUE}[Boolean]${OFF}${OFF} - If true, removes permission assigned to roles${YELLOW} Specify as: force=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPermission operation
#
##############################################################################
print_getPermission_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPermission - Get a single permission${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}permission${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The permission value ${YELLOW}Specify as: permission=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPermissions operation
#
##############################################################################
print_getPermissions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPermissions - List and search permissions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: permission:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updatePermission operation
#
##############################################################################
print_updatePermission_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updatePermission - Update a permission${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}permission${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The permission value ${YELLOW}Specify as: permission=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The permission resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createRole operation
#
##############################################################################
print_createRole_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createRole - Create a new role${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The role resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteRole operation
#
##############################################################################
print_deleteRole_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteRole - Delete a role${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}role${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The role value ${YELLOW}Specify as: role=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}force${OFF} ${BLUE}[Boolean]${OFF}${OFF} - If true, removes role from users/clients${YELLOW} Specify as: force=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getClientRoles operation
#
##############################################################################
print_getClientRoles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getClientRoles - Get roles for a client${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}client_key${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The client key ${YELLOW}Specify as: client_key=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getRole operation
#
##############################################################################
print_getRole_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getRole - Get a single role${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}role${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The role value ${YELLOW}Specify as: role=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getRoles operation
#
##############################################################################
print_getRoles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getRoles - List and search roles${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for roles that have a name starting with specified string${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_role${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for roles that have a role starting with specified string${YELLOW} Specify as: filter_role=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserRoles operation
#
##############################################################################
print_getUserRoles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserRoles - Get roles for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The user's id ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setClientRoles operation
#
##############################################################################
print_setClientRoles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setClientRoles - Set roles for a client${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}client_key${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The client key ${YELLOW}Specify as: client_key=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The list of unique roles" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setPermissionsForRole operation
#
##############################################################################
print_setPermissionsForRole_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setPermissionsForRole - Set permissions for a role${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}role${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The role value ${YELLOW}Specify as: role=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The list of unique permissions" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setUserRoles operation
#
##############################################################################
print_setUserRoles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setUserRoles - Set roles for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The user's id ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The list of unique roles" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateRole operation
#
##############################################################################
print_updateRole_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateRole - Update a role${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}role${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The role value ${YELLOW}Specify as: role=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The role resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteTokens operation
#
##############################################################################
print_deleteTokens_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteTokens - Delete tokens by username, client id, or both${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}username${OFF} ${BLUE}[String]${OFF}${OFF} - The username of the user${YELLOW} Specify as: username=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}client_id${OFF} ${BLUE}[String]${OFF}${OFF} - The id of the client${YELLOW} Specify as: client_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getToken operation
#
##############################################################################
print_getToken_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getToken - Get a single token by username and client id${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}username${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The username of the user ${YELLOW}Specify as: username=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}client_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the client ${YELLOW}Specify as: client_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getTokens operation
#
##############################################################################
print_getTokens_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getTokens - List usernames and client ids${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Token value not shown" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_client_id${OFF} ${BLUE}[String]${OFF}${OFF} - Filters for token whose client id matches provided string${YELLOW} Specify as: filter_client_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_username${OFF} ${BLUE}[String]${OFF}${OFF} - Filters for token whose username matches provided string${YELLOW} Specify as: filter_username=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBREActions operation
#
##############################################################################
print_getBREActions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBREActions - Get a list of available actions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_category${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for actions that are within a specific category${YELLOW} Specify as: filter_category=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for actions that have names containing the given string${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tags${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for actions that have all of the given tags (comma separated list)${YELLOW} Specify as: filter_tags=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_search${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for actions containing the given words somewhere within name, description and tags${YELLOW} Specify as: filter_search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createBRECategoryTemplate operation
#
##############################################################################
print_createBRECategoryTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createBRECategoryTemplate - Create a BRE category template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Templates define a type of BRE category and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The category template to create" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteBRECategoryTemplate operation
#
##############################################################################
print_deleteBRECategoryTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteBRECategoryTemplate - Delete a BRE category template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBRECategories operation
#
##############################################################################
print_getBRECategories_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBRECategories - List categories${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBRECategory operation
#
##############################################################################
print_getBRECategory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBRECategory - Get a single category${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The category name ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBRECategoryTemplate operation
#
##############################################################################
print_getBRECategoryTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBRECategoryTemplate - Get a single BRE category template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBRECategoryTemplates operation
#
##############################################################################
print_getBRECategoryTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBRECategoryTemplates - List and search BRE category templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateBRECategory operation
#
##############################################################################
print_updateBRECategory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateBRECategory - Update a category${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The category name ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The updated BRE category information" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateBRECategoryTemplate operation
#
##############################################################################
print_updateBRECategoryTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateBRECategoryTemplate - Update a BRE category template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The updated category template definition" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for sendBREEvent operation
#
##############################################################################
print_sendBREEvent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}sendBREEvent - Fire a new event, based on an existing trigger${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Parameters within the event must match names and types from the trigger. Actual rule execution is asynchornous.  Returns request id, which will be used as the event id" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The BRE event object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBREExpressions operation
#
##############################################################################
print_getBREExpressions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBREExpressions - Get a list of 'lookup' type expressions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "These are expression types that take a second expression as input and produce a value. These can be used in addition to the standard types, like parameter, global and constant (see BRE documentation for details)." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createBREGlobal operation
#
##############################################################################
print_createBREGlobal_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createBREGlobal - Create a global definition${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Once created you can then use in a custom rule. Note that global definitions cannot be modified or deleted if in use." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The BRE global resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteBREGlobal operation
#
##############################################################################
print_deleteBREGlobal_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteBREGlobal - Delete a global${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "May fail if there are existing rules against it. Cannot delete core globals" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the global definition ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBREGlobal operation
#
##############################################################################
print_getBREGlobal_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBREGlobal - Get a single global definition${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the global definition ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBREGlobals operation
#
##############################################################################
print_getBREGlobals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBREGlobals - List global definitions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_system${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for globals that are system globals when true, or not when false. Leave off for both mixed${YELLOW} Specify as: filter_system=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateBREGlobal operation
#
##############################################################################
print_updateBREGlobal_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateBREGlobal - Update a global definition${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "May fail if new parameters mismatch requirements of existing rules. Cannot update core globals" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the global definition ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The BRE global resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createBRERule operation
#
##############################################################################
print_createBRERule_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createBRERule - Create a rule${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Rules define which actions to run when a given event verifies the specified conditions. Conditions and actions are defined by binding event or context parameters to arguments. Conditions also known as Predicates are logical expressions that result in a boolean. Operators are used to describe rules between arguments to form that condition. There are 3 families of operators: Boolean, Math and String. Math and String operators are functions that transform arguments into numbers or strings...<h1>Boolean Operators</h1><br /><br />1 arg:<br />======<br /><br /><ul>	<li>IS_NULL</li>	<li>IS_NOT_NULL</li>	<li>STRING_IS_EMPTY</li>	<li>NOT </li>	<li>MAP_IS_EMPTY</li></ul><br />2 args:<br />=======<br /><br /><ul>	<li>EQ</li>	<li>NE (Not Equals)</li>	<li>GT (Greater Than)</li>	<li>GOE (Greater Or Equals)</li>	<li>LT (Lesser Than)</li>	<li>LOE (Lesser Or Equals)</li>	<li>OR</li>	<li>AND</li>	<li>XNOR</li>	<li>XOR</li>	<li>CONTAINS_KEY (for maps only)</li>	<li>CONTAINS_VALUE (for maps only)</li>	<li>MATCHES (regex)</li>	<li>MATCHES_IC (regex ignore case)</li>	<li>STARTS_WITH</li>	<li>STARTS_WITH_IC</li>	<li>EQ_IGNORE_CASE</li>	<li>ENDS_WITH</li>	<li>ENDS_WITH_IC</li>	<li>STRING_CONTAINS</li>	<li>STRING_CONTAINS_IC</li>	<li>LIKE (SQL like)</li></ul><br />3 args exceptions:<br />=================<br /><br /><ul>	<li>BETWEEN</li></ul><br />n args:<br />=======<br /><br /><ul>	<li>IN</li>	<li>NOT_INT</li></ul><h1>Math Operators</h1>1 arg:<br />=====<br /><br /><ul>	<li>NEGATE</li>	<li>MAP_SIZE</li>	<li>STRING_LENGTH</li> <li>CEIL</li> <li>ABS</li> <li>FLOOR</li> <li>ROUND</li> <li>RANDOM (no arg)</li> <li>RANDOM2 (seed arg)</li> <li>NUMCAST</li> <li>HOUR</li> <li>MINUTE</li> <li>SECOND</li> <li>MILLISECOND</li> <li>YEAR</li> <li>WEEK</li> <li>YEAR_MONTH</li> <li>YEAR_WEEK</li> <li>DAY_OF_WEEK</li> <li>DAY_OF_MONTH</li> <li>DAY_OF_YEAR</li> <li>WEEK</li> <li>WEEK</li> <li>WEEK</li></ul><br /><br />2 args:<br />======<br /><br /><ul> <li>ADD</li> <li>DIV</li> <li>MULT</li> <li>SUB</li> <li>POWER</li> <li>MOD</li> <li>LOCATE (index of (string, char))</li> <li>DIFF_YEARS</li> <li>DIFF_MONTHS</li> <li>DIFF_WEEKS</li> <li>DIFF_DAYS</li> <li>DIFF_HOURS</li> <li>DIFF_MINUTES</li> <li>DIFF_SECONDS</li></ul><br /><br />2 args:<br />======<br /><br /><ul>	<li>MIN</li>	<li>MAX</li></ul><h1>String Operators</h1>0 arg:<br />=====<br /><br /><ul>	<li>CURRENT_TIME</li></ul><br /><br />1 arg:<br />=====<br /><br /><ul>	<li>CURRENT_TIME</li>	<li>LOWER</li>	<li>UPPER</li>	<li>TRIM</li>	<li>STRING_CAST</li></ul><br /><br />2 args:<br />=====<br /><br /><ul>	<li>CHAR_AT</li>	<li>SUBSTR_1ARG (substr(string, start))</li>	<li>CONCAT</li>	<li>TRIM</li>	<li>STRING_CAST</li></ul><br /><br />3 args:<br />=====<br /><br /><ul>	<li>SUBSTR_2ARGS (substr(string, start, length))</li></ul>" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The BRE rule object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteBRERule operation
#
##############################################################################
print_deleteBRERule_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteBRERule - Delete a rule${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "May fail if there are existing rules against it. Cannot delete core rules" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the rule ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBREExpressionAsString operation
#
##############################################################################
print_getBREExpressionAsString_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBREExpressionAsString - Returns a string representation of the provided expression${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The expression" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBRERule operation
#
##############################################################################
print_getBRERule_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBRERule - Get a single rule${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the rule ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBRERules operation
#
##############################################################################
print_getBRERules_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBRERules - List rules${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for rules containing the given name${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_enabled${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: null)${OFF} - Filter for rules by active status, null for both${YELLOW} Specify as: filter_enabled=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_system${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for rules that are system rules when true, or not when false. Leave off for both mixed${YELLOW} Specify as: filter_system=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_trigger${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for rules that are for the trigger with the given name${YELLOW} Specify as: filter_trigger=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_action${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for rules that use the action with the given name${YELLOW} Specify as: filter_action=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_condition${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for rules that have a condition containing the given string${YELLOW} Specify as: filter_condition=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setBRERule operation
#
##############################################################################
print_setBRERule_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setBRERule - Enable or disable a rule${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "This is helpful for turning off systems rules which cannot be deleted or modified otherwise" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the rule ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The boolean value" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateBRERule operation
#
##############################################################################
print_updateBRERule_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateBRERule - Update a rule${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Cannot update system rules" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the rule ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The BRE rule object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createBRETrigger operation
#
##############################################################################
print_createBRETrigger_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createBRETrigger - Create a trigger${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The BRE trigger resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteBRETrigger operation
#
##############################################################################
print_deleteBRETrigger_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteBRETrigger - Delete a trigger${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "May fail if there are existing rules against it. Cannot delete core triggers" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}event_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The trigger event name ${YELLOW}Specify as: event_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBRETrigger operation
#
##############################################################################
print_getBRETrigger_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBRETrigger - Get a single trigger${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}event_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The trigger event name ${YELLOW}Specify as: event_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBRETriggers operation
#
##############################################################################
print_getBRETriggers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBRETriggers - List triggers${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_system${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed${YELLOW} Specify as: filter_system=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_category${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for triggers that are within a specific category${YELLOW} Specify as: filter_category=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tags${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for triggers that have all of the given tags (comma separated list)${YELLOW} Specify as: filter_tags=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for triggers that have names containing the given string${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_search${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for triggers containing the given words somewhere within name, description and tags${YELLOW} Specify as: filter_search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateBRETrigger operation
#
##############################################################################
print_updateBRETrigger_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateBRETrigger - Update a trigger${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}event_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The trigger event name ${YELLOW}Specify as: event_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The BRE trigger resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBREVariableTypes operation
#
##############################################################################
print_getBREVariableTypes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBREVariableTypes - Get a list of variable types available${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Types include integer, string, user and invoice. These are used to qualify trigger parameters and action variables with strong typing." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBREVariableValues operation
#
##############################################################################
print_getBREVariableValues_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBREVariableValues - List valid values for a type${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Used to lookup users to fill in a user constant for example. Only types marked as enumerable are suppoorted here." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The name of the type ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter results by those with names starting with this string${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addChallengeToCampaign operation
#
##############################################################################
print_addChallengeToCampaign_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addChallengeToCampaign - Add a challenge to a campaign${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the campaign ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The id of the challenge" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createCampaign operation
#
##############################################################################
print_createCampaign_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createCampaign - Create a campaign${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The campaign resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createCampaignTemplate operation
#
##############################################################################
print_createCampaignTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createCampaignTemplate - Create a campaign template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Campaign Templates define a type of campaign and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The campaign template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteCampaign operation
#
##############################################################################
print_deleteCampaign_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteCampaign - Delete a campaign${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The campaign id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteCampaignTemplate operation
#
##############################################################################
print_deleteCampaignTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteCampaignTemplate - Delete a campaign template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCampaign operation
#
##############################################################################
print_getCampaign_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCampaign - Returns a single campaign${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The campaign id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCampaignChallenges operation
#
##############################################################################
print_getCampaignChallenges_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCampaignChallenges - List the challenges associated with a campaign${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The campaign id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_start_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the challenge start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).${YELLOW} Specify as: filter_start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_end_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the challenge end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).${YELLOW} Specify as: filter_end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCampaignTemplate operation
#
##############################################################################
print_getCampaignTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCampaignTemplate - Get a single campaign template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCampaignTemplates operation
#
##############################################################################
print_getCampaignTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCampaignTemplates - List and search campaign templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCampaigns operation
#
##############################################################################
print_getCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCampaigns - List and search campaigns${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_active${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for campaigns that are active${YELLOW} Specify as: filter_active=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for removeChallengeFromCampaign operation
#
##############################################################################
print_removeChallengeFromCampaign_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeChallengeFromCampaign - Remove a challenge from a campaign${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}campaign_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The campaign id ${YELLOW}Specify as: campaign_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateCampaign operation
#
##############################################################################
print_updateCampaign_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateCampaign - Update a campaign${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The campaign id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The campaign resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateCampaignTemplate operation
#
##############################################################################
print_updateCampaignTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateCampaignTemplate - Update an campaign template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The campaign template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createChallenge operation
#
##############################################################################
print_createChallenge_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createChallenge - Create a challenge${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Challenges do not run on their own.  They must be added to a campaign before events will spawn." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The challenge resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createChallengeActivity operation
#
##############################################################################
print_createChallengeActivity_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createChallengeActivity - Create a challenge activity${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}challenge_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge id ${YELLOW}Specify as: challenge_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}validateSettings${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to validate the settings being sent against the available settings on the base activity.${YELLOW} Specify as: validateSettings=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The challenge activity resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createChallengeActivityTemplate operation
#
##############################################################################
print_createChallengeActivityTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createChallengeActivityTemplate - Create a challenge activity template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Challenge Activity Templates define a type of challenge activity and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The challengeActivity template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createChallengeTemplate operation
#
##############################################################################
print_createChallengeTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createChallengeTemplate - Create a challenge template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Challenge Templates define a type of challenge and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The challenge template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteChallenge operation
#
##############################################################################
print_deleteChallenge_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteChallenge - Delete a challenge${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteChallengeActivity operation
#
##############################################################################
print_deleteChallengeActivity_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteChallengeActivity - Delete a challenge activity${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge_activity id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}challenge_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge id ${YELLOW}Specify as: challenge_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteChallengeActivityTemplate operation
#
##############################################################################
print_deleteChallengeActivityTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteChallengeActivityTemplate - Delete a challenge activity template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteChallengeEvent operation
#
##############################################################################
print_deleteChallengeEvent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteChallengeEvent - Delete a challenge event${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge event id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteChallengeTemplate operation
#
##############################################################################
print_deleteChallengeTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteChallengeTemplate - Delete a challenge template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getChallenge operation
#
##############################################################################
print_getChallenge_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getChallenge - Retrieve a challenge${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getChallengeActivities operation
#
##############################################################################
print_getChallengeActivities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getChallengeActivities - List and search challenge activities${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}challenge_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge id ${YELLOW}Specify as: challenge_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getChallengeActivity operation
#
##############################################################################
print_getChallengeActivity_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getChallengeActivity - Get a single challenge activity${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge_activity id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}challenge_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge id ${YELLOW}Specify as: challenge_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getChallengeActivityTemplate operation
#
##############################################################################
print_getChallengeActivityTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getChallengeActivityTemplate - Get a single challenge activity template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getChallengeActivityTemplates operation
#
##############################################################################
print_getChallengeActivityTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getChallengeActivityTemplates - List and search challenge activity templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getChallengeEvent operation
#
##############################################################################
print_getChallengeEvent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getChallengeEvent - Retrieve a single challenge event details${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge event id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getChallengeEvents operation
#
##############################################################################
print_getChallengeEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getChallengeEvents - Retrieve a list of challenge events${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_start_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).${YELLOW} Specify as: filter_start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_end_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).${YELLOW} Specify as: filter_end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_campaigns${OFF} ${BLUE}[Boolean]${OFF}${OFF} - check only for events from currently running campaigns${YELLOW} Specify as: filter_campaigns=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_challenge${OFF} ${BLUE}[Integer]${OFF}${OFF} - check only for events from the challenge specified by id${YELLOW} Specify as: filter_challenge=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getChallengeTemplate operation
#
##############################################################################
print_getChallengeTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getChallengeTemplate - Get a single challenge template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getChallengeTemplates operation
#
##############################################################################
print_getChallengeTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getChallengeTemplates - List and search challenge templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getChallenges operation
#
##############################################################################
print_getChallenges_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getChallenges - Retrieve a list of challenges${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_template${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for challenges that are not tied to campaigns (templates)${YELLOW} Specify as: filter_template=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_active_campaign${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for challenges that are tied to active campaigns${YELLOW} Specify as: filter_active_campaign=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_start_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the challenge start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).${YELLOW} Specify as: filter_start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_end_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the challenge end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).${YELLOW} Specify as: filter_end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateChallenge operation
#
##############################################################################
print_updateChallenge_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateChallenge - Update a challenge${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If the challenge is a copy, changes will propagate to all the related challenges" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The challenge resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateChallengeActivity operation
#
##############################################################################
print_updateChallengeActivity_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateChallengeActivity - Update a challenge activity${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge_activity id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}challenge_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The challenge id ${YELLOW}Specify as: challenge_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The challenge activity resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateChallengeActivityTemplate operation
#
##############################################################################
print_updateChallengeActivityTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateChallengeActivityTemplate - Update an challenge activity template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The challengeActivity template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateChallengeTemplate operation
#
##############################################################################
print_updateChallengeTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateChallengeTemplate - Update a challenge template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The challenge template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createRewardSet operation
#
##############################################################################
print_createRewardSet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createRewardSet - Create a reward set${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The reward set resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteRewardSet operation
#
##############################################################################
print_deleteRewardSet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteRewardSet - Delete a reward set${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The reward id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getRewardSet operation
#
##############################################################################
print_getRewardSet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getRewardSet - Get a single reward set${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The reward id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getRewardSets operation
#
##############################################################################
print_getRewardSets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getRewardSets - List and search reward sets${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateRewardSet operation
#
##############################################################################
print_updateRewardSet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateRewardSet - Update a reward set${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The reward id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The reward set resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createCategory operation
#
##############################################################################
print_createCategory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createCategory - Create a new category${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The category to create" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createCategoryTemplate operation
#
##############################################################################
print_createCategoryTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createCategoryTemplate - Create a category template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Templates define a type of category and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The template to create" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteCategory operation
#
##############################################################################
print_deleteCategory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteCategory - Delete an existing category${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the category to be deleted ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteCategoryTemplate operation
#
##############################################################################
print_deleteCategoryTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteCategoryTemplate - Delete a category template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCategories operation
#
##############################################################################
print_getCategories_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCategories - List and search categories with optional filters${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_search${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for categories whose names begin with provided string${YELLOW} Specify as: filter_search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_active${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for categories that are specifically active or inactive${YELLOW} Specify as: filter_active=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCategory operation
#
##############################################################################
print_getCategory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCategory - Get a single category${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the category to retrieve ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCategoryTemplate operation
#
##############################################################################
print_getCategoryTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCategoryTemplate - Get a single category template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCategoryTemplates operation
#
##############################################################################
print_getCategoryTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCategoryTemplates - List and search category templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getTags operation
#
##############################################################################
print_getTags_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getTags - List all trivia tags in the system${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateCategory operation
#
##############################################################################
print_updateCategory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateCategory - Update an existing category${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the category ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The category to update" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateCategoryTemplate operation
#
##############################################################################
print_updateCategoryTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateCategoryTemplate - Update a category template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The updated template information" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createConfig operation
#
##############################################################################
print_createConfig_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createConfig - Create a new config${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The config object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteConfig operation
#
##############################################################################
print_deleteConfig_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteConfig - Delete an existing config${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The config name ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getConfig operation
#
##############################################################################
print_getConfig_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getConfig - Get a single config${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Only configs that are public readable will be shown without admin access" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The config name ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getConfigs operation
#
##############################################################################
print_getConfigs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getConfigs - List and search configs${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_search${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for configs whose name contains the given string${YELLOW} Specify as: filter_search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: 1)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateConfig operation
#
##############################################################################
print_updateConfig_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateConfig - Update an existing config${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The config name ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The config object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createArticle operation
#
##############################################################################
print_createArticle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createArticle - Create a new article${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Articles are blobs of text with titles, a category and assets. Formatting and display of the text is in the hands of the front end." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new article" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createArticleTemplate operation
#
##############################################################################
print_createArticleTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createArticleTemplate - Create an article template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Article Templates define a type of article and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The article template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteArticle operation
#
##############################################################################
print_deleteArticle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteArticle - Delete an existing article${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The article id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteArticleTemplate operation
#
##############################################################################
print_deleteArticleTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteArticleTemplate - Delete an article template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getArticle operation
#
##############################################################################
print_getArticle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getArticle - Get a single article${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The article id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getArticleTemplate operation
#
##############################################################################
print_getArticleTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getArticleTemplate - Get a single article template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getArticleTemplates operation
#
##############################################################################
print_getArticleTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getArticleTemplates - List and search article templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getArticles operation
#
##############################################################################
print_getArticles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getArticles - List and search articles${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of articles with optional filtering. Assets will not be filled in on the resources returned. Use 'Get a single article' to retrieve the full resource with assets for a given item as needed." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_active_only${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for articles that are active (true) or inactive (false)${YELLOW} Specify as: filter_active_only=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_category${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for articles from a specific category by id${YELLOW} Specify as: filter_category=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tagset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for articles with at least one of a specified set of tags (separated by comma)${YELLOW} Specify as: filter_tagset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tag_intersection${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for articles with all of a specified set of tags (separated by comma)${YELLOW} Specify as: filter_tag_intersection=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tag_exclusion${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for articles with none of a specified set of tags (separated by comma)${YELLOW} Specify as: filter_tag_exclusion=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_title${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for articles whose title contains a string${YELLOW} Specify as: filter_title=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateArticle operation
#
##############################################################################
print_updateArticle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateArticle - Update an existing article${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The article id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The article object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateArticleTemplate operation
#
##############################################################################
print_updateArticleTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateArticleTemplate - Update an article template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The article template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addComment operation
#
##############################################################################
print_addComment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addComment - Add a new comment${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The comment to be added" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteComment operation
#
##############################################################################
print_deleteComment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteComment - Delete a comment${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The comment id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getComment operation
#
##############################################################################
print_getComment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getComment - Return a comment${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The comment id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getComments operation
#
##############################################################################
print_getComments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getComments - Returns a page of comments${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}context${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - Get comments by context type${YELLOW} Specify as: context=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}context_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - Get comments by context id${YELLOW} Specify as: context_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for searchComments operation
#
##############################################################################
print_searchComments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}searchComments - Search the comment index${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "The body is an ElasticSearch query json. Please see their <a href='https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html'>documentation</a> for details on the format and search options" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The search query" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;This is not a response, but demonstrates the format of the index object. the actual response will be a Page of comments as seen in the GET endpoint.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateComment operation
#
##############################################################################
print_updateComment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateComment - Update a comment${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The comment id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The comment content" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for answerPoll operation
#
##############################################################################
print_answerPoll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}answerPoll - Add your vote to a poll${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The poll id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The answer key" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createPoll operation
#
##############################################################################
print_createPoll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createPoll - Create a new poll${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Polls are blobs of text with titles, a category and assets. Formatting and display of the text is in the hands of the front end." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The poll object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createPollTemplate operation
#
##############################################################################
print_createPollTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createPollTemplate - Create a poll template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Poll templates define a type of poll and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The poll template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deletePoll operation
#
##############################################################################
print_deletePoll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deletePoll - Delete an existing poll${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The poll id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deletePollTemplate operation
#
##############################################################################
print_deletePollTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deletePollTemplate - Delete a poll template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPoll operation
#
##############################################################################
print_getPoll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPoll - Get a single poll${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The poll id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPollAnswer operation
#
##############################################################################
print_getPollAnswer_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPollAnswer - Get poll answer${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The poll id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPollTemplate operation
#
##############################################################################
print_getPollTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPollTemplate - Get a single poll template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPollTemplates operation
#
##############################################################################
print_getPollTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPollTemplates - List and search poll templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPolls operation
#
##############################################################################
print_getPolls_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPolls - List and search polls${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of polls with optional filtering. Assets will not be filled in on the resources returned. Use 'Get a single poll' to retrieve the full resource with assets for a given item as needed." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_category${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for polls from a specific category by id${YELLOW} Specify as: filter_category=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tagset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for polls with specified tags (separated by comma)${YELLOW} Specify as: filter_tagset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_text${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for polls whose text contains a string${YELLOW} Specify as: filter_text=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updatePoll operation
#
##############################################################################
print_updatePoll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updatePoll - Update an existing poll${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The poll id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The poll object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updatePollTemplate operation
#
##############################################################################
print_updatePollTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updatePollTemplate - Update a poll template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The poll template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createCurrency operation
#
##############################################################################
print_createCurrency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createCurrency - Create a currency${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The currency object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteCurrency operation
#
##############################################################################
print_deleteCurrency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteCurrency - Delete a currency${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The currency code ${YELLOW}Specify as: code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCurrencies operation
#
##############################################################################
print_getCurrencies_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCurrencies - List and search currencies${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_enabled_currencies${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for alternate currencies setup explicitely in system config${YELLOW} Specify as: filter_enabled_currencies=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_type${OFF} ${BLUE}[String]${OFF}${OFF} - Filter currencies by type.  Allowable values: ('virtual', 'real')${YELLOW} Specify as: filter_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: name:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCurrency operation
#
##############################################################################
print_getCurrency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCurrency - Get a single currency${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The currency code ${YELLOW}Specify as: code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateCurrency operation
#
##############################################################################
print_updateCurrency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateCurrency - Update a currency${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The currency code ${YELLOW}Specify as: code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The currency object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addDeviceUsers operation
#
##############################################################################
print_addDeviceUsers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addDeviceUsers - Add device users${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - userResources" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createDevice operation
#
##############################################################################
print_createDevice_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createDevice - Create a device${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - device" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteDevice operation
#
##############################################################################
print_deleteDevice_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteDevice - Delete a device${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteDeviceUser operation
#
##############################################################################
print_deleteDeviceUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteDeviceUser - Delete a device user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the device ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The user id of the device user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteDeviceUsers operation
#
##############################################################################
print_deleteDeviceUsers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteDeviceUsers - Delete all device users${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the device ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_id${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for device users to delete with a user id in a given comma separated list of ids${YELLOW} Specify as: filter_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getDevice operation
#
##############################################################################
print_getDevice_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getDevice - Get a single device${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getDevices operation
#
##############################################################################
print_getDevices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getDevices - List and search devices${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of devices with optional filtering" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_make${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for devices with specified make${YELLOW} Specify as: filter_make=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_model${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for devices with specified model${YELLOW} Specify as: filter_model=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateDevice operation
#
##############################################################################
print_updateDevice_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateDevice - Update a device${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - device" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addDisposition operation
#
##############################################################################
print_addDisposition_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addDisposition - Add a new disposition${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new disposition record" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteDisposition operation
#
##############################################################################
print_deleteDisposition_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteDisposition - Delete a disposition${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the disposition record ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getDisposition operation
#
##############################################################################
print_getDisposition_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getDisposition - Returns a disposition${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the disposition record ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getDispositionCounts operation
#
##############################################################################
print_getDispositionCounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getDispositionCounts - Returns a list of disposition counts${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_context${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for dispositions within a context type (games, articles, polls, etc). Optionally with a specific id like filter_context=video:47${YELLOW} Specify as: filter_context=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_owner${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for dispositions from a specific user by id or 'me'${YELLOW} Specify as: filter_owner=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getDispositions operation
#
##############################################################################
print_getDispositions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getDispositions - Returns a page of dispositions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_context${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for dispositions within a context type (games, articles, polls, etc). Optionally with a specific id like filter_context=video:47${YELLOW} Specify as: filter_context=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_owner${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for dispositions from a specific user by id or 'me'${YELLOW} Specify as: filter_owner=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createFulfillmentType operation
#
##############################################################################
print_createFulfillmentType_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createFulfillmentType - Create a fulfillment type${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The fulfillment type" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteFulfillmentType operation
#
##############################################################################
print_deleteFulfillmentType_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteFulfillmentType - Delete a fulfillment type${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getFulfillmentType operation
#
##############################################################################
print_getFulfillmentType_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getFulfillmentType - Get a single fulfillment type${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getFulfillmentTypes operation
#
##############################################################################
print_getFulfillmentTypes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getFulfillmentTypes - List and search fulfillment types${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateFulfillmentType operation
#
##############################################################################
print_updateFulfillmentType_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateFulfillmentType - Update a fulfillment type${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The fulfillment type" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createAchievement operation
#
##############################################################################
print_createAchievement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createAchievement - Create a new achievement definition${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user's achievement status must manually be updated via the API." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The achievement definition" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createAchievementTemplate operation
#
##############################################################################
print_createAchievementTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createAchievementTemplate - Create an achievement template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Achievement templates define a type of achievement and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The achievement template to be created" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteAchievement operation
#
##############################################################################
print_deleteAchievement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteAchievement - Delete an achievement definition${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Will also disable the associated generated rule, if any." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The name of the achievement ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteAchievementTemplate operation
#
##############################################################################
print_deleteAchievementTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteAchievementTemplate - Delete an achievement template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getAchievement operation
#
##############################################################################
print_getAchievement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getAchievement - Get a single achievement definition${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The name of the achievement ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getAchievementTemplate operation
#
##############################################################################
print_getAchievementTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getAchievementTemplate - Get a single achievement template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getAchievementTemplates operation
#
##############################################################################
print_getAchievementTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getAchievementTemplates - List and search achievement templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getAchievementTriggers operation
#
##############################################################################
print_getAchievementTriggers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getAchievementTriggers - Get the list of triggers that can be used to trigger an achievement progress update${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getAchievements operation
#
##############################################################################
print_getAchievements_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getAchievements - Get all achievement definitions in the system${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_tagset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for achievements with specified tags (separated by comma)${YELLOW} Specify as: filter_tagset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for achievements whose name contains a string${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_hidden${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for achievements that are hidden or not${YELLOW} Specify as: filter_hidden=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: name:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_derived${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Filter for achievements that are derived from other services${YELLOW} Specify as: filter_derived=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getDerivedAchievements operation
#
##############################################################################
print_getDerivedAchievements_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getDerivedAchievements - Get a list of derived achievements${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Used by other services that depend on achievements" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The name of the derived achievement ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserAchievementProgress operation
#
##############################################################################
print_getUserAchievementProgress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserAchievementProgress - Retrieve progress on a given achievement for a given user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Assets will not be filled in on the resources returned. Use 'Get a single poll' to retrieve the full resource with assets for a given item as needed." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The user's id ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}achievement_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The achievement's name ${YELLOW}Specify as: achievement_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserAchievementsProgress operation
#
##############################################################################
print_getUserAchievementsProgress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserAchievementsProgress - Retrieve progress on achievements for a given user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Assets will not be filled in on the resources returned. Use 'Get a single poll' to retrieve the full resource with assets for a given item as needed." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The user's id ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_achievement_derived${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for achievements that are derived from other services${YELLOW} Specify as: filter_achievement_derived=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_achievement_tagset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for achievements with specified tags (separated by comma)${YELLOW} Specify as: filter_achievement_tagset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_achievement_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for achievements whose name contains a string${YELLOW} Specify as: filter_achievement_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUsersAchievementProgress operation
#
##############################################################################
print_getUsersAchievementProgress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUsersAchievementProgress - Retrieve progress on a given achievement for all users${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Assets will not be filled in on the resources returned. Use 'Get single achievement progress for user' to retrieve the full resource with assets for a given user as needed." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}achievement_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The achievement's name ${YELLOW}Specify as: achievement_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_achievement_derived${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for achievements that are derived from other services${YELLOW} Specify as: filter_achievement_derived=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_achievement_tagset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for achievements with specified tags (separated by comma)${YELLOW} Specify as: filter_achievement_tagset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_achievement_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for achievements whose name contains a string${YELLOW} Specify as: filter_achievement_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUsersAchievementsProgress operation
#
##############################################################################
print_getUsersAchievementsProgress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUsersAchievementsProgress - Retrieve progress on achievements for all users${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Assets will not be filled in on the resources returned. Use 'Get single achievement progress for user' to retrieve the full resource with assets for a given user as needed." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_achievement_derived${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for achievements that are derived from other services${YELLOW} Specify as: filter_achievement_derived=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_achievement_tagset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for achievements with specified tags (separated by comma)${YELLOW} Specify as: filter_achievement_tagset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_achievement_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for achievements whose name contains a string${YELLOW} Specify as: filter_achievement_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for incrementAchievementProgress operation
#
##############################################################################
print_incrementAchievementProgress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}incrementAchievementProgress - Increment an achievement progress record for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If no progress record yet exists for the user, it will be created. Otherwise it will be updated and the provided value added to the existing progress. May be negative. If progress meets or exceeds the achievement's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The user's id ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}achievement_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The achievement's name ${YELLOW}Specify as: achievement_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The amount to add to the progress value" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setAchievementProgress operation
#
##############################################################################
print_setAchievementProgress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setAchievementProgress - Set an achievement progress record for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If no progress record yet exists for the user, it will be created. Otherwise it will be updated and progress set to the provided value. If progress meets or exceeds the achievement's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The user's id ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}achievement_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The achievement's name ${YELLOW}Specify as: achievement_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new progress value" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateAchievement operation
#
##############################################################################
print_updateAchievement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateAchievement - Update an achievement definition${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The name of the achievement ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The achievement definition" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateAchievementTemplate operation
#
##############################################################################
print_updateAchievementTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateAchievementTemplate - Update an achievement template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The updated template" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getLeaderboard operation
#
##############################################################################
print_getLeaderboard_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getLeaderboard - Retrieves leaderboard details and paginated entries${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "The context type identifies the type of entity (i.e., 'activity') being tracked on the leaderboard. The context ID is the unique ID of the actual entity tracked by the leaderboard. Sorting is based on the fields of LeaderboardEntryResource rather than the returned LeaderboardResource." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}context_type${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The context type for the leaderboard ${YELLOW}Specify as: context_type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}context_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The context id for the leaderboard ${YELLOW}Specify as: context_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: score:DESC,updated:ASC,user_id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getLeaderboardRank operation
#
##############################################################################
print_getLeaderboardRank_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getLeaderboardRank - Retrieves a specific user entry with rank${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "The context type identifies the type of entity (i.e., 'activity') being tracked on the leaderboard. The context ID is the unique ID of the actual entity tracked by the leaderboard" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}context_type${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The context type for the leaderboard ${YELLOW}Specify as: context_type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}context_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The context id for the leaderboard ${YELLOW}Specify as: context_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of a user ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getLeaderboardStrategies operation
#
##############################################################################
print_getLeaderboardStrategies_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getLeaderboardStrategies - Get a list of available leaderboard strategy names${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createLevel operation
#
##############################################################################
print_createLevel_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createLevel - Create a level schema${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The level schema definition" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteLevel operation
#
##############################################################################
print_deleteLevel_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteLevel - Delete a level${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The level schema name ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getLevel operation
#
##############################################################################
print_getLevel_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getLevel - Retrieve a level${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The level schema name ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getLevelTriggers operation
#
##############################################################################
print_getLevelTriggers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getLevelTriggers - Get the list of triggers that can be used to trigger a leveling progress update${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getLevels operation
#
##############################################################################
print_getLevels_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getLevels - List and search levels${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of levels schemas with optional filtering" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for level schemas whose name contains a given string${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: name:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserLevel operation
#
##############################################################################
print_getUserLevel_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserLevel - Get a user's progress for a given level schema${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The level schema name ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserLevels operation
#
##############################################################################
print_getUserLevels_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserLevels - Get a user's progress for all level schemas${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Filtering and sorting is based on the LevelingResource object, not the UserLevelingResource that is returned here." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for level schemas whose name contains a given string${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for incrementProgress operation
#
##############################################################################
print_incrementProgress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}incrementProgress - Update or create a leveling progress record for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If no progress record yet exists for the user, it will be created. Otherwise the provided value will be added to it. May be negative. If progress meets or exceeds the level's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The level schema name ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The amount of progress to add" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setProgress operation
#
##############################################################################
print_setProgress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setProgress - Set leveling progress for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If no progress record yet exists for the user, it will be created. Otherwise it will be updated to the provided value. If progress meets or exceeds the level's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The level schema name ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new progress amount" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateLevel operation
#
##############################################################################
print_updateLevel_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateLevel - Update a level${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The level schema name ${YELLOW}Specify as: name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The level schema definition" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addMetric operation
#
##############################################################################
print_addMetric_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addMetric - Add a metric${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Post a new score/stat for an activity occurrence without ending the occurrence itself" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new metric" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Metric added${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addQuestionAnswers operation
#
##############################################################################
print_addQuestionAnswers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addQuestionAnswers - Add an answer to a question${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}question_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the question ${YELLOW}Specify as: question_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new answer" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addQuestionTag operation
#
##############################################################################
print_addQuestionTag_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addQuestionTag - Add a tag to a question${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the question ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new tag" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addTagToQuestionsBatch operation
#
##############################################################################
print_addTagToQuestionsBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addTagToQuestionsBatch - Add a tag to a batch of questions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "All questions that dont't have the tag and match filters will have it added. The returned number is the number of questions updated." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_search${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for documents whose question, answers or tags contains provided string${YELLOW} Specify as: filter_search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_idset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for documents whose id is in the comma separated list provided${YELLOW} Specify as: filter_idset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_category${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified category, by id${YELLOW} Specify as: filter_category=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tag${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified tag${YELLOW} Specify as: filter_tag=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tagset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified tags (separated by comma)${YELLOW} Specify as: filter_tagset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_type${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified type${YELLOW} Specify as: filter_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_published${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for questions currenctly published or not${YELLOW} Specify as: filter_published=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_import_id${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for questions from a specific import job${YELLOW} Specify as: filter_import_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The tag to add" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;The number of records updated${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createImportJob operation
#
##############################################################################
print_createImportJob_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createImportJob - Create an import job${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new import job" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createQuestion operation
#
##############################################################################
print_createQuestion_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createQuestion - Create a question${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new question" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createQuestionTemplate operation
#
##############################################################################
print_createQuestionTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createQuestionTemplate - Create a question template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Question templates define a type of question and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The question template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteImportJob operation
#
##############################################################################
print_deleteImportJob_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteImportJob - Delete an import job${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Also deletes all questions that were imported by it" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the job ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteQuestion operation
#
##############################################################################
print_deleteQuestion_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteQuestion - Delete a question${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the question ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteQuestionAnswers operation
#
##############################################################################
print_deleteQuestionAnswers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteQuestionAnswers - Remove an answer from a question${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}question_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the question ${YELLOW}Specify as: question_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the answer ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteQuestionTemplate operation
#
##############################################################################
print_deleteQuestionTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteQuestionTemplate - Delete a question template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getImportJob operation
#
##############################################################################
print_getImportJob_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getImportJob - Get an import job${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the job ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getImportJobs operation
#
##############################################################################
print_getImportJobs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getImportJobs - Get a list of import job${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_vendor${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for jobs by vendor id${YELLOW} Specify as: filter_vendor=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_category${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for jobs by category id${YELLOW} Specify as: filter_category=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for jobs which name *STARTS* with the given string${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_status${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for jobs that are in a specific set of statuses (comma separated)${YELLOW} Specify as: filter_status=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getQuestion operation
#
##############################################################################
print_getQuestion_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getQuestion - Get a single question${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the question ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getQuestionAnswer operation
#
##############################################################################
print_getQuestionAnswer_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getQuestionAnswer - Get an answer for a question${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}question_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the question ${YELLOW}Specify as: question_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the answer ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getQuestionAnswers operation
#
##############################################################################
print_getQuestionAnswers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getQuestionAnswers - List the answers available for a question${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}question_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the question ${YELLOW}Specify as: question_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getQuestionDeltas operation
#
##############################################################################
print_getQuestionDeltas_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getQuestionDeltas - List question deltas in ascending order of updated date${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "The 'since' parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}since${OFF} ${BLUE}[Integer]${OFF}${OFF} - Timestamp in seconds${YELLOW} Specify as: since=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getQuestionTags operation
#
##############################################################################
print_getQuestionTags_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getQuestionTags - List the tags for a question${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the question ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getQuestionTemplate operation
#
##############################################################################
print_getQuestionTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getQuestionTemplate - Get a single question template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getQuestionTemplates operation
#
##############################################################################
print_getQuestionTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getQuestionTemplates - List and search question templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getQuestions operation
#
##############################################################################
print_getQuestions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getQuestions - List and search questions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_search${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for documents whose question, answers or tags contains provided string${YELLOW} Specify as: filter_search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_idset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for documents whose id is in the comma separated list provided${YELLOW} Specify as: filter_idset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_category${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified category, by id${YELLOW} Specify as: filter_category=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tagset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified tags (separated by comma)${YELLOW} Specify as: filter_tagset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tag${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified tag${YELLOW} Specify as: filter_tag=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_type${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified type.  Allowable values: ('TEXT', 'IMAGE', 'VIDEO', 'AUDIO')${YELLOW} Specify as: filter_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_published${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for questions currenctly published or not${YELLOW} Specify as: filter_published=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_import_id${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for questions from a specific import job${YELLOW} Specify as: filter_import_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getQuestionsCount operation
#
##############################################################################
print_getQuestionsCount_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getQuestionsCount - Count questions based on filters${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "This is also provided by the list endpoint so you don't need to call this for pagination purposes" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_search${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for documents whose question, answers or tags contains provided string${YELLOW} Specify as: filter_search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_idset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for documents whose id is in the comma separated list provided${YELLOW} Specify as: filter_idset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_category${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified category, by id${YELLOW} Specify as: filter_category=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tag${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified tag${YELLOW} Specify as: filter_tag=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tagset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified tags (separated by comma)${YELLOW} Specify as: filter_tagset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_type${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified type.  Allowable values: ('TEXT', 'IMAGE', 'VIDEO', 'AUDIO')${YELLOW} Specify as: filter_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_published${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for questions currenctly published or not${YELLOW} Specify as: filter_published=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for processImportJob operation
#
##############################################################################
print_processImportJob_help() {
    echo ""
    echo -e "${BOLD}${WHITE}processImportJob - Start processing an import job${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Will process the CSV file and add new questions asynchronously. The status of the job must be 'VALID'." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the job ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}publish_now${OFF} ${BLUE}[Boolean]${OFF} ${RED}(required)${OFF}${OFF} - Whether the new questions should be published live immediately${YELLOW} Specify as: publish_now=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for removeQuestionTag operation
#
##############################################################################
print_removeQuestionTag_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeQuestionTag - Remove a tag from a question${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the question ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}tag${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The tag to remove ${YELLOW}Specify as: tag=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for removeTagToQuestionsBatch operation
#
##############################################################################
print_removeTagToQuestionsBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeTagToQuestionsBatch - Remove a tag from a batch of questions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}tag${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The tag to remove ${YELLOW}Specify as: tag=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_search${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for documents whose question, answers or tags contains provided string${YELLOW} Specify as: filter_search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_idset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for documents whose id is in the comma separated list provided${YELLOW} Specify as: filter_idset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_category${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified category, by id${YELLOW} Specify as: filter_category=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tag${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified tag${YELLOW} Specify as: filter_tag=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tagset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified tags (separated by comma)${YELLOW} Specify as: filter_tagset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_type${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified type.  Allowable values: ('TEXT', 'IMAGE', 'VIDEO', 'AUDIO')${YELLOW} Specify as: filter_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_published${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for questions currenctly published or not${YELLOW} Specify as: filter_published=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_import_id${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for questions from a specific import job${YELLOW} Specify as: filter_import_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;The number of records updated${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for searchQuestionTags operation
#
##############################################################################
print_searchQuestionTags_help() {
    echo ""
    echo -e "${BOLD}${WHITE}searchQuestionTags - List and search tags by the beginning of the string${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "For performance reasons, search & category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_search${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for tags starting with the given text${YELLOW} Specify as: filter_search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_category${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for tags on questions from a specific category${YELLOW} Specify as: filter_category=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_import_id${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for tags on questions from a specific import job${YELLOW} Specify as: filter_import_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateImportJob operation
#
##############################################################################
print_updateImportJob_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateImportJob - Update an import job${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Changes should be made before process is started for there to be any effect." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the job ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The updated job" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateQuestion operation
#
##############################################################################
print_updateQuestion_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateQuestion - Update a question${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the question ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The updated question" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateQuestionAnswer operation
#
##############################################################################
print_updateQuestionAnswer_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateQuestionAnswer - Update an answer for a question${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}question_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the question ${YELLOW}Specify as: question_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the answer ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The updated answer" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateQuestionTemplate operation
#
##############################################################################
print_updateQuestionTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateQuestionTemplate - Update a question template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The question template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateQuestionsInBulk operation
#
##############################################################################
print_updateQuestionsInBulk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateQuestionsInBulk - Bulk update questions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_search${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for documents whose question, answers or tags contains provided string${YELLOW} Specify as: filter_search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_idset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for documents whose id is in the comma separated list provided${YELLOW} Specify as: filter_idset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_category${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified category, by id${YELLOW} Specify as: filter_category=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tagset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified tags (separated by comma)${YELLOW} Specify as: filter_tagset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_type${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for questions with specified type.  Allowable values: ('TEXT', 'IMAGE', 'VIDEO', 'AUDIO')${YELLOW} Specify as: filter_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_published${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for questions currenctly published or not${YELLOW} Specify as: filter_published=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_import_id${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for questions from a specific import job${YELLOW} Specify as: filter_import_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - New values for a set of question fields" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;The number of records updated${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createInvoice operation
#
##############################################################################
print_createInvoice_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createInvoice - Create an invoice${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create an invoice(s) by providing a cart GUID. Note that there may be multiple invoices created, one per vendor." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - Invoice to be created" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getFulFillmentStatuses operation
#
##############################################################################
print_getFulFillmentStatuses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getFulFillmentStatuses - Lists available fulfillment statuses${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getInvoice operation
#
##############################################################################
print_getInvoice_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getInvoice - Retrieve an invoice${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the invoice ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getInvoiceLogs operation
#
##############################################################################
print_getInvoiceLogs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getInvoiceLogs - List invoice logs${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the invoice ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getInvoices operation
#
##############################################################################
print_getInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getInvoices - Retrieve invoices${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Without INVOICES_ADMIN permission the results are automatically filtered for only the logged in user's invoices. It is recomended however that filter_user be added to avoid issues for admin users accidentally getting additional invoices." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_user${OFF} ${BLUE}[Integer]${OFF}${OFF} - The id of a user to get invoices for. Automtically added if not being called with admin permissions.${YELLOW} Specify as: filter_user=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_email${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices by customer's email. Admins only.${YELLOW} Specify as: filter_email=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_fulfillment_status${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices by fulfillment status type. Can be a comma separated list of statuses${YELLOW} Specify as: filter_fulfillment_status=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_payment_status${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices by payment status type. Can be a comma separated list of statuses${YELLOW} Specify as: filter_payment_status=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_item_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices by item name containing the given string${YELLOW} Specify as: filter_item_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_external_ref${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices by external reference.${YELLOW} Specify as: filter_external_ref=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_created_date${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices by creation date. Multiple values possible for range search. Format: filter_created_date=OP,ts&... where OP in (GT, LT, GOE, LOE, EQ) and ts is a unix timestamp in seconds. Ex: filter_created_date=GT,1452154258,LT,1554254874${YELLOW} Specify as: filter_created_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_vendor_ids${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices for ones from one of the vendors whose id is in the given comma separated list${YELLOW} Specify as: filter_vendor_ids=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_currency${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices by currency. ISO3 currency code${YELLOW} Specify as: filter_currency=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_shipping_state_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices by shipping address: Exact match state name${YELLOW} Specify as: filter_shipping_state_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_shipping_country_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices by shipping address: Exact match country name${YELLOW} Specify as: filter_shipping_country_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_shipping${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices by shipping price. Multiple values possible for range search. Format: filter_shipping=OP,ts&... where OP in (GT, LT, GOE, LOE, EQ). Ex: filter_shipping=GT,14.58,LT,15.54${YELLOW} Specify as: filter_shipping=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_vendor_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices by vendor name starting with given string${YELLOW} Specify as: filter_vendor_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_sku${OFF} ${BLUE}[String]${OFF}${OFF} - Filters invoices by item sku${YELLOW} Specify as: filter_sku=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: 1)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPaymentStatuses operation
#
##############################################################################
print_getPaymentStatuses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPaymentStatuses - Lists available payment statuses${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for payInvoice operation
#
##############################################################################
print_payInvoice_help() {
    echo ""
    echo -e "${BOLD}${WHITE}payInvoice - Pay an invoice using a saved payment method${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the invoice ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The payment method details. Will default to the appropriate user's wallet in the invoice currency if ommited." | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setBundledInvoiceItemFulfillmentStatus operation
#
##############################################################################
print_setBundledInvoiceItemFulfillmentStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setBundledInvoiceItemFulfillmentStatus - Set the fulfillment status of a bundled invoice item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "This allows external fulfillment systems to report success or failure. Fulfillment status changes are restricted by a specific flow determining which status can lead to which." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the invoice ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}bundleSku${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The sku of the bundle in the invoice that contains the given target ${YELLOW}Specify as: bundleSku=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sku${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The sku of an item in the bundle in the invoice ${YELLOW}Specify as: sku=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - The new fulfillment status for the item. Additional options may be available based on configuration.  Allowable values:  'unfulfilled', 'fulfilled', 'not fulfillable', 'failed', 'processing', 'failed_permanent', 'delayed'" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setExternalRef operation
#
##############################################################################
print_setExternalRef_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setExternalRef - Set the external reference of an invoice${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the invoice ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - External reference info" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setInvoiceItemFulfillmentStatus operation
#
##############################################################################
print_setInvoiceItemFulfillmentStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setInvoiceItemFulfillmentStatus - Set the fulfillment status of an invoice item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "This allows external fulfillment systems to report success or failure. Fulfillment status changes are restricted by a specific flow determining which status can lead to which." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the invoice ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sku${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The sku of an item in the invoice ${YELLOW}Specify as: sku=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - The new fulfillment status for the item. Additional options may be available based on configuration.  Allowable values:  'unfulfilled', 'fulfilled', 'not fulfillable', 'failed', 'processing', 'failed_permanent', 'delayed'" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setOrderNotes operation
#
##############################################################################
print_setOrderNotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setOrderNotes - Set the order notes of an invoice${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the invoice ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - Payment status info" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setPaymentStatus operation
#
##############################################################################
print_setPaymentStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setPaymentStatus - Set the payment status of an invoice${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "This may trigger fulfillment if setting the status to 'paid'. This is mainly intended to support external payment systems that cannot be incorporated into the payment method system. Payment status changes are restricted by a specific flow determining which status can lead to which." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the invoice ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - Payment status info" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateBillingInfo operation
#
##############################################################################
print_updateBillingInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateBillingInfo - Set or update billing info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the invoice ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - Address info" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCountries operation
#
##############################################################################
print_getCountries_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCountries - Get a list of countries${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCountryByGeoLocation operation
#
##############################################################################
print_getCountryByGeoLocation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCountryByGeoLocation - Get the iso3 code of your country${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Determined by geo ip location" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCountryStates operation
#
##############################################################################
print_getCountryStates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCountryStates - Get a list of a country's states${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}country_code_iso3${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The iso3 code of the country ${YELLOW}Specify as: country_code_iso3=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCurrencyByGeoLocation operation
#
##############################################################################
print_getCurrencyByGeoLocation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCurrencyByGeoLocation - Get the currency information of your country${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Determined by geo ip location, currency to country mapping and a fallback setting" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addUserLog operation
#
##############################################################################
print_addUserLog_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addUserLog - Add a user log entry${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The user log entry to be added" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBREEventLog operation
#
##############################################################################
print_getBREEventLog_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBREEventLog - Get an existing BRE event log entry by id${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The BRE event log entry id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBREEventLogs operation
#
##############################################################################
print_getBREEventLogs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBREEventLogs - Returns a list of BRE event log entries${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_start_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the event log start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).${YELLOW} Specify as: filter_start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_event_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter event logs by event name${YELLOW} Specify as: filter_event_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_event_id${OFF} ${BLUE}[String]${OFF}${OFF} - Filter event logs by request id${YELLOW} Specify as: filter_event_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:DESC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBREForwardLog operation
#
##############################################################################
print_getBREForwardLog_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBREForwardLog - Get an existing forward log entry by id${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The forward log entry id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBREForwardLogs operation
#
##############################################################################
print_getBREForwardLogs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBREForwardLogs - Returns a list of forward log entries${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_start_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).${YELLOW} Specify as: filter_start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_end_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the log end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).${YELLOW} Specify as: filter_end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_status_code${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter forward logs by http status code${YELLOW} Specify as: filter_status_code=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:DESC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserLog operation
#
##############################################################################
print_getUserLog_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserLog - Returns a user log entry by id${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The user log entry id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserLogs operation
#
##############################################################################
print_getUserLogs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserLogs - Returns a page of user logs entries${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_user${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for actions taken by a specific user by id${YELLOW} Specify as: filter_user=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_action_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for actions of a specific name${YELLOW} Specify as: filter_action_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: timestamp:DESC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addArtist operation
#
##############################################################################
print_addArtist_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addArtist - Adds a new artist in the system${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Adds a new artist in the system. Use specific media contributions endpoint to add contributions" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new artist" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createArtistTemplate operation
#
##############################################################################
print_createArtistTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createArtistTemplate - Create an artist template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Artist Templates define a type of artist and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The artist template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteArtist operation
#
##############################################################################
print_deleteArtist_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteArtist - Removes an artist from the system IF no resources are attached to it${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The artist id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteArtistTemplate operation
#
##############################################################################
print_deleteArtistTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteArtistTemplate - Delete an artist template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getArtist operation
#
##############################################################################
print_getArtist_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getArtist - Loads a specific artist details${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The artist id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}show_contributions${OFF} ${BLUE}[Integer]${OFF}${OFF} - The number of contributions to show fetch${YELLOW} Specify as: show_contributions=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getArtistTemplate operation
#
##############################################################################
print_getArtistTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getArtistTemplate - Get a single artist template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getArtistTemplates operation
#
##############################################################################
print_getArtistTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getArtistTemplates - List and search artist templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getArtists operation
#
##############################################################################
print_getArtists_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getArtists - Search for artists${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_artists_by_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for artists which name *STARTS* with the given string${YELLOW} Specify as: filter_artists_by_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateArtist operation
#
##############################################################################
print_updateArtist_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateArtist - Modifies an artist details${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The artist id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new artist" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateArtistTemplate operation
#
##############################################################################
print_updateArtistTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateArtistTemplate - Update an artist template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The artist template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getModerationReport operation
#
##############################################################################
print_getModerationReport_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getModerationReport - Get a flag report${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The flag report id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getModerationReports operation
#
##############################################################################
print_getModerationReports_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getModerationReports - Returns a page of flag reports${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Context can be either a free-form string or a pre-defined context name" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}exclude_resolved${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: true)${OFF} - Ignore resolved context${YELLOW} Specify as: exclude_resolved=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_context${OFF} ${BLUE}[String]${OFF}${OFF} - Filter by moderation context${YELLOW} Specify as: filter_context=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateModerationReport operation
#
##############################################################################
print_updateModerationReport_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateModerationReport - Update a flag report${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Lets you set the resolution of a report. Resolution types is {banned,ignore} in case of 'banned' you will need to pass the reason." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The flag report id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new flag report" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addUserToVideoWhitelist operation
#
##############################################################################
print_addUserToVideoWhitelist_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addUserToVideoWhitelist - Adds a user to a video's whitelist${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Whitelisted users can view video regardless of privacy setting." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The user id" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addVideo operation
#
##############################################################################
print_addVideo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addVideo - Adds a new video in the system${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The video object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addVideoComment operation
#
##############################################################################
print_addVideoComment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addVideoComment - Add a new video comment${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The comment object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addVideoContributor operation
#
##############################################################################
print_addVideoContributor_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addVideoContributor - Adds a contributor to a video${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The contribution object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addVideoFlag operation
#
##############################################################################
print_addVideoFlag_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addVideoFlag - Add a new flag${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The flag reason" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=202
    echo -e "${result_color_table[${code:0:1}]}  202;Accepted${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addVideoRelationships operation
#
##############################################################################
print_addVideoRelationships_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addVideoRelationships - Adds one or more existing videos as related to this one${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The video relationship object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createVideoDisposition operation
#
##############################################################################
print_createVideoDisposition_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createVideoDisposition - Create a video disposition${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The disposition object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteVideo operation
#
##############################################################################
print_deleteVideo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteVideo - Deletes a video from the system if no resources are attached to it${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteVideoComment operation
#
##############################################################################
print_deleteVideoComment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteVideoComment - Delete a video comment${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The comment id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteVideoDisposition operation
#
##############################################################################
print_deleteVideoDisposition_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteVideoDisposition - Delete a video disposition${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}disposition_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The disposition id ${YELLOW}Specify as: disposition_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteVideoFlag operation
#
##############################################################################
print_deleteVideoFlag_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteVideoFlag - Delete a flag${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteVideoRelationship operation
#
##############################################################################
print_deleteVideoRelationship_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteVideoRelationship - Delete a video's relationship${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The relationship id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserVideos operation
#
##############################################################################
print_getUserVideos_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserVideos - Get user videos${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The user id ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}exclude_flagged${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: true)${OFF} - Skip videos that have been flagged by the current user${YELLOW} Specify as: exclude_flagged=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getVideo operation
#
##############################################################################
print_getVideo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getVideo - Loads a specific video details${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getVideoComments operation
#
##############################################################################
print_getVideoComments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getVideoComments - Returns a page of comments for a video${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getVideoDispositions operation
#
##############################################################################
print_getVideoDispositions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getVideoDispositions - Returns a page of dispositions for a video${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getVideoRelationships operation
#
##############################################################################
print_getVideoRelationships_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getVideoRelationships - Returns a page of video relationships${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getVideos operation
#
##############################################################################
print_getVideos_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getVideos - Search videos using the documented filters${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}exclude_flagged${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: true)${OFF} - Skip videos that have been flagged by the current user${YELLOW} Specify as: exclude_flagged=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_videos_by_uploader${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for videos by uploader id${YELLOW} Specify as: filter_videos_by_uploader=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_category${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for videos from a specific category by id${YELLOW} Specify as: filter_category=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tagset${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for videos with specified tags (separated by comma)${YELLOW} Specify as: filter_tagset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_videos_by_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for videos which name *STARTS* with the given string${YELLOW} Specify as: filter_videos_by_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_videos_by_contributor${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for videos with contribution from the artist specified by ID${YELLOW} Specify as: filter_videos_by_contributor=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_videos_by_author${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for videos with an artist as author specified by ID${YELLOW} Specify as: filter_videos_by_author=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_has_author${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for videos that have an author set if true, or that have no author if false${YELLOW} Specify as: filter_has_author=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_has_uploader${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for videos that have an uploader set if true, or that have no uploader if false${YELLOW} Specify as: filter_has_uploader=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_related_to${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well${YELLOW} Specify as: filter_related_to=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_friends${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for videos uploaded by friends. 'true' for friends of the caller (requires user token) or a user id for a specific user's friends (requires VIDEOS_ADMIN permission)${YELLOW} Specify as: filter_friends=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_disposition${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or 'me' for the caller (requires user token for 'me') and DISPOSITION is the name of the disposition. E.G. filter_disposition=123:like or filter_disposition=me:favorite${YELLOW} Specify as: filter_disposition=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: author:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for removeUserFromVideoWhitelist operation
#
##############################################################################
print_removeUserFromVideoWhitelist_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeUserFromVideoWhitelist - Removes a user from a video's whitelist${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The user id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=202
    echo -e "${result_color_table[${code:0:1}]}  202;Accepted${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for removeVideoContributor operation
#
##############################################################################
print_removeVideoContributor_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeVideoContributor - Removes a contributor from a video${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The contributor id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=202
    echo -e "${result_color_table[${code:0:1}]}  202;Accepted${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateVideo operation
#
##############################################################################
print_updateVideo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateVideo - Modifies a video's details${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The video object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateVideoComment operation
#
##############################################################################
print_updateVideoComment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateVideoComment - Update a video comment${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The comment id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The comment content" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateVideoRelationship operation
#
##############################################################################
print_updateVideoRelationship_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateVideoRelationship - Update a video's relationship details${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}video_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: video_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}relationship_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The relationship id ${YELLOW}Specify as: relationship_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The video relationship details" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for viewVideo operation
#
##############################################################################
print_viewVideo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}viewVideo - Increment a video's view count${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The video id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for sendRawEmail operation
#
##############################################################################
print_sendRawEmail_help() {
    echo ""
    echo -e "${BOLD}${WHITE}sendRawEmail - Send a raw email to one or more users${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new raw email to be sent" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for sendRawSMS operation
#
##############################################################################
print_sendRawSMS_help() {
    echo ""
    echo -e "${BOLD}${WHITE}sendRawSMS - Send a raw SMS${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Sends a raw SMS text message to one or more users. User's without registered mobile numbers will be skipped." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new raw SMS to be sent" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for sendTemplatedEmail operation
#
##############################################################################
print_sendTemplatedEmail_help() {
    echo ""
    echo -e "${BOLD}${WHITE}sendTemplatedEmail - Send a templated email to one or more users${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new template email to be sent" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for sendTemplatedSMS operation
#
##############################################################################
print_sendTemplatedSMS_help() {
    echo ""
    echo -e "${BOLD}${WHITE}sendTemplatedSMS - Send a new templated SMS${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Sends a templated SMS text message to one or more users. User's without registered mobile numbers will be skipped." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new template SMS to be sent" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createPaymentMethod operation
#
##############################################################################
print_createPaymentMethod_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createPaymentMethod - Create a new payment method for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - ID of the user for whom the payment method is being created ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - Payment method being created" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deletePaymentMethod operation
#
##############################################################################
print_deletePaymentMethod_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deletePaymentMethod - Delete an existing payment method for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - ID of the user for whom the payment method is being updated ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - ID of the payment method being deleted ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPaymentMethod operation
#
##############################################################################
print_getPaymentMethod_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPaymentMethod - Get a single payment method for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - ID of the user for whom the payment method is being retrieved ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - ID of the payment method being retrieved ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPaymentMethods operation
#
##############################################################################
print_getPaymentMethods_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPaymentMethods - Get all payment methods for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - ID of the user for whom the payment methods are being retrieved ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for payment methods whose name starts with a given string${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_payment_type${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for payment methods with a specific payment type${YELLOW} Specify as: filter_payment_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_payment_method_type_id${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for payment methods with a specific payment method type by id${YELLOW} Specify as: filter_payment_method_type_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_payment_method_type_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for payment methods whose payment method type name starts with a given string${YELLOW} Specify as: filter_payment_method_type_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for paymentAuthorization operation
#
##############################################################################
print_paymentAuthorization_help() {
    echo ""
    echo -e "${BOLD}${WHITE}paymentAuthorization - Authorize payment of an invoice for later capture${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - Payment authorization request" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for paymentCapture operation
#
##############################################################################
print_paymentCapture_help() {
    echo ""
    echo -e "${BOLD}${WHITE}paymentCapture - Capture an existing invoice payment authorization${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - ID of the payment authorization to capture ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updatePaymentMethod operation
#
##############################################################################
print_updatePaymentMethod_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updatePaymentMethod - Update an existing payment method for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - ID of the user for whom the payment method is being updated ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - ID of the payment method being updated ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The updated payment method data" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for verifyAppleReceipt operation
#
##############################################################################
print_verifyAppleReceipt_help() {
    echo ""
    echo -e "${BOLD}${WHITE}verifyAppleReceipt - Pay invoice with Apple receipt${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Mark an invoice paid using Apple payment receipt. A receipt will only be accepted once and the details of the transaction must match the invoice, including the product_id matching the sku text of the item in the invoice. Returns the transaction ID if successful." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The request for paying an invoice through an Apple receipt" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createOrUpdateFattMerchantPaymentMethod operation
#
##############################################################################
print_createOrUpdateFattMerchantPaymentMethod_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createOrUpdateFattMerchantPaymentMethod - Create or update a FattMerchant payment method for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Stores customer information and creates a payment method that can be used to pay invoices through the payments endpoints." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - Request containing payment method information for user" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for handleGooglePayment operation
#
##############################################################################
print_handleGooglePayment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}handleGooglePayment - Mark an invoice paid with Google${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Mark an invoice paid with Google. Verifies signature from Google and treats the developerPayload field inside the json payload as the id of the invoice to pay. Returns the transaction ID if successful." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The request for paying an invoice through a Google in-app payment" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for silentPostOptimal operation
#
##############################################################################
print_silentPostOptimal_help() {
    echo ""
    echo -e "${BOLD}${WHITE}silentPostOptimal - Initiate silent post with Optimal${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Will return the url for a hosted payment endpoint to post to. See Optimal documentation for details." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The payment request to initiate" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createPayPalBillingAgreementUrl operation
#
##############################################################################
print_createPayPalBillingAgreementUrl_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createPayPalBillingAgreementUrl - Create a PayPal Classic billing agreement for the user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the token that should be used to forward the user to PayPal so they can accept the agreement." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The request to create a PayPal billing agreement" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createPayPalExpressCheckout operation
#
##############################################################################
print_createPayPalExpressCheckout_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createPayPalExpressCheckout - Create a payment token for PayPal express checkout${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the token that should be used to forward the user to PayPal so they can complete the checkout." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The request to create a PayPal payment token" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for finalizePayPalBillingAgreement operation
#
##############################################################################
print_finalizePayPalBillingAgreement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}finalizePayPalBillingAgreement - Finalizes a billing agreement after the user has accepted through PayPal${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns the ID of the new payment method created for the user for the billing agreement." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The request to finalize a PayPal billing agreement" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for finalizePayPalCheckout operation
#
##############################################################################
print_finalizePayPalCheckout_help() {
    echo ""
    echo -e "${BOLD}${WHITE}finalizePayPalCheckout - Finalizes a payment after the user has completed checkout with PayPal${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "The invoice will be marked paid/failed by asynchronous IPN callback." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The request to finalize the payment" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createStripePaymentMethod operation
#
##############################################################################
print_createStripePaymentMethod_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createStripePaymentMethod - Create a Stripe payment method for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Stores customer information and creates a payment method that can be used to pay invoices through the payments endpoints." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The request to create a Stripe customer with payment info" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for payStripeInvoice operation
#
##############################################################################
print_payStripeInvoice_help() {
    echo ""
    echo -e "${BOLD}${WHITE}payStripeInvoice - Pay with a single use token${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The request to pay an invoice" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getTransaction operation
#
##############################################################################
print_getTransaction_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getTransaction - Get the details for a single transaction${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getTransactions operation
#
##############################################################################
print_getTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getTransactions - List and search transactions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_invoice${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for transactions from a specific invoice${YELLOW} Specify as: filter_invoice=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for refundTransaction operation
#
##############################################################################
print_refundTransaction_help() {
    echo ""
    echo -e "${BOLD}${WHITE}refundTransaction - Refund a payment transaction, in full or in part${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Will not allow for refunding more than the full amount even with multiple partial refunds. Money is refunded to the payment method used to make the original payment. Payment method must support refunds." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the transaction to refund ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - Request containing refund details" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserWallet operation
#
##############################################################################
print_getUserWallet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserWallet - Returns the user's wallet for the given currency code${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The ID of the user for whom wallet is being retrieved ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}currency_code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - Currency code of the user's wallet ${YELLOW}Specify as: currency_code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserWalletTransactions operation
#
##############################################################################
print_getUserWalletTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserWalletTransactions - Retrieve a user's wallet transactions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The ID of the user for whom wallet transactions are being retrieved ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}currency_code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - Currency code of the user's wallet ${YELLOW}Specify as: currency_code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_type${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for transactions with specified type${YELLOW} Specify as: filter_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_max_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for transactions from no earlier than the specified date as a unix timestamp in seconds${YELLOW} Specify as: filter_max_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_min_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for transactions from no later than the specified date as a unix timestamp in seconds${YELLOW} Specify as: filter_min_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_sign${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for transactions with amount with the given sign.  Allowable values: ('positive', 'negative')${YELLOW} Specify as: filter_sign=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserWallets operation
#
##############################################################################
print_getUserWallets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserWallets - List all of a user's wallets${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The ID of the user for whom wallets are being retrieved ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getWalletBalances operation
#
##############################################################################
print_getWalletBalances_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getWalletBalances - Retrieves a summation of wallet balances by currency code${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getWalletTransactions operation
#
##############################################################################
print_getWalletTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getWalletTransactions - Retrieve wallet transactions across the system${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_invoice${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for transactions from a specific invoice${YELLOW} Specify as: filter_invoice=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_type${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for transactions with specified type${YELLOW} Specify as: filter_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).${YELLOW} Specify as: filter_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_sign${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for transactions with amount with the given sign${YELLOW} Specify as: filter_sign=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_user_id${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for transactions for specific userId${YELLOW} Specify as: filter_user_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_username${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for transactions for specific username that start with the given string${YELLOW} Specify as: filter_username=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_details${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for transactions for specific details that start with the given string${YELLOW} Specify as: filter_details=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_currency_code${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for transactions for specific currency code${YELLOW} Specify as: filter_currency_code=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getWallets operation
#
##############################################################################
print_getWallets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getWallets - Retrieve a list of wallets across the system${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateWalletBalance operation
#
##############################################################################
print_updateWalletBalance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateWalletBalance - Updates the balance for a user's wallet${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The ID of the user for whom wallet is being modified ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}currency_code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - Currency code of the user's wallet ${YELLOW}Specify as: currency_code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The requested balance modification to be made to the user's wallet" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createXsollaTokenUrl operation
#
##############################################################################
print_createXsollaTokenUrl_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createXsollaTokenUrl - Create a payment token that should be used to forward the user to Xsolla so they can complete payment${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The payment request to be sent to XSolla" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for receiveXsollaNotification operation
#
##############################################################################
print_receiveXsollaNotification_help() {
    echo ""
    echo -e "${BOLD}${WHITE}receiveXsollaNotification - Receives payment response from Xsolla${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Only used by Xsolla to call back to JSAPI after processing user payment action" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getChallengeEventLeaderboard operation
#
##############################################################################
print_getChallengeEventLeaderboard_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getChallengeEventLeaderboard - Retrieve a challenge event leaderboard details${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Lists all leaderboard entries with additional user details" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_event${OFF} ${BLUE}[Integer]${OFF}${OFF} - A sepecific challenge event id${YELLOW} Specify as: filter_event=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getChallengeEventParticipants operation
#
##############################################################################
print_getChallengeEventParticipants_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getChallengeEventParticipants - Retrieve a challenge event participant details${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Lists all user submitted scores sorted by value, including those that do not apear in the leaderboard due to value or aggregation" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_event${OFF} ${BLUE}[Integer]${OFF}${OFF} - A sepecific challenge event id${YELLOW} Specify as: filter_event=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getInvoiceReports operation
#
##############################################################################
print_getInvoiceReports_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getInvoiceReports - Retrieve invoice counts aggregated by time ranges${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}currency_code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The code for a currency to get sales data for ${YELLOW}Specify as: currency_code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}granularity${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: day)${OFF} - The time duration to aggregate by${YELLOW} Specify as: granularity=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_payment_status${OFF} ${BLUE}[String]${OFF}${OFF} - A payment status to filter results by, can be a comma separated list${YELLOW} Specify as: filter_payment_status=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_fulfillment_status${OFF} ${BLUE}[String]${OFF}${OFF} - An invoice fulfillment status to filter results by, can be a comma separated list${YELLOW} Specify as: filter_fulfillment_status=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The start of the time range to return, unix timestamp in seconds. Default is beginning of time${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The end of the time range to return, unix timestamp in seconds. Default is end of time${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getItemRevenue operation
#
##############################################################################
print_getItemRevenue_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getItemRevenue - Get item revenue info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}currency_code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The code for a currency to get sales data for ${YELLOW}Specify as: currency_code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The end of the time range to aggregate, unix timestamp in seconds. Default is end of time${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getRefundRevenue operation
#
##############################################################################
print_getRefundRevenue_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getRefundRevenue - Get refund revenue info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get basic info about revenue loss from refunds (for all item types), summed up within a time range." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}currency_code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The code for a currency to get refund data for ${YELLOW}Specify as: currency_code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The end of the time range to aggregate, unix timestamp in seconds. Default is end of time${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getRevenueByCountry operation
#
##############################################################################
print_getRevenueByCountry_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getRevenueByCountry - Get revenue info by country${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}currency_code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The code for a currency to get sales data for ${YELLOW}Specify as: currency_code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The end of the time range to aggregate, unix timestamp in seconds. Default is end of time${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getRevenueByItem operation
#
##############################################################################
print_getRevenueByItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getRevenueByItem - Get revenue info by item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}currency_code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The code for a currency to get sales data for ${YELLOW}Specify as: currency_code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The end of the time range to aggregate, unix timestamp in seconds. Default is end of time${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getSubscriptionRevenue operation
#
##############################################################################
print_getSubscriptionRevenue_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getSubscriptionRevenue - Get subscription revenue info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}currency_code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The code for a currency to get sales data for ${YELLOW}Specify as: currency_code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The end of the time range to aggregate, unix timestamp in seconds. Default is end of time${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getSubscriptionReports operation
#
##############################################################################
print_getSubscriptionReports_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getSubscriptionReports - Get a list of available subscription reports in most recent first order${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUsageByDay operation
#
##############################################################################
print_getUsageByDay_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUsageByDay - Returns aggregated endpoint usage information by day${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The beginning of the range being requested, unix timestamp in seconds${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The ending of the range being requested, unix timestamp in seconds${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}combine_endpoints${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to combine counts from different endpoint. Removes the url and method from the result object${YELLOW} Specify as: combine_endpoints=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}method${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for a certain endpoint method.  Must include url as well to work${YELLOW} Specify as: method=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}url${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for a certain endpoint.  Must include method as well to work${YELLOW} Specify as: url=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUsageByHour operation
#
##############################################################################
print_getUsageByHour_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUsageByHour - Returns aggregated endpoint usage information by hour${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The beginning of the range being requested, unix timestamp in seconds${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The ending of the range being requested, unix timestamp in seconds${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}combine_endpoints${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to combine counts from different endpoint. Removes the url and method from the result object${YELLOW} Specify as: combine_endpoints=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}method${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for a certain endpoint method.  Must include url as well to work${YELLOW} Specify as: method=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}url${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for a certain endpoint.  Must include method as well to work${YELLOW} Specify as: url=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUsageByMinute operation
#
##############################################################################
print_getUsageByMinute_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUsageByMinute - Returns aggregated endpoint usage information by minute${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The beginning of the range being requested, unix timestamp in seconds${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The ending of the range being requested, unix timestamp in seconds${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}combine_endpoints${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to combine counts from different endpoint. Removes the url and method from the result object${YELLOW} Specify as: combine_endpoints=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}method${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for a certain endpoint method.  Must include url as well to work${YELLOW} Specify as: method=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}url${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for a certain endpoint.  Must include method as well to work${YELLOW} Specify as: url=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUsageByMonth operation
#
##############################################################################
print_getUsageByMonth_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUsageByMonth - Returns aggregated endpoint usage information by month${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The beginning of the range being requested, unix timestamp in seconds${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The ending of the range being requested, unix timestamp in seconds${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}combine_endpoints${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to combine counts from different endpoint. Removes the url and method from the result object${YELLOW} Specify as: combine_endpoints=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}method${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for a certain endpoint method.  Must include url as well to work${YELLOW} Specify as: method=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}url${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for a certain endpoint.  Must include method as well to work${YELLOW} Specify as: url=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUsageByYear operation
#
##############################################################################
print_getUsageByYear_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUsageByYear - Returns aggregated endpoint usage information by year${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The beginning of the range being requested, unix timestamp in seconds${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The ending of the range being requested, unix timestamp in seconds${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}combine_endpoints${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to combine counts from different endpoints. Removes the url and method from the result object${YELLOW} Specify as: combine_endpoints=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}method${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for a certain endpoint method.  Must include url as well to work${YELLOW} Specify as: method=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}url${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for a certain endpoint.  Must include method as well to work${YELLOW} Specify as: url=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUsageEndpoints operation
#
##############################################################################
print_getUsageEndpoints_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUsageEndpoints - Returns list of endpoints called (method and url)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The beginning of the range being requested, unix timestamp in seconds${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The ending of the range being requested, unix timestamp in seconds${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserRegistrations operation
#
##############################################################################
print_getUserRegistrations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserRegistrations - Get user registration info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get user registration counts grouped by time range" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}granularity${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: day)${OFF} - The time duration to aggregate by${YELLOW} Specify as: granularity=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time${YELLOW} Specify as: start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_date${OFF} ${BLUE}[Integer]${OFF}${OFF} - The end of the time range to aggregate, unix timestamp in seconds. Default is end of time${YELLOW} Specify as: end_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addSearchIndex operation
#
##############################################################################
print_addSearchIndex_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addSearchIndex - Add a new object to an index${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Mainly intended for internal use." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The index type ${YELLOW}Specify as: type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The ID of the object ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The object to add" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addSearchMappings operation
#
##############################################################################
print_addSearchMappings_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addSearchMappings - Register reference mappings${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Add a new type mapping to connect data from one index to another, or discover an exsting one. Mainly intended for internal use." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The mappings to add" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSearchIndex operation
#
##############################################################################
print_deleteSearchIndex_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSearchIndex - Delete an object${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Mainly intended for internal use. Requires SEARCH_ADMIN." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The index type ${YELLOW}Specify as: type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The ID of the object to delete ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSearchIndexes operation
#
##############################################################################
print_deleteSearchIndexes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSearchIndexes - Delete all objects in an index${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Mainly intended for internal use" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The index type ${YELLOW}Specify as: type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for searchIndex operation
#
##############################################################################
print_searchIndex_help() {
    echo ""
    echo -e "${BOLD}${WHITE}searchIndex - Search an index${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "The body is an ElasticSearch query in JSON format. Please see their <a href='https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html'>documentation</a> for details on the format and search options. The searchable object's format depends on on the type. See individual search endpoints on other resources for details on their format." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The index type ${YELLOW}Specify as: type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The query to be used for the search" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for linkAccounts operation
#
##############################################################################
print_linkAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}linkAccounts - Link facebook account${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Links the current user account to a facebook account, using the acccess token from facebook. Can also be used to update the access token after it has expired." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The token from facebook" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=202
    echo -e "${result_color_table[${code:0:1}]}  202;Accepted${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for linkAccounts1 operation
#
##############################################################################
print_linkAccounts1_help() {
    echo ""
    echo -e "${BOLD}${WHITE}linkAccounts1 - Link google account${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Links the current user account to a google account, using the acccess token from google. Can also be used to update the access token after it has expired." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The token from google" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=202
    echo -e "${result_color_table[${code:0:1}]}  202;Accepted${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemTemplate operation
#
##############################################################################
print_createItemTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemTemplate - Create an item template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Item Templates define a type of item and the properties they have." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new item template" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createStoreItem operation
#
##############################################################################
print_createStoreItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createStoreItem - Create a store item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "SKUs have to be unique in the entire store. If a duplicate SKU is found, a 400 error is generated and the response will have a \"parameters\" field that is a list of duplicates. A duplicate is an object like {item_id, offending_sku_list}. Ex:<br /> {..., parameters: [[{item: 1, skus: [\"SKU-1\"]}]]}<br /> If an item is brand new and has duplicate SKUs within itself, the item ID will be 0.  Item subclasses are not allowed here, you will have to use their respective endpoints." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values.${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The store item object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemTemplate operation
#
##############################################################################
print_deleteItemTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemTemplate - Delete an item template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - force deleting the template if it's attached to other objects, cascade = detach${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteStoreItem operation
#
##############################################################################
print_deleteStoreItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteStoreItem - Delete a store item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the item ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBehaviors operation
#
##############################################################################
print_getBehaviors_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBehaviors - List available item behaviors${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getItemTemplate operation
#
##############################################################################
print_getItemTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getItemTemplate - Get a single item template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Item Templates define a type of item and the properties they have." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getItemTemplates operation
#
##############################################################################
print_getItemTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getItemTemplates - List and search item templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getStore operation
#
##############################################################################
print_getStore_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getStore - Get a listing of store items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "The exact structure of each items may differ to include fields specific to the type. The same is true for behaviors." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[Integer]${OFF}${OFF} - The amount of items returned${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF}${OFF} - The page of the request${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}use_catalog${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Whether to remove items that are not intended for display or not in date${YELLOW} Specify as: use_catalog=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}ignore_location${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Whether to ignore country restrictions based on the caller's location${YELLOW} Specify as: ignore_location=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}in_stock_only${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether only in-stock items should be returned.  Default value is false${YELLOW} Specify as: in_stock_only=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getStoreItem operation
#
##############################################################################
print_getStoreItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getStoreItem - Get a single store item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the item ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getStoreItems operation
#
##############################################################################
print_getStoreItems_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getStoreItems - List and search store items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_name_search${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for items whose name starts with a given string.${YELLOW} Specify as: filter_name_search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_unique_key${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for items whose unique_key is a given string.${YELLOW} Specify as: filter_unique_key=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_published${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for skus that have been published.${YELLOW} Specify as: filter_published=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_displayable${OFF} ${BLUE}[Boolean]${OFF}${OFF} - Filter for items that are displayable.${YELLOW} Specify as: filter_displayable=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_start${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the store start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ).${YELLOW} Specify as: filter_start=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_end${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the store end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ).${YELLOW} Specify as: filter_end=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_start_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the sku start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ).${YELLOW} Specify as: filter_start_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_stop_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the sku end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ).${YELLOW} Specify as: filter_stop_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_sku${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for skus whose name starts with a given string.${YELLOW} Specify as: filter_sku=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_price${OFF} ${BLUE}[String]${OFF}${OFF} - A colon separated string without spaces.  First value is the operator to search on, second value is the price of a sku.  Allowed operators: (LT, GT, LTE, GTE, EQ).${YELLOW} Specify as: filter_price=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tag${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated list without spaces of the names of tags. Will only return items with at least one of the tags.${YELLOW} Specify as: filter_tag=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_items_by_type${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for item type based on its type hint.${YELLOW} Specify as: filter_items_by_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_bundled_skus${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for skus inside bundles whose name starts with a given string.  Used only when type hint is 'bundle_item'${YELLOW} Specify as: filter_bundled_skus=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_vendor${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter for items from a given vendor, by id.${YELLOW} Specify as: filter_vendor=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for quickBuy operation
#
##############################################################################
print_quickBuy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}quickBuy - One-step purchase and pay for a single SKU item from a user's wallet${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Used to create and automatically pay an invoice for a single unit of a single SKU from a user's wallet. SKU must be priced in virtual currency and must not be an item that requires shipping. PAYMENTS_ADMIN permission is required if user ID is specified and is not the ID of the currently logged in user. If invoice price does not match expected price, purchase is aborted" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - Quick buy details" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Item has been purchased, invoice provided in response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=409
    echo -e "${result_color_table[${code:0:1}]}  409;Invoice total does not match SKU price${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemTemplate operation
#
##############################################################################
print_updateItemTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemTemplate - Update an item template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The item template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateStoreItem operation
#
##############################################################################
print_updateStoreItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateStoreItem - Update a store item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the item ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values.${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The store item object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createBundleItem operation
#
##############################################################################
print_createBundleItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createBundleItem - Create a bundle item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "The SKU for the bundle itself must be unique and there can only be one SKU.  Extra notes for price_override:  The price of all the items (multiplied by the quantity) must equal the price of the bundle.  With individual prices set, items will be processed individually and can be refunded as such.  However, if all prices are set to null, the price of the bundle will be used and will be treated as one item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values.${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The bundle item object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createBundleTemplate operation
#
##############################################################################
print_createBundleTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createBundleTemplate - Create a bundle template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Bundle Templates define a type of bundle and the properties they have." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new bundle template" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteBundleItem operation
#
##############################################################################
print_deleteBundleItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteBundleItem - Delete a bundle item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the bundle ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteBundleTemplate operation
#
##############################################################################
print_deleteBundleTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteBundleTemplate - Delete a bundle template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - force deleting the template if it's attached to other objects, cascade = detach${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBundleItem operation
#
##############################################################################
print_getBundleItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBundleItem - Get a single bundle item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the bundle ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBundleTemplate operation
#
##############################################################################
print_getBundleTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBundleTemplate - Get a single bundle template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Bundle Templates define a type of bundle and the properties they have." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBundleTemplates operation
#
##############################################################################
print_getBundleTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBundleTemplates - List and search bundle templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateBundleItem operation
#
##############################################################################
print_updateBundleItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateBundleItem - Update a bundle item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the bundle ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values.${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The bundle item object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateBundleTemplate operation
#
##############################################################################
print_updateBundleTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateBundleTemplate - Update a bundle template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The bundle template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createCouponItem operation
#
##############################################################################
print_createCouponItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createCouponItem - Create a coupon item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "SKUs have to be unique in the entire store." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values.${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The coupon item object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createCouponTemplate operation
#
##############################################################################
print_createCouponTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createCouponTemplate - Create a coupon template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Coupon Templates define a type of coupon and the properties they have." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new coupon template" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteCouponItem operation
#
##############################################################################
print_deleteCouponItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteCouponItem - Delete a coupon item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the coupon ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteCouponTemplate operation
#
##############################################################################
print_deleteCouponTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteCouponTemplate - Delete a coupon template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - force deleting the template if it's attached to other objects, cascade = detach${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCouponItem operation
#
##############################################################################
print_getCouponItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCouponItem - Get a single coupon item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the coupon ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCouponTemplate operation
#
##############################################################################
print_getCouponTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCouponTemplate - Get a single coupon template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Coupon Templates define a type of coupon and the properties they have." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCouponTemplates operation
#
##############################################################################
print_getCouponTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCouponTemplates - List and search coupon templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateCouponItem operation
#
##############################################################################
print_updateCouponItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateCouponItem - Update a coupon item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the coupon ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values.${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The coupon item object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateCouponTemplate operation
#
##############################################################################
print_updateCouponTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateCouponTemplate - Update a coupon template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The coupon template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createCatalogSale operation
#
##############################################################################
print_createCatalogSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createCatalogSale - Create a sale${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The catalog sale object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteCatalogSale operation
#
##############################################################################
print_deleteCatalogSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteCatalogSale - Delete a sale${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the sale ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCatalogSale operation
#
##############################################################################
print_getCatalogSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCatalogSale - Get a single sale${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the sale ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCatalogSales operation
#
##############################################################################
print_getCatalogSales_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCatalogSales - List and search sales${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateCatalogSale operation
#
##############################################################################
print_updateCatalogSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateCatalogSale - Update a sale${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the sale ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The catalog sale object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createShippingItem operation
#
##############################################################################
print_createShippingItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createShippingItem - Create a shipping item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "A shipping item represents a shipping option and cost. SKUs have to be unique in the entire store." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values.${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The shipping item object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createShippingTemplate operation
#
##############################################################################
print_createShippingTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createShippingTemplate - Create a shipping template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Shipping Templates define a type of shipping and the properties they have." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new shipping template" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteShippingItem operation
#
##############################################################################
print_deleteShippingItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteShippingItem - Delete a shipping item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the shipping item ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteShippingTemplate operation
#
##############################################################################
print_deleteShippingTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteShippingTemplate - Delete a shipping template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - force deleting the template if it's attached to other objects, cascade = detach${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getShippingItem operation
#
##############################################################################
print_getShippingItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getShippingItem - Get a single shipping item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the shipping item ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getShippingTemplate operation
#
##############################################################################
print_getShippingTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getShippingTemplate - Get a single shipping template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Shipping Templates define a type of shipping and the properties they have." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getShippingTemplates operation
#
##############################################################################
print_getShippingTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getShippingTemplates - List and search shipping templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateShippingItem operation
#
##############################################################################
print_updateShippingItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateShippingItem - Update a shipping item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the shipping item ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values.${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The shipping item object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateShippingTemplate operation
#
##############################################################################
print_updateShippingTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateShippingTemplate - Update a shipping template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The shipping template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addCustomDiscount operation
#
##############################################################################
print_addCustomDiscount_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addCustomDiscount - Adds a custom discount to the cart${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the cart ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The details of the discount to add" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addDiscountToCart operation
#
##############################################################################
print_addDiscountToCart_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addDiscountToCart - Adds a discount coupon to the cart${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the cart ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The request of the sku" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addItemToCart operation
#
##############################################################################
print_addItemToCart_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addItemToCart - Add an item to the cart${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Currently, carts cannot contain virtual and real currency items at the same time. Furthermore, the API only support a single virtual item at the moment" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the cart ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The cart item request object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createCart operation
#
##############################################################################
print_createCart_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createCart - Create a cart${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "You don't have to have a user to create a cart but the API requires authentication to checkout" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}owner${OFF} ${BLUE}[Integer]${OFF}${OFF} - Set the owner of a cart. If not specified, defaults to the calling user's id. If specified and is not the calling user's id, SHOPPING_CARTS_ADMIN permission is required${YELLOW} Specify as: owner=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}currency_code${OFF} ${BLUE}[String]${OFF}${OFF} - Set the currency for the cart, by currency code. May be disallowed by site settings.${YELLOW} Specify as: currency_code=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;the cart has been created, use the returned GUID to manage the cart${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCart operation
#
##############################################################################
print_getCart_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCart - Returns the cart with the given GUID${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the cart ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCarts operation
#
##############################################################################
print_getCarts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCarts - Get a list of carts${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_owner_id${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter by the id of the owner${YELLOW} Specify as: filter_owner_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getShippable operation
#
##############################################################################
print_getShippable_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getShippable - Returns whether a cart requires shipping${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the cart ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getShippingCountries operation
#
##############################################################################
print_getShippingCountries_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getShippingCountries - Get the list of available shipping countries per vendor${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Since a cart can have multiple vendors with different shipping options, the countries are broken down by vendors. Please see notes about the response object as the fields are variable." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the cart ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for removeDiscountFromCart operation
#
##############################################################################
print_removeDiscountFromCart_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeDiscountFromCart - Removes a discount coupon from the cart${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the cart ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The SKU code of the coupon to remove ${YELLOW}Specify as: code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setCartCurrency operation
#
##############################################################################
print_setCartCurrency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setCartCurrency - Sets the currency to use for the cart${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "May be disallowed by site settings." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the cart ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The code of the currency" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setCartOwner operation
#
##############################################################################
print_setCartOwner_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setCartOwner - Sets the owner of a cart if none is set already${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the cart ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The id of the user" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=202
    echo -e "${result_color_table[${code:0:1}]}  202;Accepted${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemInCart operation
#
##############################################################################
print_updateItemInCart_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemInCart - Changes the quantity of an item already in the cart${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "A quantity of zero will remove the item from the cart altogether." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the cart ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The cart item request object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateShippingAddress operation
#
##############################################################################
print_updateShippingAddress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateShippingAddress - Modifies or sets the order shipping address${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the cart ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The cart shipping address request object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createSubscription operation
#
##############################################################################
print_createSubscription_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createSubscription - Creates a subscription item and associated plans${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The subscription to be created" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createSubscriptionTemplate operation
#
##############################################################################
print_createSubscriptionTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createSubscriptionTemplate - Create a subscription template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Subscription Templates define a type of subscription and the properties they have." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new subscription template" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSubscription operation
#
##############################################################################
print_deleteSubscription_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSubscription - Delete a subscription plan${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Must not be locked or a migration target" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the subscription ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}plan_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the plan ${YELLOW}Specify as: plan_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSubscriptionTemplate operation
#
##############################################################################
print_deleteSubscriptionTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSubscriptionTemplate - Delete a subscription template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - force deleting the template if it's attached to other objects, cascade = detach${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getSubscription operation
#
##############################################################################
print_getSubscription_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getSubscription - Retrieve a single subscription item and associated plans${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the subscription ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getSubscriptionTemplate operation
#
##############################################################################
print_getSubscriptionTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getSubscriptionTemplate - Get a single subscription template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Subscription Templates define a type of subscription and the properties they have." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getSubscriptionTemplates operation
#
##############################################################################
print_getSubscriptionTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getSubscriptionTemplates - List and search subscription templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getSubscriptions operation
#
##############################################################################
print_getSubscriptions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getSubscriptions - List available subscription items and associated plans${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for processSubscriptions operation
#
##############################################################################
print_processSubscriptions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}processSubscriptions - Processes subscriptions and charge dues${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSubscription operation
#
##############################################################################
print_updateSubscription_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSubscription - Updates a subscription item and associated plans${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Will not remove plans left out" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the subscription ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The subscription resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSubscriptionTemplate operation
#
##############################################################################
print_updateSubscriptionTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSubscriptionTemplate - Update a subscription template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The subscription template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createVendor operation
#
##############################################################################
print_createVendor_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createVendor - Create a vendor${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The vendor" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createVendorTemplate operation
#
##############################################################################
print_createVendorTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createVendorTemplate - Create a vendor template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Vendor Templates define a type of vendor and the properties they have." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new vendor template" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteVendor operation
#
##############################################################################
print_deleteVendor_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteVendor - Delete a vendor${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the vendor ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteVendorTemplate operation
#
##############################################################################
print_deleteVendorTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteVendorTemplate - Delete a vendor template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - force deleting the template if it's attached to other objects, cascade = detach${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getVendor operation
#
##############################################################################
print_getVendor_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getVendor - Get a single vendor${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the vendor ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getVendorTemplate operation
#
##############################################################################
print_getVendorTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getVendorTemplate - Get a single vendor template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Vendor Templates define a type of vendor and the properties they have." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getVendorTemplates operation
#
##############################################################################
print_getVendorTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getVendorTemplates - List and search vendor templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: 1)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getVendors operation
#
##############################################################################
print_getVendors_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getVendors - List and search vendors${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filters vendors by name starting with the text provided in the filter${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateVendor operation
#
##############################################################################
print_updateVendor_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateVendor - Update a vendor${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the vendor ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The vendor" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateVendorTemplate operation
#
##############################################################################
print_updateVendorTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateVendorTemplate - Update a vendor template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The vendor template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createCountryTax operation
#
##############################################################################
print_createCountryTax_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createCountryTax - Create a country tax${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The tax object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createStateTax operation
#
##############################################################################
print_createStateTax_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createStateTax - Create a state tax${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}country_code_iso3${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The iso3 code of the country ${YELLOW}Specify as: country_code_iso3=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The tax object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteCountryTax operation
#
##############################################################################
print_deleteCountryTax_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteCountryTax - Delete an existing tax${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}country_code_iso3${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The iso3 code of the country ${YELLOW}Specify as: country_code_iso3=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteStateTax operation
#
##############################################################################
print_deleteStateTax_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteStateTax - Delete an existing state tax${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}country_code_iso3${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The iso3 code of the country ${YELLOW}Specify as: country_code_iso3=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}state_code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The code of the state ${YELLOW}Specify as: state_code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCountryTax operation
#
##############################################################################
print_getCountryTax_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCountryTax - Get a single tax${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}country_code_iso3${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The iso3 code of the country ${YELLOW}Specify as: country_code_iso3=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCountryTaxes operation
#
##############################################################################
print_getCountryTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCountryTaxes - List and search taxes${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of taxes" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: name:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getStateTax operation
#
##############################################################################
print_getStateTax_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getStateTax - Get a single state tax${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}country_code_iso3${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The iso3 code of the country ${YELLOW}Specify as: country_code_iso3=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}state_code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The code of the state ${YELLOW}Specify as: state_code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getStateTaxesForCountries operation
#
##############################################################################
print_getStateTaxesForCountries_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getStateTaxesForCountries - List and search taxes across all countries${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of taxes" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getStateTaxesForCountry operation
#
##############################################################################
print_getStateTaxesForCountry_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getStateTaxesForCountry - List and search taxes within a country${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of taxes" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}country_code_iso3${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The iso3 code of the country ${YELLOW}Specify as: country_code_iso3=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateCountryTax operation
#
##############################################################################
print_updateCountryTax_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateCountryTax - Create or update a tax${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}country_code_iso3${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The iso3 code of the country ${YELLOW}Specify as: country_code_iso3=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The tax object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateStateTax operation
#
##############################################################################
print_updateStateTax_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateStateTax - Create or update a state tax${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}country_code_iso3${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The iso3 code of the country ${YELLOW}Specify as: country_code_iso3=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}state_code${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The code of the state ${YELLOW}Specify as: state_code=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The tax object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getTemplatePropertyType operation
#
##############################################################################
print_getTemplatePropertyType_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getTemplatePropertyType - Get details for a template property type${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - type ${YELLOW}Specify as: type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getTemplatePropertyTypes operation
#
##############################################################################
print_getTemplatePropertyTypes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getTemplatePropertyTypes - List template property types${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addUserTag operation
#
##############################################################################
print_addUserTag_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addUserTag - Add a tag to a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - tag" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createUserTemplate operation
#
##############################################################################
print_createUserTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createUserTemplate - Create a user template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "User Templates define a type of user and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The user template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteUserTemplate operation
#
##############################################################################
print_deleteUserTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteUserTemplate - Delete a user template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUser operation
#
##############################################################################
print_getUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUser - Get a single user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Additional private info is included as USERS_ADMIN" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user or 'me' ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserTags operation
#
##############################################################################
print_getUserTags_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserTags - List tags for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserTemplate operation
#
##############################################################################
print_getUserTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserTemplate - Get a single user template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserTemplates operation
#
##############################################################################
print_getUserTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserTemplates - List and search user templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUsers operation
#
##############################################################################
print_getUsers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUsers - List and search users${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Additional private info is included as USERS_ADMIN" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_displayname${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for users whose display name starts with provided string.${YELLOW} Specify as: filter_displayname=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_email${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for users whose email starts with provided string. Requires USERS_ADMIN permission${YELLOW} Specify as: filter_email=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_firstname${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for users whose first name starts with provided string. Requires USERS_ADMIN permission${YELLOW} Specify as: filter_firstname=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_fullname${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for users whose full name starts with provided string. Requires USERS_ADMIN permission${YELLOW} Specify as: filter_fullname=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_lastname${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for users whose last name starts with provided string. Requires USERS_ADMIN permission${YELLOW} Specify as: filter_lastname=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_username${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for users whose username starts with the provided string. Requires USERS_ADMIN permission${YELLOW} Specify as: filter_username=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tag${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for users who have a given tag${YELLOW} Specify as: filter_tag=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_group${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for users in a given group, by unique name${YELLOW} Specify as: filter_group=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_role${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for users with a given role${YELLOW} Specify as: filter_role=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_search${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for users whose display_name starts with the provided string, or username if display_name is null${YELLOW} Specify as: filter_search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for passwordReset operation
#
##############################################################################
print_passwordReset_help() {
    echo ""
    echo -e "${BOLD}${WHITE}passwordReset - Choose a new password after a reset${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Finish resetting a user's password using the secret provided from the password-reset endpoint.  Password should be in plain text and will be encrypted on receipt. Use SSL for security." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new password request object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for registerUser operation
#
##############################################################################
print_registerUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}registerUser - Register a new user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Password should be in plain text and will be encrypted on receipt. Use SSL for security" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The user resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for removeUserTag operation
#
##############################################################################
print_removeUserTag_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeUserTag - Remove a tag from a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}tag${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The tag to remove ${YELLOW}Specify as: tag=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setPassword operation
#
##############################################################################
print_setPassword_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setPassword - Set a user's password${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Password should be in plain text and will be encrypted on receipt. Use SSL for security." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new plain text password" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for startPasswordReset operation
#
##############################################################################
print_startPasswordReset_help() {
    echo ""
    echo -e "${BOLD}${WHITE}startPasswordReset - Reset a user's password${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "A reset code will be generated and a 'forgot_password' BRE event will be fired with that code.  The default system rule will send an email to the selected user if an email service has been setup. You can modify that rule in BRE to send an SMS instead or any other type of notification as you see fit" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for submitPasswordReset operation
#
##############################################################################
print_submitPasswordReset_help() {
    echo ""
    echo -e "${BOLD}${WHITE}submitPasswordReset - Reset a user's password without user id${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "A reset code will be generated and a 'forgot_password' BRE event will be fired with that code.  The default system rule will send an email to the selected user if an email service has been setup. You can modify that rule in BRE to send an SMS instead or any other type of notification as you see fit.  Must submit their email, username, or mobile phone number" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - An object containing one of three methods to look up a user" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateUser operation
#
##############################################################################
print_updateUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateUser - Update a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Password will not be edited on this endpoint, use password specific endpoints." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user or 'me' ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The user resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateUserTemplate operation
#
##############################################################################
print_updateUserTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateUserTemplate - Update a user template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The user template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createAddress operation
#
##############################################################################
print_createAddress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createAddress - Create a new address${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new address" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteAddress operation
#
##############################################################################
print_deleteAddress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteAddress - Delete an address${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the address ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getAddress operation
#
##############################################################################
print_getAddress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getAddress - Get a single address${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the address ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getAddresses operation
#
##############################################################################
print_getAddresses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getAddresses - List and search addresses${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateAddress operation
#
##############################################################################
print_updateAddress_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateAddress - Update an address${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the address ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The saved address resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addFriend operation
#
##############################################################################
print_addFriend_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addFriend - Add a friend${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "As a user, either creates or confirm a pending request. As an admin, call this endpoint twice while inverting the IDs to create a confirmed friendship." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user or 'me' if logged in ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user to befriend ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getFriends operation
#
##############################################################################
print_getFriends_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getFriends - Get friends list${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user or 'me' ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getInviteToken operation
#
##############################################################################
print_getInviteToken_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getInviteToken - Returns the invite token${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "This is a unique invite token that allows direct connection to the request user.  Exposing that token presents privacy issues if the token is leaked. Use friend request flow instead if confirmation is required" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user or 'me' if logged in ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getInvites operation
#
##############################################################################
print_getInvites_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getInvites - Get pending invites${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Invites that the specified user received" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user or 'me' ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for redeemFriendshipToken operation
#
##############################################################################
print_redeemFriendshipToken_help() {
    echo ""
    echo -e "${BOLD}${WHITE}redeemFriendshipToken - Redeem friendship token${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Immediately connects the requested user with the user mapped by the provided invite token" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user or 'me' if logged in ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The invite token" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for removeOrDeclineFriend operation
#
##############################################################################
print_removeOrDeclineFriend_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeOrDeclineFriend - Remove or decline a friend${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user or 'me' if logged in ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user to befriend ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addMemberToGroup operation
#
##############################################################################
print_addMemberToGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addMemberToGroup - Adds a new member to the group${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}unique_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The group unique name ${YELLOW}Specify as: unique_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - The id and status for a user to add to the group" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addMembersToGroup operation
#
##############################################################################
print_addMembersToGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addMembersToGroup - Adds multiple members to the group${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}unique_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The group unique name ${YELLOW}Specify as: unique_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - The id and status for a list of users to add to the group" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createGroup operation
#
##############################################################################
print_createGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createGroup - Create a group${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new group" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createGroupTemplate operation
#
##############################################################################
print_createGroupTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createGroupTemplate - Create a group template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Group Templates define a type of group and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The group template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteGroup operation
#
##############################################################################
print_deleteGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteGroup - Removes a group from the system IF no resources are attached to it${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}unique_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The group unique name ${YELLOW}Specify as: unique_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteGroupTemplate operation
#
##############################################################################
print_deleteGroupTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteGroupTemplate - Delete a group template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getGroup operation
#
##############################################################################
print_getGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getGroup - Loads a specific group's details${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}unique_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The group unique name ${YELLOW}Specify as: unique_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getGroupMember operation
#
##############################################################################
print_getGroupMember_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getGroupMember - Get a user from a group${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}unique_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The group unique name ${YELLOW}Specify as: unique_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getGroupMembers operation
#
##############################################################################
print_getGroupMembers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getGroupMembers - Lists members of the group${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}unique_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The group unique name ${YELLOW}Specify as: unique_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getGroupTemplate operation
#
##############################################################################
print_getGroupTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getGroupTemplate - Get a single group template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getGroupTemplates operation
#
##############################################################################
print_getGroupTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getGroupTemplates - List and search group templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getGroupsForUser operation
#
##############################################################################
print_getGroupsForUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getGroupsForUser - List groups a user is in${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for removeGroupMember operation
#
##############################################################################
print_removeGroupMember_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeGroupMember - Removes a user from a group${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}unique_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The group unique name ${YELLOW}Specify as: unique_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user to remove ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateGroup operation
#
##############################################################################
print_updateGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateGroup - Update a group${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}unique_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The group unique name ${YELLOW}Specify as: unique_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The updated group" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateGroupMemberStatus operation
#
##############################################################################
print_updateGroupMemberStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateGroupMemberStatus - Change a user's status${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}unique_name${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The group unique name ${YELLOW}Specify as: unique_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The user id of the member to modify ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - The new status for the user" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateGroupTemplate operation
#
##############################################################################
print_updateGroupTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateGroupTemplate - Update a group template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The group template resource object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateGroups operation
#
##############################################################################
print_updateGroups_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateGroups - List and search groups${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter_template${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for groups using a specific template, by id${YELLOW} Specify as: filter_template=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_member_count${OFF} ${BLUE}[String]${OFF}${OFF} - Filters groups by member count. Multiple values possible for range search. Format: filter_member_count=OP,ts&... where OP in (GT, LT, GOE, LOE, EQ). Ex: filter_member_count=GT,14,LT,17${YELLOW} Specify as: filter_member_count=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for groups with names starting with the given string${YELLOW} Specify as: filter_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_unique_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for groups whose unique_name starts with provided string${YELLOW} Specify as: filter_unique_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_parent${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for groups with a specific parent, by unique name${YELLOW} Specify as: filter_parent=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_status${OFF} ${BLUE}[String]${OFF}${OFF} - Filter for groups with a certain status${YELLOW} Specify as: filter_status=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: name:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addItemToUserInventory operation
#
##############################################################################
print_addItemToUserInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addItemToUserInventory - Adds an item to the user inventory${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The user inventory add request object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for checkUserEntitlementItem operation
#
##############################################################################
print_checkUserEntitlementItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}checkUserEntitlementItem - Check for access to an item without consuming${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Useful for pre-check and accounts for all various buisness rules" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user to check for or 'me' for logged in user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}item_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the item ${YELLOW}Specify as: item_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sku${OFF} ${BLUE}[String]${OFF}${OFF} - The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out${YELLOW} Specify as: sku=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createEntitlementItem operation
#
##############################################################################
print_createEntitlementItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createEntitlementItem - Create an entitlement item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values.${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The entitlement item object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createEntitlementTemplate operation
#
##############################################################################
print_createEntitlementTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createEntitlementTemplate - Create an entitlement template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Entitlement templates define a type of entitlement and the properties they have" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The entitlement template to be created" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteEntitlementItem operation
#
##############################################################################
print_deleteEntitlementItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteEntitlementItem - Delete an entitlement item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}entitlement_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the entitlement ${YELLOW}Specify as: entitlement_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteEntitlementTemplate operation
#
##############################################################################
print_deleteEntitlementTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteEntitlementTemplate - Delete an entitlement template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "If cascade = 'detach', it will force delete the template even if it's attached to other objects" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[String]${OFF}${OFF} - The value needed to delete used templates${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getEntitlementItem operation
#
##############################################################################
print_getEntitlementItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getEntitlementItem - Get a single entitlement item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}entitlement_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the entitlement ${YELLOW}Specify as: entitlement_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getEntitlementItems operation
#
##############################################################################
print_getEntitlementItems_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getEntitlementItems - List and search entitlement items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getEntitlementTemplate operation
#
##############################################################################
print_getEntitlementTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getEntitlementTemplate - Get a single entitlement template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getEntitlementTemplates operation
#
##############################################################################
print_getEntitlementTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getEntitlementTemplates - List and search entitlement templates${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF} ${CYAN}(default: id:ASC)${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserInventories operation
#
##############################################################################
print_getUserInventories_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserInventories - List the user inventory entries for a given user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}inactive${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - If true, accepts inactive user inventories${YELLOW} Specify as: inactive=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_item_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter by items whose name starts with a string${YELLOW} Specify as: filter_item_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_item_id${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter by item id${YELLOW} Specify as: filter_item_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_username${OFF} ${BLUE}[String]${OFF}${OFF} - Filter by entries owned by the user with the specified username${YELLOW} Specify as: filter_username=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_group${OFF} ${BLUE}[String]${OFF}${OFF} - Filter by entries owned by the users in a given group, by unique name${YELLOW} Specify as: filter_group=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).${YELLOW} Specify as: filter_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserInventory operation
#
##############################################################################
print_getUserInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserInventory - Get an inventory entry${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the inventory owner or 'me' for the logged in user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user inventory ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserInventoryLog operation
#
##############################################################################
print_getUserInventoryLog_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserInventoryLog - List the log entries for this inventory entry${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the inventory owner or 'me' for the logged in user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user inventory ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUsersInventory operation
#
##############################################################################
print_getUsersInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUsersInventory - List the user inventory entries for all users${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}inactive${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - If true, accepts inactive user inventories${YELLOW} Specify as: inactive=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_item_name${OFF} ${BLUE}[String]${OFF}${OFF} - Filter by items whose name starts with a string${YELLOW} Specify as: filter_item_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_item_id${OFF} ${BLUE}[Integer]${OFF}${OFF} - Filter by item id${YELLOW} Specify as: filter_item_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_username${OFF} ${BLUE}[String]${OFF}${OFF} - Filter by entries owned by the user with the specified username${YELLOW} Specify as: filter_username=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_group${OFF} ${BLUE}[String]${OFF}${OFF} - Filter by entries owned by the users in a given group, by unique name${YELLOW} Specify as: filter_group=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_date${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).${YELLOW} Specify as: filter_date=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for grantUserEntitlement operation
#
##############################################################################
print_grantUserEntitlement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}grantUserEntitlement - Grant an entitlement${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user to grant the entitlement to ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - grantRequest" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=202
    echo -e "${result_color_table[${code:0:1}]}  202;Accepted${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateEntitlementItem operation
#
##############################################################################
print_updateEntitlementItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateEntitlementItem - Update an entitlement item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}entitlement_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the entitlement ${YELLOW}Specify as: entitlement_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cascade${OFF} ${BLUE}[Boolean]${OFF} ${CYAN}(default: false)${OFF} - Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values.${YELLOW} Specify as: cascade=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The entitlement item object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateEntitlementTemplate operation
#
##############################################################################
print_updateEntitlementTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateEntitlementTemplate - Update an entitlement template${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the template ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The updated template" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateUserInventoryBehaviorData operation
#
##############################################################################
print_updateUserInventoryBehaviorData_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateUserInventoryBehaviorData - Set the behavior data for an inventory entry${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user inventory ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The data map" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateUserInventoryExpires operation
#
##############################################################################
print_updateUserInventoryExpires_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateUserInventoryExpires - Set the expiration date${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - user_id ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user inventory ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new expiration date as a unix timestamp in seconds. May be null (no body)." | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateUserInventoryStatus operation
#
##############################################################################
print_updateUserInventoryStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateUserInventoryStatus - Set the status for an inventory entry${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user inventory ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The inventory status object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for useUserEntitlementItem operation
#
##############################################################################
print_useUserEntitlementItem_help() {
    echo ""
    echo -e "${BOLD}${WHITE}useUserEntitlementItem - Use an item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user to check for or 'me' for logged in user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}item_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the item ${YELLOW}Specify as: item_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sku${OFF} ${BLUE}[String]${OFF}${OFF} - The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out${YELLOW} Specify as: sku=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}info${OFF} ${BLUE}[String]${OFF}${OFF} - Any additional info to add to the log about this use${YELLOW} Specify as: info=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createUserRelationship operation
#
##############################################################################
print_createUserRelationship_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createUserRelationship - Create a user relationship${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new relationship" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Created${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteUserRelationship operation
#
##############################################################################
print_deleteUserRelationship_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteUserRelationship - Delete a user relationship${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the relationship ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserRelationship operation
#
##############################################################################
print_getUserRelationship_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserRelationship - Get a user relationship${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the relationship ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserRelationships operation
#
##############################################################################
print_getUserRelationships_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserRelationships - Get a list of user relationships${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateUserRelationship operation
#
##############################################################################
print_updateUserRelationship_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateUserRelationship - Update a user relationship${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the relationship ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The new relationship" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserSubscriptionDetails operation
#
##############################################################################
print_getUserSubscriptionDetails_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserSubscriptionDetails - Get details about a user's subscription${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}inventory_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user's inventory ${YELLOW}Specify as: inventory_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUsersSubscriptionDetails operation
#
##############################################################################
print_getUsersSubscriptionDetails_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUsersSubscriptionDetails - Get details about a user's subscriptions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reactivateUserSubscription operation
#
##############################################################################
print_reactivateUserSubscription_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reactivateUserSubscription - Reactivate a subscription and charge fee${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}inventory_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user's inventory ${YELLOW}Specify as: inventory_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The reactivate subscription request object inventory" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setSubscriptionBillDate operation
#
##############################################################################
print_setSubscriptionBillDate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setSubscriptionBillDate - Set a new date to bill a subscription on${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}inventory_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user's inventory ${YELLOW}Specify as: inventory_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - The new bill date. Unix timestamp in seconds" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setSubscriptionPaymentMethod operation
#
##############################################################################
print_setSubscriptionPaymentMethod_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setSubscriptionPaymentMethod - Set the payment method to use for a subscription${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "May send null to use floating default" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}inventory_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user's inventory ${YELLOW}Specify as: inventory_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The id of the payment method" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setSubscriptionStatus operation
#
##############################################################################
print_setSubscriptionStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setSubscriptionStatus - Set the status of a subscription${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Note that the new status may be blocked if the system is not configured to allow the current status to be changed to the new, to enforce proper flow. The default options for statuses are shown below but may be altered for special use cases" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}inventory_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user's inventory ${YELLOW}Specify as: inventory_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: ('current', 'canceled', 'stopped', 'payment_failed', 'suspended')" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setUserSubscriptionPlan operation
#
##############################################################################
print_setUserSubscriptionPlan_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setUserSubscriptionPlan - Set a new subscription plan for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}inventory_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user's inventory ${YELLOW}Specify as: inventory_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The id of the new plan. Must be from the same subscription" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setUserSubscriptionPrice operation
#
##############################################################################
print_setUserSubscriptionPrice_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setUserSubscriptionPrice - Set a new subscription price for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "This new price will be what the user is charged at the begining of each new period. This override is specific to the current subscription and will not carry over if they end and later re-subscribe. It will persist if the plan is changed using the setUserSubscriptionPlan endpoint." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}inventory_id${OFF} ${BLUE}[Integer]${OFF} ${RED}(required)${OFF}${OFF} - The id of the user's inventory ${YELLOW}Specify as: inventory_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - override" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No Content${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getBatch operation
#
##############################################################################
print_getBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getBatch - Get batch result with token${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Tokens expire in 24 hours" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}token${OFF} ${BLUE}[String]${OFF} ${RED}(required)${OFF}${OFF} - token ${YELLOW}Specify as: token=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=202
    echo -e "${result_color_table[${code:0:1}]}  202;Accepted${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=207
    echo -e "${result_color_table[${code:0:1}]}  207;Multi-Status${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for sendBatch operation
#
##############################################################################
print_sendBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}sendBatch - Request to run API call given the method, content type, path url, and body of request${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Should the request take longer than one of the alloted timeout parameters, a token will be returned instead, which can be used on the token endpoint in this service" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The batch object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=207
    echo -e "${result_color_table[${code:0:1}]}  207;Multi-Status${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getHealth operation
#
##############################################################################
print_getHealth_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getHealth - Get health info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteMaintenance operation
#
##############################################################################
print_deleteMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteMaintenance - Delete maintenance info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getMaintenance operation
#
##############################################################################
print_getMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getMaintenance - Get current maintenance info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get current maintenance info. 404 if no maintenance." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;maintenance${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;no maintenance${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for setMaintenance operation
#
##############################################################################
print_setMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setMaintenance - Set current maintenance info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The maintenance object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateMaintenance operation
#
##############################################################################
print_updateMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateMaintenance - Update current maintenance info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - The maintenance object" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserLocationLog operation
#
##############################################################################
print_getUserLocationLog_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserLocationLog - Returns the authentication log for a user${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "A log entry is recorded everytime a user requests a new token. Standard pagination available" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[Integer]${OFF}${OFF} - The user id${YELLOW} Specify as: user_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 25)${OFF} - The number of objects returned per page${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[Integer]${OFF} ${CYAN}(default: 1)${OFF} - The number of the page returned, starting with 1${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[String]${OFF}${OFF} - A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUserTokenDetails operation
#
##############################################################################
print_getUserTokenDetails_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUserTokenDetails - Returns the authentication token details. Use /users endpoint for detailed user's info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getVersion operation
#
##############################################################################
print_getVersion_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getVersion - Get current version info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorized${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}


##############################################################################
#
# Call getOAuthToken operation
#
##############################################################################
call_getOAuthToken() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/oauth/token" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createActivity operation
#
##############################################################################
call_createActivity() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/activities" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createActivityOccurrence operation
#
##############################################################################
call_createActivityOccurrence() {
    local path_parameter_names=()
    local query_parameter_names=(test)
    local path

    path=$(build_request_path "/activity-occurrences" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createActivityTemplate operation
#
##############################################################################
call_createActivityTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/activities/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteActivity operation
#
##############################################################################
call_deleteActivity() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/activities/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteActivityTemplate operation
#
##############################################################################
call_deleteActivityTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/activities/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getActivities operation
#
##############################################################################
call_getActivities() {
    local path_parameter_names=()
    local query_parameter_names=(filter_template filter_name filter_id size page order)
    local path

    path=$(build_request_path "/activities" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getActivity operation
#
##############################################################################
call_getActivity() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/activities/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getActivityTemplate operation
#
##############################################################################
call_getActivityTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/activities/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getActivityTemplates operation
#
##############################################################################
call_getActivityTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/activities/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call setActivityOccurrenceResults operation
#
##############################################################################
call_setActivityOccurrenceResults() {
    local path_parameter_names=(activity_occurrence_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/activity-occurrences/{activity_occurrence_id}/results" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateActivity operation
#
##############################################################################
call_updateActivity() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/activities/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateActivityOccurrence operation
#
##############################################################################
call_updateActivityOccurrence() {
    local path_parameter_names=(activity_occurrence_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/activity-occurrences/{activity_occurrence_id}/status" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateActivityTemplate operation
#
##############################################################################
call_updateActivityTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/activities/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getDownloadURL operation
#
##############################################################################
call_getDownloadURL() {
    local path_parameter_names=()
    local query_parameter_names=(bucket path expiration)
    local path

    path=$(build_request_path "/amazon/s3/downloadurl" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getSignedS3URL operation
#
##############################################################################
call_getSignedS3URL() {
    local path_parameter_names=()
    local query_parameter_names=(filename content_type)
    local path

    path=$(build_request_path "/amazon/s3/signedposturl" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createClient operation
#
##############################################################################
call_createClient() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/clients" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteClient operation
#
##############################################################################
call_deleteClient() {
    local path_parameter_names=(client_key)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/clients/{client_key}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getClient operation
#
##############################################################################
call_getClient() {
    local path_parameter_names=(client_key)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/clients/{client_key}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getClientGrantTypes operation
#
##############################################################################
call_getClientGrantTypes() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/clients/grant-types" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getClients operation
#
##############################################################################
call_getClients() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/auth/clients" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call setClientGrantTypes operation
#
##############################################################################
call_setClientGrantTypes() {
    local path_parameter_names=(client_key)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/clients/{client_key}/grant-types" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setClientRedirectUris operation
#
##############################################################################
call_setClientRedirectUris() {
    local path_parameter_names=(client_key)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/clients/{client_key}/redirect-uris" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateClient operation
#
##############################################################################
call_updateClient() {
    local path_parameter_names=(client_key)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/clients/{client_key}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createPermission operation
#
##############################################################################
call_createPermission() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/permissions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deletePermission operation
#
##############################################################################
call_deletePermission() {
    local path_parameter_names=(permission)
    local query_parameter_names=(force)
    local path

    path=$(build_request_path "/auth/permissions/{permission}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPermission operation
#
##############################################################################
call_getPermission() {
    local path_parameter_names=(permission)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/permissions/{permission}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPermissions operation
#
##############################################################################
call_getPermissions() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/auth/permissions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updatePermission operation
#
##############################################################################
call_updatePermission() {
    local path_parameter_names=(permission)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/permissions/{permission}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createRole operation
#
##############################################################################
call_createRole() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/roles" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteRole operation
#
##############################################################################
call_deleteRole() {
    local path_parameter_names=(role)
    local query_parameter_names=(force)
    local path

    path=$(build_request_path "/auth/roles/{role}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getClientRoles operation
#
##############################################################################
call_getClientRoles() {
    local path_parameter_names=(client_key)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/clients/{client_key}/roles" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getRole operation
#
##############################################################################
call_getRole() {
    local path_parameter_names=(role)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/roles/{role}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getRoles operation
#
##############################################################################
call_getRoles() {
    local path_parameter_names=()
    local query_parameter_names=(filter_name filter_role size page order)
    local path

    path=$(build_request_path "/auth/roles" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserRoles operation
#
##############################################################################
call_getUserRoles() {
    local path_parameter_names=(user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/users/{user_id}/roles" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call setClientRoles operation
#
##############################################################################
call_setClientRoles() {
    local path_parameter_names=(client_key)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/clients/{client_key}/roles" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setPermissionsForRole operation
#
##############################################################################
call_setPermissionsForRole() {
    local path_parameter_names=(role)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/roles/{role}/permissions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setUserRoles operation
#
##############################################################################
call_setUserRoles() {
    local path_parameter_names=(user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/users/{user_id}/roles" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateRole operation
#
##############################################################################
call_updateRole() {
    local path_parameter_names=(role)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/roles/{role}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteTokens operation
#
##############################################################################
call_deleteTokens() {
    local path_parameter_names=()
    local query_parameter_names=(username client_id)
    local path

    path=$(build_request_path "/auth/tokens" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getToken operation
#
##############################################################################
call_getToken() {
    local path_parameter_names=(username client_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/auth/tokens/{username}/{client_id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getTokens operation
#
##############################################################################
call_getTokens() {
    local path_parameter_names=()
    local query_parameter_names=(filter_client_id filter_username size page order)
    local path

    path=$(build_request_path "/auth/tokens" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBREActions operation
#
##############################################################################
call_getBREActions() {
    local path_parameter_names=()
    local query_parameter_names=(filter_category filter_name filter_tags filter_search)
    local path

    path=$(build_request_path "/bre/actions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createBRECategoryTemplate operation
#
##############################################################################
call_createBRECategoryTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/categories/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteBRECategoryTemplate operation
#
##############################################################################
call_deleteBRECategoryTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/bre/categories/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBRECategories operation
#
##############################################################################
call_getBRECategories() {
    local path_parameter_names=()
    local query_parameter_names=(size page)
    local path

    path=$(build_request_path "/bre/categories" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBRECategory operation
#
##############################################################################
call_getBRECategory() {
    local path_parameter_names=(name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/categories/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBRECategoryTemplate operation
#
##############################################################################
call_getBRECategoryTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/categories/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBRECategoryTemplates operation
#
##############################################################################
call_getBRECategoryTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/bre/categories/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateBRECategory operation
#
##############################################################################
call_updateBRECategory() {
    local path_parameter_names=(name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/categories/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateBRECategoryTemplate operation
#
##############################################################################
call_updateBRECategoryTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/categories/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call sendBREEvent operation
#
##############################################################################
call_sendBREEvent() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/events" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getBREExpressions operation
#
##############################################################################
call_getBREExpressions() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/expressions/lookup" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createBREGlobal operation
#
##############################################################################
call_createBREGlobal() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/globals/definitions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteBREGlobal operation
#
##############################################################################
call_deleteBREGlobal() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/globals/definitions/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBREGlobal operation
#
##############################################################################
call_getBREGlobal() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/globals/definitions/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBREGlobals operation
#
##############################################################################
call_getBREGlobals() {
    local path_parameter_names=()
    local query_parameter_names=(filter_system size page)
    local path

    path=$(build_request_path "/bre/globals/definitions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateBREGlobal operation
#
##############################################################################
call_updateBREGlobal() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/globals/definitions/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createBRERule operation
#
##############################################################################
call_createBRERule() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/rules" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteBRERule operation
#
##############################################################################
call_deleteBRERule() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/rules/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBREExpressionAsString operation
#
##############################################################################
call_getBREExpressionAsString() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/rules/expression-as-string" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getBRERule operation
#
##############################################################################
call_getBRERule() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/rules/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBRERules operation
#
##############################################################################
call_getBRERules() {
    local path_parameter_names=()
    local query_parameter_names=(filter_name filter_enabled filter_system filter_trigger filter_action filter_condition size page)
    local path

    path=$(build_request_path "/bre/rules" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call setBRERule operation
#
##############################################################################
call_setBRERule() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/rules/{id}/enabled" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateBRERule operation
#
##############################################################################
call_updateBRERule() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/rules/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createBRETrigger operation
#
##############################################################################
call_createBRETrigger() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/triggers" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteBRETrigger operation
#
##############################################################################
call_deleteBRETrigger() {
    local path_parameter_names=(event_name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/triggers/{event_name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBRETrigger operation
#
##############################################################################
call_getBRETrigger() {
    local path_parameter_names=(event_name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/triggers/{event_name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBRETriggers operation
#
##############################################################################
call_getBRETriggers() {
    local path_parameter_names=()
    local query_parameter_names=(filter_system filter_category filter_tags filter_name filter_search size page)
    local path

    path=$(build_request_path "/bre/triggers" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateBRETrigger operation
#
##############################################################################
call_updateBRETrigger() {
    local path_parameter_names=(event_name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/triggers/{event_name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getBREVariableTypes operation
#
##############################################################################
call_getBREVariableTypes() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/variable-types" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBREVariableValues operation
#
##############################################################################
call_getBREVariableValues() {
    local path_parameter_names=(name)
    local query_parameter_names=(filter_name size page)
    local path

    path=$(build_request_path "/bre/variable-types/{name}/values" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call addChallengeToCampaign operation
#
##############################################################################
call_addChallengeToCampaign() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/campaigns/{id}/challenges" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createCampaign operation
#
##############################################################################
call_createCampaign() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/campaigns" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createCampaignTemplate operation
#
##############################################################################
call_createCampaignTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/campaigns/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteCampaign operation
#
##############################################################################
call_deleteCampaign() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/campaigns/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteCampaignTemplate operation
#
##############################################################################
call_deleteCampaignTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/campaigns/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCampaign operation
#
##############################################################################
call_getCampaign() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/campaigns/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCampaignChallenges operation
#
##############################################################################
call_getCampaignChallenges() {
    local path_parameter_names=(id)
    local query_parameter_names=(filter_start_date filter_end_date size page order)
    local path

    path=$(build_request_path "/campaigns/{id}/challenges" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCampaignTemplate operation
#
##############################################################################
call_getCampaignTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/campaigns/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCampaignTemplates operation
#
##############################################################################
call_getCampaignTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/campaigns/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCampaigns operation
#
##############################################################################
call_getCampaigns() {
    local path_parameter_names=()
    local query_parameter_names=(filter_active size page order)
    local path

    path=$(build_request_path "/campaigns" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call removeChallengeFromCampaign operation
#
##############################################################################
call_removeChallengeFromCampaign() {
    local path_parameter_names=(campaign_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/campaigns/{campaign_id}/challenges/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateCampaign operation
#
##############################################################################
call_updateCampaign() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/campaigns/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateCampaignTemplate operation
#
##############################################################################
call_updateCampaignTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/campaigns/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createChallenge operation
#
##############################################################################
call_createChallenge() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenges" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createChallengeActivity operation
#
##############################################################################
call_createChallengeActivity() {
    local path_parameter_names=(challenge_id)
    local query_parameter_names=(validateSettings)
    local path

    path=$(build_request_path "/challenges/{challenge_id}/activities" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createChallengeActivityTemplate operation
#
##############################################################################
call_createChallengeActivityTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenge-activities/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createChallengeTemplate operation
#
##############################################################################
call_createChallengeTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenges/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteChallenge operation
#
##############################################################################
call_deleteChallenge() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenges/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteChallengeActivity operation
#
##############################################################################
call_deleteChallengeActivity() {
    local path_parameter_names=(id challenge_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenges/{challenge_id}/activities/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteChallengeActivityTemplate operation
#
##############################################################################
call_deleteChallengeActivityTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/challenge-activities/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteChallengeEvent operation
#
##############################################################################
call_deleteChallengeEvent() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenges/events/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteChallengeTemplate operation
#
##############################################################################
call_deleteChallengeTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/challenges/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getChallenge operation
#
##############################################################################
call_getChallenge() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenges/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getChallengeActivities operation
#
##############################################################################
call_getChallengeActivities() {
    local path_parameter_names=(challenge_id)
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/challenges/{challenge_id}/activities" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getChallengeActivity operation
#
##############################################################################
call_getChallengeActivity() {
    local path_parameter_names=(id challenge_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenges/{challenge_id}/activities/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getChallengeActivityTemplate operation
#
##############################################################################
call_getChallengeActivityTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenge-activities/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getChallengeActivityTemplates operation
#
##############################################################################
call_getChallengeActivityTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/challenge-activities/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getChallengeEvent operation
#
##############################################################################
call_getChallengeEvent() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenges/events/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getChallengeEvents operation
#
##############################################################################
call_getChallengeEvents() {
    local path_parameter_names=()
    local query_parameter_names=(filter_start_date filter_end_date filter_campaigns filter_challenge size page order)
    local path

    path=$(build_request_path "/challenges/events" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getChallengeTemplate operation
#
##############################################################################
call_getChallengeTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenges/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getChallengeTemplates operation
#
##############################################################################
call_getChallengeTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/challenges/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getChallenges operation
#
##############################################################################
call_getChallenges() {
    local path_parameter_names=()
    local query_parameter_names=(filter_template filter_active_campaign filter_start_date filter_end_date size page order)
    local path

    path=$(build_request_path "/challenges" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateChallenge operation
#
##############################################################################
call_updateChallenge() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenges/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateChallengeActivity operation
#
##############################################################################
call_updateChallengeActivity() {
    local path_parameter_names=(id challenge_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenges/{challenge_id}/activities/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateChallengeActivityTemplate operation
#
##############################################################################
call_updateChallengeActivityTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenge-activities/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateChallengeTemplate operation
#
##############################################################################
call_updateChallengeTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/challenges/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createRewardSet operation
#
##############################################################################
call_createRewardSet() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/rewards" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteRewardSet operation
#
##############################################################################
call_deleteRewardSet() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/rewards/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getRewardSet operation
#
##############################################################################
call_getRewardSet() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/rewards/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getRewardSets operation
#
##############################################################################
call_getRewardSets() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/rewards" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateRewardSet operation
#
##############################################################################
call_updateRewardSet() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/rewards/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createCategory operation
#
##############################################################################
call_createCategory() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/categories" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createCategoryTemplate operation
#
##############################################################################
call_createCategoryTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/categories/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteCategory operation
#
##############################################################################
call_deleteCategory() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/categories/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteCategoryTemplate operation
#
##############################################################################
call_deleteCategoryTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/categories/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCategories operation
#
##############################################################################
call_getCategories() {
    local path_parameter_names=()
    local query_parameter_names=(filter_search filter_active size page order)
    local path

    path=$(build_request_path "/categories" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCategory operation
#
##############################################################################
call_getCategory() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/categories/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCategoryTemplate operation
#
##############################################################################
call_getCategoryTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/categories/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCategoryTemplates operation
#
##############################################################################
call_getCategoryTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/categories/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getTags operation
#
##############################################################################
call_getTags() {
    local path_parameter_names=()
    local query_parameter_names=(size page)
    local path

    path=$(build_request_path "/tags" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateCategory operation
#
##############################################################################
call_updateCategory() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/categories/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateCategoryTemplate operation
#
##############################################################################
call_updateCategoryTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/categories/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createConfig operation
#
##############################################################################
call_createConfig() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/configs" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteConfig operation
#
##############################################################################
call_deleteConfig() {
    local path_parameter_names=(name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/configs/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getConfig operation
#
##############################################################################
call_getConfig() {
    local path_parameter_names=(name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/configs/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getConfigs operation
#
##############################################################################
call_getConfigs() {
    local path_parameter_names=()
    local query_parameter_names=(filter_search size page order)
    local path

    path=$(build_request_path "/configs" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateConfig operation
#
##############################################################################
call_updateConfig() {
    local path_parameter_names=(name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/configs/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createArticle operation
#
##############################################################################
call_createArticle() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/content/articles" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createArticleTemplate operation
#
##############################################################################
call_createArticleTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/content/articles/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteArticle operation
#
##############################################################################
call_deleteArticle() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/content/articles/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteArticleTemplate operation
#
##############################################################################
call_deleteArticleTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/content/articles/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getArticle operation
#
##############################################################################
call_getArticle() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/content/articles/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getArticleTemplate operation
#
##############################################################################
call_getArticleTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/content/articles/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getArticleTemplates operation
#
##############################################################################
call_getArticleTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/content/articles/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getArticles operation
#
##############################################################################
call_getArticles() {
    local path_parameter_names=()
    local query_parameter_names=(filter_active_only filter_category filter_tagset filter_tag_intersection filter_tag_exclusion filter_title size page order)
    local path

    path=$(build_request_path "/content/articles" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateArticle operation
#
##############################################################################
call_updateArticle() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/content/articles/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateArticleTemplate operation
#
##############################################################################
call_updateArticleTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/content/articles/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addComment operation
#
##############################################################################
call_addComment() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/comments" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteComment operation
#
##############################################################################
call_deleteComment() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/comments/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getComment operation
#
##############################################################################
call_getComment() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/comments/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getComments operation
#
##############################################################################
call_getComments() {
    local path_parameter_names=()
    local query_parameter_names=(context context_id size page)
    local path

    path=$(build_request_path "/comments" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call searchComments operation
#
##############################################################################
call_searchComments() {
    local path_parameter_names=()
    local query_parameter_names=(size page)
    local path

    path=$(build_request_path "/comments/search" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateComment operation
#
##############################################################################
call_updateComment() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/comments/{id}/content" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call answerPoll operation
#
##############################################################################
call_answerPoll() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/polls/{id}/response" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createPoll operation
#
##############################################################################
call_createPoll() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/polls" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createPollTemplate operation
#
##############################################################################
call_createPollTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/polls/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deletePoll operation
#
##############################################################################
call_deletePoll() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/polls/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deletePollTemplate operation
#
##############################################################################
call_deletePollTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/media/polls/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPoll operation
#
##############################################################################
call_getPoll() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/polls/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPollAnswer operation
#
##############################################################################
call_getPollAnswer() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/polls/{id}/response" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPollTemplate operation
#
##############################################################################
call_getPollTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/polls/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPollTemplates operation
#
##############################################################################
call_getPollTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/media/polls/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPolls operation
#
##############################################################################
call_getPolls() {
    local path_parameter_names=()
    local query_parameter_names=(filter_category filter_tagset filter_text size page order)
    local path

    path=$(build_request_path "/media/polls" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updatePoll operation
#
##############################################################################
call_updatePoll() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/polls/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updatePollTemplate operation
#
##############################################################################
call_updatePollTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/polls/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createCurrency operation
#
##############################################################################
call_createCurrency() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/currencies" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteCurrency operation
#
##############################################################################
call_deleteCurrency() {
    local path_parameter_names=(code)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/currencies/{code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCurrencies operation
#
##############################################################################
call_getCurrencies() {
    local path_parameter_names=()
    local query_parameter_names=(filter_enabled_currencies filter_type size page order)
    local path

    path=$(build_request_path "/currencies" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCurrency operation
#
##############################################################################
call_getCurrency() {
    local path_parameter_names=(code)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/currencies/{code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateCurrency operation
#
##############################################################################
call_updateCurrency() {
    local path_parameter_names=(code)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/currencies/{code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addDeviceUsers operation
#
##############################################################################
call_addDeviceUsers() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/devices/{id}/users" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createDevice operation
#
##############################################################################
call_createDevice() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/devices" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteDevice operation
#
##############################################################################
call_deleteDevice() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/devices/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteDeviceUser operation
#
##############################################################################
call_deleteDeviceUser() {
    local path_parameter_names=(id user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/devices/{id}/users/{user_id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteDeviceUsers operation
#
##############################################################################
call_deleteDeviceUsers() {
    local path_parameter_names=(id)
    local query_parameter_names=(filter_id)
    local path

    path=$(build_request_path "/devices/{id}/users" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getDevice operation
#
##############################################################################
call_getDevice() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/devices/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getDevices operation
#
##############################################################################
call_getDevices() {
    local path_parameter_names=()
    local query_parameter_names=(filter_make filter_model size page order)
    local path

    path=$(build_request_path "/devices" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateDevice operation
#
##############################################################################
call_updateDevice() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/devices/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addDisposition operation
#
##############################################################################
call_addDisposition() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/dispositions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteDisposition operation
#
##############################################################################
call_deleteDisposition() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/dispositions/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getDisposition operation
#
##############################################################################
call_getDisposition() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/dispositions/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getDispositionCounts operation
#
##############################################################################
call_getDispositionCounts() {
    local path_parameter_names=()
    local query_parameter_names=(filter_context filter_owner)
    local path

    path=$(build_request_path "/dispositions/count" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getDispositions operation
#
##############################################################################
call_getDispositions() {
    local path_parameter_names=()
    local query_parameter_names=(filter_context filter_owner size page order)
    local path

    path=$(build_request_path "/dispositions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createFulfillmentType operation
#
##############################################################################
call_createFulfillmentType() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/fulfillment/types" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteFulfillmentType operation
#
##############################################################################
call_deleteFulfillmentType() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/fulfillment/types/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getFulfillmentType operation
#
##############################################################################
call_getFulfillmentType() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/fulfillment/types/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getFulfillmentTypes operation
#
##############################################################################
call_getFulfillmentTypes() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/store/fulfillment/types" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateFulfillmentType operation
#
##############################################################################
call_updateFulfillmentType() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/fulfillment/types/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createAchievement operation
#
##############################################################################
call_createAchievement() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/achievements" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createAchievementTemplate operation
#
##############################################################################
call_createAchievementTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/achievements/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteAchievement operation
#
##############################################################################
call_deleteAchievement() {
    local path_parameter_names=(name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/achievements/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteAchievementTemplate operation
#
##############################################################################
call_deleteAchievementTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/achievements/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getAchievement operation
#
##############################################################################
call_getAchievement() {
    local path_parameter_names=(name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/achievements/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getAchievementTemplate operation
#
##############################################################################
call_getAchievementTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/achievements/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getAchievementTemplates operation
#
##############################################################################
call_getAchievementTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/achievements/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getAchievementTriggers operation
#
##############################################################################
call_getAchievementTriggers() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/achievements/triggers" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getAchievements operation
#
##############################################################################
call_getAchievements() {
    local path_parameter_names=()
    local query_parameter_names=(filter_tagset filter_name filter_hidden size page order filter_derived)
    local path

    path=$(build_request_path "/achievements" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getDerivedAchievements operation
#
##############################################################################
call_getDerivedAchievements() {
    local path_parameter_names=(name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/achievements/derived/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserAchievementProgress operation
#
##############################################################################
call_getUserAchievementProgress() {
    local path_parameter_names=(user_id achievement_name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/achievements/{achievement_name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserAchievementsProgress operation
#
##############################################################################
call_getUserAchievementsProgress() {
    local path_parameter_names=(user_id)
    local query_parameter_names=(filter_achievement_derived filter_achievement_tagset filter_achievement_name size page)
    local path

    path=$(build_request_path "/users/{user_id}/achievements" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUsersAchievementProgress operation
#
##############################################################################
call_getUsersAchievementProgress() {
    local path_parameter_names=(achievement_name)
    local query_parameter_names=(filter_achievement_derived filter_achievement_tagset filter_achievement_name size page)
    local path

    path=$(build_request_path "/users/achievements/{achievement_name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUsersAchievementsProgress operation
#
##############################################################################
call_getUsersAchievementsProgress() {
    local path_parameter_names=()
    local query_parameter_names=(filter_achievement_derived filter_achievement_tagset filter_achievement_name size page)
    local path

    path=$(build_request_path "/users/achievements" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call incrementAchievementProgress operation
#
##############################################################################
call_incrementAchievementProgress() {
    local path_parameter_names=(user_id achievement_name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/achievements/{achievement_name}/progress" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setAchievementProgress operation
#
##############################################################################
call_setAchievementProgress() {
    local path_parameter_names=(user_id achievement_name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/achievements/{achievement_name}/progress" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateAchievement operation
#
##############################################################################
call_updateAchievement() {
    local path_parameter_names=(name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/achievements/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateAchievementTemplate operation
#
##############################################################################
call_updateAchievementTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/achievements/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getLeaderboard operation
#
##############################################################################
call_getLeaderboard() {
    local path_parameter_names=(context_type context_id)
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/leaderboards/{context_type}/{context_id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getLeaderboardRank operation
#
##############################################################################
call_getLeaderboardRank() {
    local path_parameter_names=(context_type context_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/leaderboards/{context_type}/{context_id}/users/{id}/rank" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getLeaderboardStrategies operation
#
##############################################################################
call_getLeaderboardStrategies() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/leaderboards/strategies" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createLevel operation
#
##############################################################################
call_createLevel() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/leveling" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteLevel operation
#
##############################################################################
call_deleteLevel() {
    local path_parameter_names=(name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/leveling/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getLevel operation
#
##############################################################################
call_getLevel() {
    local path_parameter_names=(name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/leveling/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getLevelTriggers operation
#
##############################################################################
call_getLevelTriggers() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/leveling/triggers" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getLevels operation
#
##############################################################################
call_getLevels() {
    local path_parameter_names=()
    local query_parameter_names=(filter_name size page order)
    local path

    path=$(build_request_path "/leveling" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserLevel operation
#
##############################################################################
call_getUserLevel() {
    local path_parameter_names=(user_id name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/leveling/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserLevels operation
#
##############################################################################
call_getUserLevels() {
    local path_parameter_names=(user_id)
    local query_parameter_names=(filter_name size page order)
    local path

    path=$(build_request_path "/users/{user_id}/leveling" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call incrementProgress operation
#
##############################################################################
call_incrementProgress() {
    local path_parameter_names=(user_id name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/leveling/{name}/progress" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setProgress operation
#
##############################################################################
call_setProgress() {
    local path_parameter_names=(user_id name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/leveling/{name}/progress" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateLevel operation
#
##############################################################################
call_updateLevel() {
    local path_parameter_names=(name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/leveling/{name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addMetric operation
#
##############################################################################
call_addMetric() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/metrics" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addQuestionAnswers operation
#
##############################################################################
call_addQuestionAnswers() {
    local path_parameter_names=(question_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/{question_id}/answers" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addQuestionTag operation
#
##############################################################################
call_addQuestionTag() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/{id}/tags" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addTagToQuestionsBatch operation
#
##############################################################################
call_addTagToQuestionsBatch() {
    local path_parameter_names=()
    local query_parameter_names=(filter_search filter_idset filter_category filter_tag filter_tagset filter_type filter_published filter_import_id)
    local path

    path=$(build_request_path "/trivia/questions/tags" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createImportJob operation
#
##############################################################################
call_createImportJob() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/import" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createQuestion operation
#
##############################################################################
call_createQuestion() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createQuestionTemplate operation
#
##############################################################################
call_createQuestionTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteImportJob operation
#
##############################################################################
call_deleteImportJob() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/import/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteQuestion operation
#
##############################################################################
call_deleteQuestion() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteQuestionAnswers operation
#
##############################################################################
call_deleteQuestionAnswers() {
    local path_parameter_names=(question_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/{question_id}/answers/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteQuestionTemplate operation
#
##############################################################################
call_deleteQuestionTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/trivia/questions/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getImportJob operation
#
##############################################################################
call_getImportJob() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/import/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getImportJobs operation
#
##############################################################################
call_getImportJobs() {
    local path_parameter_names=()
    local query_parameter_names=(filter_vendor filter_category filter_name filter_status size page order)
    local path

    path=$(build_request_path "/trivia/import" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getQuestion operation
#
##############################################################################
call_getQuestion() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getQuestionAnswer operation
#
##############################################################################
call_getQuestionAnswer() {
    local path_parameter_names=(question_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/{question_id}/answers/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getQuestionAnswers operation
#
##############################################################################
call_getQuestionAnswers() {
    local path_parameter_names=(question_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/{question_id}/answers" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getQuestionDeltas operation
#
##############################################################################
call_getQuestionDeltas() {
    local path_parameter_names=()
    local query_parameter_names=(since)
    local path

    path=$(build_request_path "/trivia/questions/delta" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getQuestionTags operation
#
##############################################################################
call_getQuestionTags() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/{id}/tags" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getQuestionTemplate operation
#
##############################################################################
call_getQuestionTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getQuestionTemplates operation
#
##############################################################################
call_getQuestionTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/trivia/questions/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getQuestions operation
#
##############################################################################
call_getQuestions() {
    local path_parameter_names=()
    local query_parameter_names=(size page order filter_search filter_idset filter_category filter_tagset filter_tag filter_type filter_published filter_import_id)
    local path

    path=$(build_request_path "/trivia/questions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getQuestionsCount operation
#
##############################################################################
call_getQuestionsCount() {
    local path_parameter_names=()
    local query_parameter_names=(filter_search filter_idset filter_category filter_tag filter_tagset filter_type filter_published)
    local path

    path=$(build_request_path "/trivia/questions/count" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call processImportJob operation
#
##############################################################################
call_processImportJob() {
    local path_parameter_names=(id)
    local query_parameter_names=(publish_now)
    local path

    path=$(build_request_path "/trivia/import/{id}/process" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call removeQuestionTag operation
#
##############################################################################
call_removeQuestionTag() {
    local path_parameter_names=(id tag)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/{id}/tags/{tag}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call removeTagToQuestionsBatch operation
#
##############################################################################
call_removeTagToQuestionsBatch() {
    local path_parameter_names=(tag)
    local query_parameter_names=(filter_search filter_idset filter_category filter_tag filter_tagset filter_type filter_published filter_import_id)
    local path

    path=$(build_request_path "/trivia/questions/tags/{tag}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call searchQuestionTags operation
#
##############################################################################
call_searchQuestionTags() {
    local path_parameter_names=()
    local query_parameter_names=(filter_search filter_category filter_import_id)
    local path

    path=$(build_request_path "/trivia/tags" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateImportJob operation
#
##############################################################################
call_updateImportJob() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/import/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateQuestion operation
#
##############################################################################
call_updateQuestion() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateQuestionAnswer operation
#
##############################################################################
call_updateQuestionAnswer() {
    local path_parameter_names=(question_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/{question_id}/answers/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateQuestionTemplate operation
#
##############################################################################
call_updateQuestionTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/trivia/questions/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateQuestionsInBulk operation
#
##############################################################################
call_updateQuestionsInBulk() {
    local path_parameter_names=()
    local query_parameter_names=(filter_search filter_idset filter_category filter_tagset filter_type filter_published filter_import_id)
    local path

    path=$(build_request_path "/trivia/questions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createInvoice operation
#
##############################################################################
call_createInvoice() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/invoices" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getFulFillmentStatuses operation
#
##############################################################################
call_getFulFillmentStatuses() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/invoices/fulfillment-statuses" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getInvoice operation
#
##############################################################################
call_getInvoice() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/invoices/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getInvoiceLogs operation
#
##############################################################################
call_getInvoiceLogs() {
    local path_parameter_names=(id)
    local query_parameter_names=(size page)
    local path

    path=$(build_request_path "/invoices/{id}/logs" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getInvoices operation
#
##############################################################################
call_getInvoices() {
    local path_parameter_names=()
    local query_parameter_names=(filter_user filter_email filter_fulfillment_status filter_payment_status filter_item_name filter_external_ref filter_created_date filter_vendor_ids filter_currency filter_shipping_state_name filter_shipping_country_name filter_shipping filter_vendor_name filter_sku size page order)
    local path

    path=$(build_request_path "/invoices" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPaymentStatuses operation
#
##############################################################################
call_getPaymentStatuses() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/invoices/payment-statuses" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call payInvoice operation
#
##############################################################################
call_payInvoice() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/invoices/{id}/payments" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setBundledInvoiceItemFulfillmentStatus operation
#
##############################################################################
call_setBundledInvoiceItemFulfillmentStatus() {
    local path_parameter_names=(id bundleSku sku)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/invoices/{id}/items/{bundleSku}/bundled-skus/{sku}/fulfillment-status" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setExternalRef operation
#
##############################################################################
call_setExternalRef() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/invoices/{id}/external-ref" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setInvoiceItemFulfillmentStatus operation
#
##############################################################################
call_setInvoiceItemFulfillmentStatus() {
    local path_parameter_names=(id sku)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/invoices/{id}/items/{sku}/fulfillment-status" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setOrderNotes operation
#
##############################################################################
call_setOrderNotes() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/invoices/{id}/order-notes" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setPaymentStatus operation
#
##############################################################################
call_setPaymentStatus() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/invoices/{id}/payment-status" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateBillingInfo operation
#
##############################################################################
call_updateBillingInfo() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/invoices/{id}/billing-address" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getCountries operation
#
##############################################################################
call_getCountries() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/location/countries" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCountryByGeoLocation operation
#
##############################################################################
call_getCountryByGeoLocation() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/location/geolocation/country" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCountryStates operation
#
##############################################################################
call_getCountryStates() {
    local path_parameter_names=(country_code_iso3)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/location/countries/{country_code_iso3}/states" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCurrencyByGeoLocation operation
#
##############################################################################
call_getCurrencyByGeoLocation() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/location/geolocation/currency" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call addUserLog operation
#
##############################################################################
call_addUserLog() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/audit/logs" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getBREEventLog operation
#
##############################################################################
call_getBREEventLog() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/logs/event-log/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBREEventLogs operation
#
##############################################################################
call_getBREEventLogs() {
    local path_parameter_names=()
    local query_parameter_names=(filter_start_date filter_event_name filter_event_id size page order)
    local path

    path=$(build_request_path "/bre/logs/event-log" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBREForwardLog operation
#
##############################################################################
call_getBREForwardLog() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/bre/logs/forward-log/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBREForwardLogs operation
#
##############################################################################
call_getBREForwardLogs() {
    local path_parameter_names=()
    local query_parameter_names=(filter_start_date filter_end_date filter_status_code size page order)
    local path

    path=$(build_request_path "/bre/logs/forward-log" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserLog operation
#
##############################################################################
call_getUserLog() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/audit/logs/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserLogs operation
#
##############################################################################
call_getUserLogs() {
    local path_parameter_names=()
    local query_parameter_names=(filter_user filter_action_name size page order)
    local path

    path=$(build_request_path "/audit/logs" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call addArtist operation
#
##############################################################################
call_addArtist() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/artists" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createArtistTemplate operation
#
##############################################################################
call_createArtistTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/artists/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteArtist operation
#
##############################################################################
call_deleteArtist() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/artists/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteArtistTemplate operation
#
##############################################################################
call_deleteArtistTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/media/artists/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getArtist operation
#
##############################################################################
call_getArtist() {
    local path_parameter_names=(id)
    local query_parameter_names=(show_contributions)
    local path

    path=$(build_request_path "/media/artists/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getArtistTemplate operation
#
##############################################################################
call_getArtistTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/artists/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getArtistTemplates operation
#
##############################################################################
call_getArtistTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/media/artists/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getArtists operation
#
##############################################################################
call_getArtists() {
    local path_parameter_names=()
    local query_parameter_names=(filter_artists_by_name size page order)
    local path

    path=$(build_request_path "/media/artists" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateArtist operation
#
##############################################################################
call_updateArtist() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/artists/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateArtistTemplate operation
#
##############################################################################
call_updateArtistTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/artists/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getModerationReport operation
#
##############################################################################
call_getModerationReport() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/moderation/reports/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getModerationReports operation
#
##############################################################################
call_getModerationReports() {
    local path_parameter_names=()
    local query_parameter_names=(exclude_resolved filter_context size page)
    local path

    path=$(build_request_path "/moderation/reports" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateModerationReport operation
#
##############################################################################
call_updateModerationReport() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/moderation/reports/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addUserToVideoWhitelist operation
#
##############################################################################
call_addUserToVideoWhitelist() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{id}/whitelist" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addVideo operation
#
##############################################################################
call_addVideo() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addVideoComment operation
#
##############################################################################
call_addVideoComment() {
    local path_parameter_names=(video_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/comments" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addVideoContributor operation
#
##############################################################################
call_addVideoContributor() {
    local path_parameter_names=(video_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/contributors" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addVideoFlag operation
#
##############################################################################
call_addVideoFlag() {
    local path_parameter_names=(video_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/moderation" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addVideoRelationships operation
#
##############################################################################
call_addVideoRelationships() {
    local path_parameter_names=(video_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/related" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createVideoDisposition operation
#
##############################################################################
call_createVideoDisposition() {
    local path_parameter_names=(video_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/dispositions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteVideo operation
#
##############################################################################
call_deleteVideo() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteVideoComment operation
#
##############################################################################
call_deleteVideoComment() {
    local path_parameter_names=(video_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/comments/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteVideoDisposition operation
#
##############################################################################
call_deleteVideoDisposition() {
    local path_parameter_names=(disposition_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/dispositions/{disposition_id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteVideoFlag operation
#
##############################################################################
call_deleteVideoFlag() {
    local path_parameter_names=(video_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/moderation" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteVideoRelationship operation
#
##############################################################################
call_deleteVideoRelationship() {
    local path_parameter_names=(video_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/related/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserVideos operation
#
##############################################################################
call_getUserVideos() {
    local path_parameter_names=(user_id)
    local query_parameter_names=(exclude_flagged size page)
    local path

    path=$(build_request_path "/users/{user_id}/videos" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getVideo operation
#
##############################################################################
call_getVideo() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getVideoComments operation
#
##############################################################################
call_getVideoComments() {
    local path_parameter_names=(video_id)
    local query_parameter_names=(size page)
    local path

    path=$(build_request_path "/media/videos/{video_id}/comments" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getVideoDispositions operation
#
##############################################################################
call_getVideoDispositions() {
    local path_parameter_names=(video_id)
    local query_parameter_names=(size page)
    local path

    path=$(build_request_path "/media/videos/{video_id}/dispositions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getVideoRelationships operation
#
##############################################################################
call_getVideoRelationships() {
    local path_parameter_names=(video_id)
    local query_parameter_names=(size page)
    local path

    path=$(build_request_path "/media/videos/{video_id}/related" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getVideos operation
#
##############################################################################
call_getVideos() {
    local path_parameter_names=()
    local query_parameter_names=(exclude_flagged filter_videos_by_uploader filter_category filter_tagset filter_videos_by_name filter_videos_by_contributor filter_videos_by_author filter_has_author filter_has_uploader filter_related_to filter_friends filter_disposition size page order)
    local path

    path=$(build_request_path "/media/videos" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call removeUserFromVideoWhitelist operation
#
##############################################################################
call_removeUserFromVideoWhitelist() {
    local path_parameter_names=(video_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/whitelist/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call removeVideoContributor operation
#
##############################################################################
call_removeVideoContributor() {
    local path_parameter_names=(video_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/contributors/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateVideo operation
#
##############################################################################
call_updateVideo() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateVideoComment operation
#
##############################################################################
call_updateVideoComment() {
    local path_parameter_names=(video_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/comments/{id}/content" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateVideoRelationship operation
#
##############################################################################
call_updateVideoRelationship() {
    local path_parameter_names=(video_id relationship_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{video_id}/related/{id}/relationship_details" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call viewVideo operation
#
##############################################################################
call_viewVideo() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/media/videos/{id}/views" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call sendRawEmail operation
#
##############################################################################
call_sendRawEmail() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/messaging/raw-email" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call sendRawSMS operation
#
##############################################################################
call_sendRawSMS() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/messaging/raw-sms" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call sendTemplatedEmail operation
#
##############################################################################
call_sendTemplatedEmail() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/messaging/templated-email" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call sendTemplatedSMS operation
#
##############################################################################
call_sendTemplatedSMS() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/messaging/templated-sms" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createPaymentMethod operation
#
##############################################################################
call_createPaymentMethod() {
    local path_parameter_names=(user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/payment-methods" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deletePaymentMethod operation
#
##############################################################################
call_deletePaymentMethod() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/payment-methods/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPaymentMethod operation
#
##############################################################################
call_getPaymentMethod() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/payment-methods/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPaymentMethods operation
#
##############################################################################
call_getPaymentMethods() {
    local path_parameter_names=(user_id)
    local query_parameter_names=(filter_name filter_payment_type filter_payment_method_type_id filter_payment_method_type_name size page order)
    local path

    path=$(build_request_path "/users/{user_id}/payment-methods" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call paymentAuthorization operation
#
##############################################################################
call_paymentAuthorization() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/authorizations" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call paymentCapture operation
#
##############################################################################
call_paymentCapture() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/authorizations/{id}/capture" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updatePaymentMethod operation
#
##############################################################################
call_updatePaymentMethod() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/payment-methods/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call verifyAppleReceipt operation
#
##############################################################################
call_verifyAppleReceipt() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/provider/apple/receipt" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createOrUpdateFattMerchantPaymentMethod operation
#
##############################################################################
call_createOrUpdateFattMerchantPaymentMethod() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/provider/fattmerchant/payment-methods" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call handleGooglePayment operation
#
##############################################################################
call_handleGooglePayment() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/provider/google/payments" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call silentPostOptimal operation
#
##############################################################################
call_silentPostOptimal() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/provider/optimal/silent" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createPayPalBillingAgreementUrl operation
#
##############################################################################
call_createPayPalBillingAgreementUrl() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/provider/paypal/classic/agreements/start" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createPayPalExpressCheckout operation
#
##############################################################################
call_createPayPalExpressCheckout() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/provider/paypal/classic/checkout/start" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call finalizePayPalBillingAgreement operation
#
##############################################################################
call_finalizePayPalBillingAgreement() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/provider/paypal/classic/agreements/finish" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call finalizePayPalCheckout operation
#
##############################################################################
call_finalizePayPalCheckout() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/provider/paypal/classic/checkout/finish" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createStripePaymentMethod operation
#
##############################################################################
call_createStripePaymentMethod() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/provider/stripe/payment-methods" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call payStripeInvoice operation
#
##############################################################################
call_payStripeInvoice() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/provider/stripe/payments" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getTransaction operation
#
##############################################################################
call_getTransaction() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/transactions/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getTransactions operation
#
##############################################################################
call_getTransactions() {
    local path_parameter_names=()
    local query_parameter_names=(filter_invoice size page order)
    local path

    path=$(build_request_path "/transactions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call refundTransaction operation
#
##############################################################################
call_refundTransaction() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/transactions/{id}/refunds" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getUserWallet operation
#
##############################################################################
call_getUserWallet() {
    local path_parameter_names=(user_id currency_code)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/wallets/{currency_code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserWalletTransactions operation
#
##############################################################################
call_getUserWalletTransactions() {
    local path_parameter_names=(user_id currency_code)
    local query_parameter_names=(filter_type filter_max_date filter_min_date filter_sign size page order)
    local path

    path=$(build_request_path "/users/{user_id}/wallets/{currency_code}/transactions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserWallets operation
#
##############################################################################
call_getUserWallets() {
    local path_parameter_names=(user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/wallets" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getWalletBalances operation
#
##############################################################################
call_getWalletBalances() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/wallets/totals" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getWalletTransactions operation
#
##############################################################################
call_getWalletTransactions() {
    local path_parameter_names=()
    local query_parameter_names=(filter_invoice filter_type filter_date filter_sign filter_user_id filter_username filter_details filter_currency_code size page order)
    local path

    path=$(build_request_path "/wallets/transactions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getWallets operation
#
##############################################################################
call_getWallets() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/wallets" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateWalletBalance operation
#
##############################################################################
call_updateWalletBalance() {
    local path_parameter_names=(user_id currency_code)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/wallets/{currency_code}/balance" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createXsollaTokenUrl operation
#
##############################################################################
call_createXsollaTokenUrl() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/provider/xsolla/payment" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call receiveXsollaNotification operation
#
##############################################################################
call_receiveXsollaNotification() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/payment/provider/xsolla/notifications" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getChallengeEventLeaderboard operation
#
##############################################################################
call_getChallengeEventLeaderboard() {
    local path_parameter_names=()
    local query_parameter_names=(filter_event size page order)
    local path

    path=$(build_request_path "/reporting/events/leaderboard" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getChallengeEventParticipants operation
#
##############################################################################
call_getChallengeEventParticipants() {
    local path_parameter_names=()
    local query_parameter_names=(filter_event size page order)
    local path

    path=$(build_request_path "/reporting/events/participants" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getInvoiceReports operation
#
##############################################################################
call_getInvoiceReports() {
    local path_parameter_names=(currency_code)
    local query_parameter_names=(granularity filter_payment_status filter_fulfillment_status start_date end_date size page)
    local path

    path=$(build_request_path "/reporting/orders/count/{currency_code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getItemRevenue operation
#
##############################################################################
call_getItemRevenue() {
    local path_parameter_names=(currency_code)
    local query_parameter_names=(start_date end_date)
    local path

    path=$(build_request_path "/reporting/revenue/item-sales/{currency_code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getRefundRevenue operation
#
##############################################################################
call_getRefundRevenue() {
    local path_parameter_names=(currency_code)
    local query_parameter_names=(start_date end_date)
    local path

    path=$(build_request_path "/reporting/revenue/refunds/{currency_code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getRevenueByCountry operation
#
##############################################################################
call_getRevenueByCountry() {
    local path_parameter_names=(currency_code)
    local query_parameter_names=(start_date end_date size page)
    local path

    path=$(build_request_path "/reporting/revenue/countries/{currency_code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getRevenueByItem operation
#
##############################################################################
call_getRevenueByItem() {
    local path_parameter_names=(currency_code)
    local query_parameter_names=(start_date end_date size page)
    local path

    path=$(build_request_path "/reporting/revenue/products/{currency_code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getSubscriptionRevenue operation
#
##############################################################################
call_getSubscriptionRevenue() {
    local path_parameter_names=(currency_code)
    local query_parameter_names=(start_date end_date)
    local path

    path=$(build_request_path "/reporting/revenue/subscription-sales/{currency_code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getSubscriptionReports operation
#
##############################################################################
call_getSubscriptionReports() {
    local path_parameter_names=()
    local query_parameter_names=(size page)
    local path

    path=$(build_request_path "/reporting/subscription" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUsageByDay operation
#
##############################################################################
call_getUsageByDay() {
    local path_parameter_names=()
    local query_parameter_names=(start_date end_date combine_endpoints method url size page)
    local path

    path=$(build_request_path "/reporting/usage/day" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUsageByHour operation
#
##############################################################################
call_getUsageByHour() {
    local path_parameter_names=()
    local query_parameter_names=(start_date end_date combine_endpoints method url size page)
    local path

    path=$(build_request_path "/reporting/usage/hour" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUsageByMinute operation
#
##############################################################################
call_getUsageByMinute() {
    local path_parameter_names=()
    local query_parameter_names=(start_date end_date combine_endpoints method url size page)
    local path

    path=$(build_request_path "/reporting/usage/minute" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUsageByMonth operation
#
##############################################################################
call_getUsageByMonth() {
    local path_parameter_names=()
    local query_parameter_names=(start_date end_date combine_endpoints method url size page)
    local path

    path=$(build_request_path "/reporting/usage/month" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUsageByYear operation
#
##############################################################################
call_getUsageByYear() {
    local path_parameter_names=()
    local query_parameter_names=(start_date end_date combine_endpoints method url size page)
    local path

    path=$(build_request_path "/reporting/usage/year" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUsageEndpoints operation
#
##############################################################################
call_getUsageEndpoints() {
    local path_parameter_names=()
    local query_parameter_names=(start_date end_date)
    local path

    path=$(build_request_path "/reporting/usage/endpoints" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserRegistrations operation
#
##############################################################################
call_getUserRegistrations() {
    local path_parameter_names=()
    local query_parameter_names=(granularity start_date end_date size page)
    local path

    path=$(build_request_path "/reporting/users/registrations" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call addSearchIndex operation
#
##############################################################################
call_addSearchIndex() {
    local path_parameter_names=(type id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/search/index/{type}/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addSearchMappings operation
#
##############################################################################
call_addSearchMappings() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/search/mappings" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteSearchIndex operation
#
##############################################################################
call_deleteSearchIndex() {
    local path_parameter_names=(type id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/search/index/{type}/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSearchIndexes operation
#
##############################################################################
call_deleteSearchIndexes() {
    local path_parameter_names=(type)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/search/index/{type}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call searchIndex operation
#
##############################################################################
call_searchIndex() {
    local path_parameter_names=(type)
    local query_parameter_names=(size page)
    local path

    path=$(build_request_path "/search/index/{type}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call linkAccounts operation
#
##############################################################################
call_linkAccounts() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/social/facebook/users" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call linkAccounts1 operation
#
##############################################################################
call_linkAccounts1() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/social/google/users" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemTemplate operation
#
##############################################################################
call_createItemTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/items/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createStoreItem operation
#
##############################################################################
call_createStoreItem() {
    local path_parameter_names=()
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/store/items" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemTemplate operation
#
##############################################################################
call_deleteItemTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/store/items/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteStoreItem operation
#
##############################################################################
call_deleteStoreItem() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/items/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBehaviors operation
#
##############################################################################
call_getBehaviors() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/items/behaviors" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getItemTemplate operation
#
##############################################################################
call_getItemTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/items/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getItemTemplates operation
#
##############################################################################
call_getItemTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/store/items/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getStore operation
#
##############################################################################
call_getStore() {
    local path_parameter_names=()
    local query_parameter_names=(limit page use_catalog ignore_location in_stock_only)
    local path

    path=$(build_request_path "/store" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getStoreItem operation
#
##############################################################################
call_getStoreItem() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/items/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getStoreItems operation
#
##############################################################################
call_getStoreItems() {
    local path_parameter_names=()
    local query_parameter_names=(filter_name_search filter_unique_key filter_published filter_displayable filter_start filter_end filter_start_date filter_stop_date filter_sku filter_price filter_tag filter_items_by_type filter_bundled_skus filter_vendor size page order)
    local path

    path=$(build_request_path "/store/items" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call quickBuy operation
#
##############################################################################
call_quickBuy() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/quick-buy" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemTemplate operation
#
##############################################################################
call_updateItemTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/items/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateStoreItem operation
#
##############################################################################
call_updateStoreItem() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/store/items/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createBundleItem operation
#
##############################################################################
call_createBundleItem() {
    local path_parameter_names=()
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/store/bundles" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createBundleTemplate operation
#
##############################################################################
call_createBundleTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/bundles/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteBundleItem operation
#
##############################################################################
call_deleteBundleItem() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/bundles/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteBundleTemplate operation
#
##############################################################################
call_deleteBundleTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/store/bundles/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBundleItem operation
#
##############################################################################
call_getBundleItem() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/bundles/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBundleTemplate operation
#
##############################################################################
call_getBundleTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/bundles/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getBundleTemplates operation
#
##############################################################################
call_getBundleTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/store/bundles/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateBundleItem operation
#
##############################################################################
call_updateBundleItem() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/store/bundles/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateBundleTemplate operation
#
##############################################################################
call_updateBundleTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/bundles/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createCouponItem operation
#
##############################################################################
call_createCouponItem() {
    local path_parameter_names=()
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/store/coupons" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createCouponTemplate operation
#
##############################################################################
call_createCouponTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/coupons/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteCouponItem operation
#
##############################################################################
call_deleteCouponItem() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/coupons/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteCouponTemplate operation
#
##############################################################################
call_deleteCouponTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/store/coupons/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCouponItem operation
#
##############################################################################
call_getCouponItem() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/coupons/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCouponTemplate operation
#
##############################################################################
call_getCouponTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/coupons/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCouponTemplates operation
#
##############################################################################
call_getCouponTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/store/coupons/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateCouponItem operation
#
##############################################################################
call_updateCouponItem() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/store/coupons/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateCouponTemplate operation
#
##############################################################################
call_updateCouponTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/coupons/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createCatalogSale operation
#
##############################################################################
call_createCatalogSale() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/sales" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteCatalogSale operation
#
##############################################################################
call_deleteCatalogSale() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/sales/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCatalogSale operation
#
##############################################################################
call_getCatalogSale() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/sales/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCatalogSales operation
#
##############################################################################
call_getCatalogSales() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/store/sales" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateCatalogSale operation
#
##############################################################################
call_updateCatalogSale() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/sales/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createShippingItem operation
#
##############################################################################
call_createShippingItem() {
    local path_parameter_names=()
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/store/shipping" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createShippingTemplate operation
#
##############################################################################
call_createShippingTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/shipping/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteShippingItem operation
#
##############################################################################
call_deleteShippingItem() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/shipping/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteShippingTemplate operation
#
##############################################################################
call_deleteShippingTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/store/shipping/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getShippingItem operation
#
##############################################################################
call_getShippingItem() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/shipping/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getShippingTemplate operation
#
##############################################################################
call_getShippingTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/shipping/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getShippingTemplates operation
#
##############################################################################
call_getShippingTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/store/shipping/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateShippingItem operation
#
##############################################################################
call_updateShippingItem() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/store/shipping/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateShippingTemplate operation
#
##############################################################################
call_updateShippingTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/store/shipping/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addCustomDiscount operation
#
##############################################################################
call_addCustomDiscount() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/carts/{id}/custom-discounts" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addDiscountToCart operation
#
##############################################################################
call_addDiscountToCart() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/carts/{id}/discounts" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addItemToCart operation
#
##############################################################################
call_addItemToCart() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/carts/{id}/items" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createCart operation
#
##############################################################################
call_createCart() {
    local path_parameter_names=()
    local query_parameter_names=(owner currency_code)
    local path

    path=$(build_request_path "/carts" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCart operation
#
##############################################################################
call_getCart() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/carts/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCarts operation
#
##############################################################################
call_getCarts() {
    local path_parameter_names=()
    local query_parameter_names=(filter_owner_id size page order)
    local path

    path=$(build_request_path "/carts" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getShippable operation
#
##############################################################################
call_getShippable() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/carts/{id}/shippable" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getShippingCountries operation
#
##############################################################################
call_getShippingCountries() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/carts/{id}/countries" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call removeDiscountFromCart operation
#
##############################################################################
call_removeDiscountFromCart() {
    local path_parameter_names=(id code)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/carts/{id}/discounts/{code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call setCartCurrency operation
#
##############################################################################
call_setCartCurrency() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/carts/{id}/currency" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setCartOwner operation
#
##############################################################################
call_setCartOwner() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/carts/{id}/owner" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemInCart operation
#
##############################################################################
call_updateItemInCart() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/carts/{id}/items" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateShippingAddress operation
#
##############################################################################
call_updateShippingAddress() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/carts/{id}/shipping-address" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createSubscription operation
#
##############################################################################
call_createSubscription() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/subscriptions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createSubscriptionTemplate operation
#
##############################################################################
call_createSubscriptionTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/subscriptions/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteSubscription operation
#
##############################################################################
call_deleteSubscription() {
    local path_parameter_names=(id plan_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/subscriptions/{id}/plans/{plan_id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSubscriptionTemplate operation
#
##############################################################################
call_deleteSubscriptionTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/subscriptions/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getSubscription operation
#
##############################################################################
call_getSubscription() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/subscriptions/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getSubscriptionTemplate operation
#
##############################################################################
call_getSubscriptionTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/subscriptions/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getSubscriptionTemplates operation
#
##############################################################################
call_getSubscriptionTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/subscriptions/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getSubscriptions operation
#
##############################################################################
call_getSubscriptions() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/subscriptions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call processSubscriptions operation
#
##############################################################################
call_processSubscriptions() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/subscriptions/process" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateSubscription operation
#
##############################################################################
call_updateSubscription() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/subscriptions/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSubscriptionTemplate operation
#
##############################################################################
call_updateSubscriptionTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/subscriptions/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createVendor operation
#
##############################################################################
call_createVendor() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/vendors" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createVendorTemplate operation
#
##############################################################################
call_createVendorTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/vendors/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteVendor operation
#
##############################################################################
call_deleteVendor() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/vendors/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteVendorTemplate operation
#
##############################################################################
call_deleteVendorTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/vendors/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getVendor operation
#
##############################################################################
call_getVendor() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/vendors/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getVendorTemplate operation
#
##############################################################################
call_getVendorTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/vendors/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getVendorTemplates operation
#
##############################################################################
call_getVendorTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/vendors/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getVendors operation
#
##############################################################################
call_getVendors() {
    local path_parameter_names=()
    local query_parameter_names=(filter_name size page order)
    local path

    path=$(build_request_path "/vendors" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateVendor operation
#
##############################################################################
call_updateVendor() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/vendors/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateVendorTemplate operation
#
##############################################################################
call_updateVendorTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/vendors/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createCountryTax operation
#
##############################################################################
call_createCountryTax() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/tax/countries" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createStateTax operation
#
##############################################################################
call_createStateTax() {
    local path_parameter_names=(country_code_iso3)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/tax/countries/{country_code_iso3}/states" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteCountryTax operation
#
##############################################################################
call_deleteCountryTax() {
    local path_parameter_names=(country_code_iso3)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/tax/countries/{country_code_iso3}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteStateTax operation
#
##############################################################################
call_deleteStateTax() {
    local path_parameter_names=(country_code_iso3 state_code)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/tax/countries/{country_code_iso3}/states/{state_code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCountryTax operation
#
##############################################################################
call_getCountryTax() {
    local path_parameter_names=(country_code_iso3)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/tax/countries/{country_code_iso3}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCountryTaxes operation
#
##############################################################################
call_getCountryTaxes() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/tax/countries" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getStateTax operation
#
##############################################################################
call_getStateTax() {
    local path_parameter_names=(country_code_iso3 state_code)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/tax/countries/{country_code_iso3}/states/{state_code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getStateTaxesForCountries operation
#
##############################################################################
call_getStateTaxesForCountries() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/tax/states" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getStateTaxesForCountry operation
#
##############################################################################
call_getStateTaxesForCountry() {
    local path_parameter_names=(country_code_iso3)
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/tax/countries/{country_code_iso3}/states" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateCountryTax operation
#
##############################################################################
call_updateCountryTax() {
    local path_parameter_names=(country_code_iso3)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/tax/countries/{country_code_iso3}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateStateTax operation
#
##############################################################################
call_updateStateTax() {
    local path_parameter_names=(country_code_iso3 state_code)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/tax/countries/{country_code_iso3}/states/{state_code}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getTemplatePropertyType operation
#
##############################################################################
call_getTemplatePropertyType() {
    local path_parameter_names=(type)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/templates/properties/{type}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getTemplatePropertyTypes operation
#
##############################################################################
call_getTemplatePropertyTypes() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/templates/properties" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call addUserTag operation
#
##############################################################################
call_addUserTag() {
    local path_parameter_names=(user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/tags" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createUserTemplate operation
#
##############################################################################
call_createUserTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteUserTemplate operation
#
##############################################################################
call_deleteUserTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/users/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUser operation
#
##############################################################################
call_getUser() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserTags operation
#
##############################################################################
call_getUserTags() {
    local path_parameter_names=(user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/tags" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserTemplate operation
#
##############################################################################
call_getUserTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserTemplates operation
#
##############################################################################
call_getUserTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/users/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUsers operation
#
##############################################################################
call_getUsers() {
    local path_parameter_names=()
    local query_parameter_names=(filter_displayname filter_email filter_firstname filter_fullname filter_lastname filter_username filter_tag filter_group filter_role filter_search size page order)
    local path

    path=$(build_request_path "/users" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call passwordReset operation
#
##############################################################################
call_passwordReset() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{id}/password-reset" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call registerUser operation
#
##############################################################################
call_registerUser() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call removeUserTag operation
#
##############################################################################
call_removeUserTag() {
    local path_parameter_names=(user_id tag)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/tags/{tag}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call setPassword operation
#
##############################################################################
call_setPassword() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{id}/password" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call startPasswordReset operation
#
##############################################################################
call_startPasswordReset() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{id}/password-reset" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call submitPasswordReset operation
#
##############################################################################
call_submitPasswordReset() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/password-reset" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateUser operation
#
##############################################################################
call_updateUser() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateUserTemplate operation
#
##############################################################################
call_updateUserTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createAddress operation
#
##############################################################################
call_createAddress() {
    local path_parameter_names=(user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/addresses" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteAddress operation
#
##############################################################################
call_deleteAddress() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/addresses/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getAddress operation
#
##############################################################################
call_getAddress() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/addresses/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getAddresses operation
#
##############################################################################
call_getAddresses() {
    local path_parameter_names=(user_id)
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/users/{user_id}/addresses" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateAddress operation
#
##############################################################################
call_updateAddress() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/addresses/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addFriend operation
#
##############################################################################
call_addFriend() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/friends/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getFriends operation
#
##############################################################################
call_getFriends() {
    local path_parameter_names=(user_id)
    local query_parameter_names=(size page)
    local path

    path=$(build_request_path "/users/{user_id}/friends" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getInviteToken operation
#
##############################################################################
call_getInviteToken() {
    local path_parameter_names=(user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/invite-token" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getInvites operation
#
##############################################################################
call_getInvites() {
    local path_parameter_names=(user_id)
    local query_parameter_names=(size page)
    local path

    path=$(build_request_path "/users/{user_id}/invites" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call redeemFriendshipToken operation
#
##############################################################################
call_redeemFriendshipToken() {
    local path_parameter_names=(user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/friends/tokens" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call removeOrDeclineFriend operation
#
##############################################################################
call_removeOrDeclineFriend() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/friends/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call addMemberToGroup operation
#
##############################################################################
call_addMemberToGroup() {
    local path_parameter_names=(unique_name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/groups/{unique_name}/members" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addMembersToGroup operation
#
##############################################################################
call_addMembersToGroup() {
    local path_parameter_names=(unique_name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/groups/{unique_name}/members/batch-add" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createGroup operation
#
##############################################################################
call_createGroup() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/groups" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createGroupTemplate operation
#
##############################################################################
call_createGroupTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/groups/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteGroup operation
#
##############################################################################
call_deleteGroup() {
    local path_parameter_names=(unique_name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/groups/{unique_name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteGroupTemplate operation
#
##############################################################################
call_deleteGroupTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/users/groups/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getGroup operation
#
##############################################################################
call_getGroup() {
    local path_parameter_names=(unique_name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/groups/{unique_name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getGroupMember operation
#
##############################################################################
call_getGroupMember() {
    local path_parameter_names=(unique_name user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/groups/{unique_name}/members/{user_id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getGroupMembers operation
#
##############################################################################
call_getGroupMembers() {
    local path_parameter_names=(unique_name)
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/users/groups/{unique_name}/members" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getGroupTemplate operation
#
##############################################################################
call_getGroupTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/groups/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getGroupTemplates operation
#
##############################################################################
call_getGroupTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/users/groups/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getGroupsForUser operation
#
##############################################################################
call_getGroupsForUser() {
    local path_parameter_names=(user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/groups" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call removeGroupMember operation
#
##############################################################################
call_removeGroupMember() {
    local path_parameter_names=(unique_name user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/groups/{unique_name}/members/{user_id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateGroup operation
#
##############################################################################
call_updateGroup() {
    local path_parameter_names=(unique_name)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/groups/{unique_name}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateGroupMemberStatus operation
#
##############################################################################
call_updateGroupMemberStatus() {
    local path_parameter_names=(unique_name user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/groups/{unique_name}/members/{user_id}/status" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateGroupTemplate operation
#
##############################################################################
call_updateGroupTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/groups/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateGroups operation
#
##############################################################################
call_updateGroups() {
    local path_parameter_names=()
    local query_parameter_names=(filter_template filter_member_count filter_name filter_unique_name filter_parent filter_status size page order)
    local path

    path=$(build_request_path "/users/groups" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call addItemToUserInventory operation
#
##############################################################################
call_addItemToUserInventory() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{id}/inventory" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call checkUserEntitlementItem operation
#
##############################################################################
call_checkUserEntitlementItem() {
    local path_parameter_names=(user_id item_id)
    local query_parameter_names=(sku)
    local path

    path=$(build_request_path "/users/{user_id}/entitlements/{item_id}/check" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createEntitlementItem operation
#
##############################################################################
call_createEntitlementItem() {
    local path_parameter_names=()
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/entitlements" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createEntitlementTemplate operation
#
##############################################################################
call_createEntitlementTemplate() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/entitlements/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteEntitlementItem operation
#
##############################################################################
call_deleteEntitlementItem() {
    local path_parameter_names=(entitlement_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/entitlements/{entitlement_id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteEntitlementTemplate operation
#
##############################################################################
call_deleteEntitlementTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/entitlements/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getEntitlementItem operation
#
##############################################################################
call_getEntitlementItem() {
    local path_parameter_names=(entitlement_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/entitlements/{entitlement_id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getEntitlementItems operation
#
##############################################################################
call_getEntitlementItems() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/entitlements" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getEntitlementTemplate operation
#
##############################################################################
call_getEntitlementTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/entitlements/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getEntitlementTemplates operation
#
##############################################################################
call_getEntitlementTemplates() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/entitlements/templates" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserInventories operation
#
##############################################################################
call_getUserInventories() {
    local path_parameter_names=(id)
    local query_parameter_names=(inactive size page filter_item_name filter_item_id filter_username filter_group filter_date)
    local path

    path=$(build_request_path "/users/{id}/inventory" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserInventory operation
#
##############################################################################
call_getUserInventory() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/inventory/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserInventoryLog operation
#
##############################################################################
call_getUserInventoryLog() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=(size page)
    local path

    path=$(build_request_path "/users/{user_id}/inventory/{id}/log" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUsersInventory operation
#
##############################################################################
call_getUsersInventory() {
    local path_parameter_names=()
    local query_parameter_names=(inactive size page filter_item_name filter_item_id filter_username filter_group filter_date)
    local path

    path=$(build_request_path "/inventories" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call grantUserEntitlement operation
#
##############################################################################
call_grantUserEntitlement() {
    local path_parameter_names=(user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/entitlements" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateEntitlementItem operation
#
##############################################################################
call_updateEntitlementItem() {
    local path_parameter_names=(entitlement_id)
    local query_parameter_names=(cascade)
    local path

    path=$(build_request_path "/entitlements/{entitlement_id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateEntitlementTemplate operation
#
##############################################################################
call_updateEntitlementTemplate() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/entitlements/templates/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateUserInventoryBehaviorData operation
#
##############################################################################
call_updateUserInventoryBehaviorData() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/inventory/{id}/behavior-data" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateUserInventoryExpires operation
#
##############################################################################
call_updateUserInventoryExpires() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/inventory/{id}/expires" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateUserInventoryStatus operation
#
##############################################################################
call_updateUserInventoryStatus() {
    local path_parameter_names=(user_id id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/inventory/{id}/status" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call useUserEntitlementItem operation
#
##############################################################################
call_useUserEntitlementItem() {
    local path_parameter_names=(user_id item_id)
    local query_parameter_names=(sku info)
    local path

    path=$(build_request_path "/users/{user_id}/entitlements/{item_id}/use" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createUserRelationship operation
#
##############################################################################
call_createUserRelationship() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/relationships" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteUserRelationship operation
#
##############################################################################
call_deleteUserRelationship() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/relationships/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserRelationship operation
#
##############################################################################
call_getUserRelationship() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/relationships/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserRelationships operation
#
##############################################################################
call_getUserRelationships() {
    local path_parameter_names=()
    local query_parameter_names=(size page order)
    local path

    path=$(build_request_path "/users/relationships" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateUserRelationship operation
#
##############################################################################
call_updateUserRelationship() {
    local path_parameter_names=(id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/relationships/{id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getUserSubscriptionDetails operation
#
##############################################################################
call_getUserSubscriptionDetails() {
    local path_parameter_names=(user_id inventory_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/subscriptions/{inventory_id}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUsersSubscriptionDetails operation
#
##############################################################################
call_getUsersSubscriptionDetails() {
    local path_parameter_names=(user_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/subscriptions" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reactivateUserSubscription operation
#
##############################################################################
call_reactivateUserSubscription() {
    local path_parameter_names=(user_id inventory_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/subscriptions/{inventory_id}/reactivate" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setSubscriptionBillDate operation
#
##############################################################################
call_setSubscriptionBillDate() {
    local path_parameter_names=(user_id inventory_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/subscriptions/{inventory_id}/bill-date" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setSubscriptionPaymentMethod operation
#
##############################################################################
call_setSubscriptionPaymentMethod() {
    local path_parameter_names=(user_id inventory_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/subscriptions/{inventory_id}/payment-method" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setSubscriptionStatus operation
#
##############################################################################
call_setSubscriptionStatus() {
    local path_parameter_names=(user_id inventory_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/subscriptions/{inventory_id}/status" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setUserSubscriptionPlan operation
#
##############################################################################
call_setUserSubscriptionPlan() {
    local path_parameter_names=(user_id inventory_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/subscriptions/{inventory_id}/plan" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setUserSubscriptionPrice operation
#
##############################################################################
call_setUserSubscriptionPrice() {
    local path_parameter_names=(user_id inventory_id)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/users/{user_id}/subscriptions/{inventory_id}/price-override" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getBatch operation
#
##############################################################################
call_getBatch() {
    local path_parameter_names=(token)
    local query_parameter_names=()
    local path

    path=$(build_request_path "/batch/{token}" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call sendBatch operation
#
##############################################################################
call_sendBatch() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/batch" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getHealth operation
#
##############################################################################
call_getHealth() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/health" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteMaintenance operation
#
##############################################################################
call_deleteMaintenance() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/maintenance" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getMaintenance operation
#
##############################################################################
call_getMaintenance() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/maintenance" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call setMaintenance operation
#
##############################################################################
call_setMaintenance() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/maintenance" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateMaintenance operation
#
##############################################################################
call_updateMaintenance() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/maintenance" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the Swagger specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getUserLocationLog operation
#
##############################################################################
call_getUserLocationLog() {
    local path_parameter_names=()
    local query_parameter_names=(user_id size page order)
    local path

    path=$(build_request_path "/security/country-log" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUserTokenDetails operation
#
##############################################################################
call_getUserTokenDetails() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/me" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getVersion operation
#
##############################################################################
call_getVersion() {
    local path_parameter_names=()
    local query_parameter_names=()
    local path

    path=$(build_request_path "/version" path_parameter_names query_parameter_names)
    if [ $? -ne 0 ]; then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}



##############################################################################
#
# Main
#
##############################################################################


# Check dependencies
type curl >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'cURL' installed."; exit 1; }
type sed >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'sed' installed."; exit 1; }
type column >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'bsdmainutils' installed."; exit 1; }

#
# Process command line
#
# Pass all arguemnts before 'operation' to cURL except the ones we override
#
take_user=false
take_host=false
take_accept_header=false
take_contenttype_header=false

for key in "$@"; do
# Take the value of -u|--user argument
if [[ "$take_user" = true ]]; then
    basic_auth_credential="$key"
    take_user=false
    continue
fi
# Take the value of --host argument
if [[ "$take_host" = true ]]; then
    host="$key"
    take_host=false
    continue
fi
# Take the value of --accept argument
if [[ "$take_accept_header" = true ]]; then
    header_accept=$(lookup_mime_type "$key")
    take_accept_header=false
    continue
fi
# Take the value of --content-type argument
if [[ "$take_contenttype_header" = true ]]; then
    header_content_type=$(lookup_mime_type "$key")
    take_contenttype_header=false
    continue
fi
case $key in
    -h|--help)
    if [[ "x$operation" == "x" ]]; then
        print_help
        exit 0
    else
        eval "print_${operation}_help"
        exit 0
    fi
    ;;
    -V|--version)
    print_version
    exit 0
    ;;
    --about)
    print_about
    exit 0
    ;;
    -u|--user)
    take_user=true
    ;;
    --host)
    take_host=true
    ;;
    --force)
    force=true
    ;;
    -ac|--accept)
    take_accept_header=true
    ;;
    -ct|--content-type)
    take_contenttype_header=true
    ;;
    --dry-run)
    print_curl=true
    ;;
    -nc|--no-colors)
        RED=""
        GREEN=""
        YELLOW=""
        BLUE=""
        MAGENTA=""
        CYAN=""
        WHITE=""
        BOLD=""
        OFF=""
        result_color_table=( "" "" "" "" "" "" "" )
    ;;
    getOAuthToken)
    operation="getOAuthToken"
    ;;
    createActivity)
    operation="createActivity"
    ;;
    createActivityOccurrence)
    operation="createActivityOccurrence"
    ;;
    createActivityTemplate)
    operation="createActivityTemplate"
    ;;
    deleteActivity)
    operation="deleteActivity"
    ;;
    deleteActivityTemplate)
    operation="deleteActivityTemplate"
    ;;
    getActivities)
    operation="getActivities"
    ;;
    getActivity)
    operation="getActivity"
    ;;
    getActivityTemplate)
    operation="getActivityTemplate"
    ;;
    getActivityTemplates)
    operation="getActivityTemplates"
    ;;
    setActivityOccurrenceResults)
    operation="setActivityOccurrenceResults"
    ;;
    updateActivity)
    operation="updateActivity"
    ;;
    updateActivityOccurrence)
    operation="updateActivityOccurrence"
    ;;
    updateActivityTemplate)
    operation="updateActivityTemplate"
    ;;
    getDownloadURL)
    operation="getDownloadURL"
    ;;
    getSignedS3URL)
    operation="getSignedS3URL"
    ;;
    createClient)
    operation="createClient"
    ;;
    deleteClient)
    operation="deleteClient"
    ;;
    getClient)
    operation="getClient"
    ;;
    getClientGrantTypes)
    operation="getClientGrantTypes"
    ;;
    getClients)
    operation="getClients"
    ;;
    setClientGrantTypes)
    operation="setClientGrantTypes"
    ;;
    setClientRedirectUris)
    operation="setClientRedirectUris"
    ;;
    updateClient)
    operation="updateClient"
    ;;
    createPermission)
    operation="createPermission"
    ;;
    deletePermission)
    operation="deletePermission"
    ;;
    getPermission)
    operation="getPermission"
    ;;
    getPermissions)
    operation="getPermissions"
    ;;
    updatePermission)
    operation="updatePermission"
    ;;
    createRole)
    operation="createRole"
    ;;
    deleteRole)
    operation="deleteRole"
    ;;
    getClientRoles)
    operation="getClientRoles"
    ;;
    getRole)
    operation="getRole"
    ;;
    getRoles)
    operation="getRoles"
    ;;
    getUserRoles)
    operation="getUserRoles"
    ;;
    setClientRoles)
    operation="setClientRoles"
    ;;
    setPermissionsForRole)
    operation="setPermissionsForRole"
    ;;
    setUserRoles)
    operation="setUserRoles"
    ;;
    updateRole)
    operation="updateRole"
    ;;
    deleteTokens)
    operation="deleteTokens"
    ;;
    getToken)
    operation="getToken"
    ;;
    getTokens)
    operation="getTokens"
    ;;
    getBREActions)
    operation="getBREActions"
    ;;
    createBRECategoryTemplate)
    operation="createBRECategoryTemplate"
    ;;
    deleteBRECategoryTemplate)
    operation="deleteBRECategoryTemplate"
    ;;
    getBRECategories)
    operation="getBRECategories"
    ;;
    getBRECategory)
    operation="getBRECategory"
    ;;
    getBRECategoryTemplate)
    operation="getBRECategoryTemplate"
    ;;
    getBRECategoryTemplates)
    operation="getBRECategoryTemplates"
    ;;
    updateBRECategory)
    operation="updateBRECategory"
    ;;
    updateBRECategoryTemplate)
    operation="updateBRECategoryTemplate"
    ;;
    sendBREEvent)
    operation="sendBREEvent"
    ;;
    getBREExpressions)
    operation="getBREExpressions"
    ;;
    createBREGlobal)
    operation="createBREGlobal"
    ;;
    deleteBREGlobal)
    operation="deleteBREGlobal"
    ;;
    getBREGlobal)
    operation="getBREGlobal"
    ;;
    getBREGlobals)
    operation="getBREGlobals"
    ;;
    updateBREGlobal)
    operation="updateBREGlobal"
    ;;
    createBRERule)
    operation="createBRERule"
    ;;
    deleteBRERule)
    operation="deleteBRERule"
    ;;
    getBREExpressionAsString)
    operation="getBREExpressionAsString"
    ;;
    getBRERule)
    operation="getBRERule"
    ;;
    getBRERules)
    operation="getBRERules"
    ;;
    setBRERule)
    operation="setBRERule"
    ;;
    updateBRERule)
    operation="updateBRERule"
    ;;
    createBRETrigger)
    operation="createBRETrigger"
    ;;
    deleteBRETrigger)
    operation="deleteBRETrigger"
    ;;
    getBRETrigger)
    operation="getBRETrigger"
    ;;
    getBRETriggers)
    operation="getBRETriggers"
    ;;
    updateBRETrigger)
    operation="updateBRETrigger"
    ;;
    getBREVariableTypes)
    operation="getBREVariableTypes"
    ;;
    getBREVariableValues)
    operation="getBREVariableValues"
    ;;
    addChallengeToCampaign)
    operation="addChallengeToCampaign"
    ;;
    createCampaign)
    operation="createCampaign"
    ;;
    createCampaignTemplate)
    operation="createCampaignTemplate"
    ;;
    deleteCampaign)
    operation="deleteCampaign"
    ;;
    deleteCampaignTemplate)
    operation="deleteCampaignTemplate"
    ;;
    getCampaign)
    operation="getCampaign"
    ;;
    getCampaignChallenges)
    operation="getCampaignChallenges"
    ;;
    getCampaignTemplate)
    operation="getCampaignTemplate"
    ;;
    getCampaignTemplates)
    operation="getCampaignTemplates"
    ;;
    getCampaigns)
    operation="getCampaigns"
    ;;
    removeChallengeFromCampaign)
    operation="removeChallengeFromCampaign"
    ;;
    updateCampaign)
    operation="updateCampaign"
    ;;
    updateCampaignTemplate)
    operation="updateCampaignTemplate"
    ;;
    createChallenge)
    operation="createChallenge"
    ;;
    createChallengeActivity)
    operation="createChallengeActivity"
    ;;
    createChallengeActivityTemplate)
    operation="createChallengeActivityTemplate"
    ;;
    createChallengeTemplate)
    operation="createChallengeTemplate"
    ;;
    deleteChallenge)
    operation="deleteChallenge"
    ;;
    deleteChallengeActivity)
    operation="deleteChallengeActivity"
    ;;
    deleteChallengeActivityTemplate)
    operation="deleteChallengeActivityTemplate"
    ;;
    deleteChallengeEvent)
    operation="deleteChallengeEvent"
    ;;
    deleteChallengeTemplate)
    operation="deleteChallengeTemplate"
    ;;
    getChallenge)
    operation="getChallenge"
    ;;
    getChallengeActivities)
    operation="getChallengeActivities"
    ;;
    getChallengeActivity)
    operation="getChallengeActivity"
    ;;
    getChallengeActivityTemplate)
    operation="getChallengeActivityTemplate"
    ;;
    getChallengeActivityTemplates)
    operation="getChallengeActivityTemplates"
    ;;
    getChallengeEvent)
    operation="getChallengeEvent"
    ;;
    getChallengeEvents)
    operation="getChallengeEvents"
    ;;
    getChallengeTemplate)
    operation="getChallengeTemplate"
    ;;
    getChallengeTemplates)
    operation="getChallengeTemplates"
    ;;
    getChallenges)
    operation="getChallenges"
    ;;
    updateChallenge)
    operation="updateChallenge"
    ;;
    updateChallengeActivity)
    operation="updateChallengeActivity"
    ;;
    updateChallengeActivityTemplate)
    operation="updateChallengeActivityTemplate"
    ;;
    updateChallengeTemplate)
    operation="updateChallengeTemplate"
    ;;
    createRewardSet)
    operation="createRewardSet"
    ;;
    deleteRewardSet)
    operation="deleteRewardSet"
    ;;
    getRewardSet)
    operation="getRewardSet"
    ;;
    getRewardSets)
    operation="getRewardSets"
    ;;
    updateRewardSet)
    operation="updateRewardSet"
    ;;
    createCategory)
    operation="createCategory"
    ;;
    createCategoryTemplate)
    operation="createCategoryTemplate"
    ;;
    deleteCategory)
    operation="deleteCategory"
    ;;
    deleteCategoryTemplate)
    operation="deleteCategoryTemplate"
    ;;
    getCategories)
    operation="getCategories"
    ;;
    getCategory)
    operation="getCategory"
    ;;
    getCategoryTemplate)
    operation="getCategoryTemplate"
    ;;
    getCategoryTemplates)
    operation="getCategoryTemplates"
    ;;
    getTags)
    operation="getTags"
    ;;
    updateCategory)
    operation="updateCategory"
    ;;
    updateCategoryTemplate)
    operation="updateCategoryTemplate"
    ;;
    createConfig)
    operation="createConfig"
    ;;
    deleteConfig)
    operation="deleteConfig"
    ;;
    getConfig)
    operation="getConfig"
    ;;
    getConfigs)
    operation="getConfigs"
    ;;
    updateConfig)
    operation="updateConfig"
    ;;
    createArticle)
    operation="createArticle"
    ;;
    createArticleTemplate)
    operation="createArticleTemplate"
    ;;
    deleteArticle)
    operation="deleteArticle"
    ;;
    deleteArticleTemplate)
    operation="deleteArticleTemplate"
    ;;
    getArticle)
    operation="getArticle"
    ;;
    getArticleTemplate)
    operation="getArticleTemplate"
    ;;
    getArticleTemplates)
    operation="getArticleTemplates"
    ;;
    getArticles)
    operation="getArticles"
    ;;
    updateArticle)
    operation="updateArticle"
    ;;
    updateArticleTemplate)
    operation="updateArticleTemplate"
    ;;
    addComment)
    operation="addComment"
    ;;
    deleteComment)
    operation="deleteComment"
    ;;
    getComment)
    operation="getComment"
    ;;
    getComments)
    operation="getComments"
    ;;
    searchComments)
    operation="searchComments"
    ;;
    updateComment)
    operation="updateComment"
    ;;
    answerPoll)
    operation="answerPoll"
    ;;
    createPoll)
    operation="createPoll"
    ;;
    createPollTemplate)
    operation="createPollTemplate"
    ;;
    deletePoll)
    operation="deletePoll"
    ;;
    deletePollTemplate)
    operation="deletePollTemplate"
    ;;
    getPoll)
    operation="getPoll"
    ;;
    getPollAnswer)
    operation="getPollAnswer"
    ;;
    getPollTemplate)
    operation="getPollTemplate"
    ;;
    getPollTemplates)
    operation="getPollTemplates"
    ;;
    getPolls)
    operation="getPolls"
    ;;
    updatePoll)
    operation="updatePoll"
    ;;
    updatePollTemplate)
    operation="updatePollTemplate"
    ;;
    createCurrency)
    operation="createCurrency"
    ;;
    deleteCurrency)
    operation="deleteCurrency"
    ;;
    getCurrencies)
    operation="getCurrencies"
    ;;
    getCurrency)
    operation="getCurrency"
    ;;
    updateCurrency)
    operation="updateCurrency"
    ;;
    addDeviceUsers)
    operation="addDeviceUsers"
    ;;
    createDevice)
    operation="createDevice"
    ;;
    deleteDevice)
    operation="deleteDevice"
    ;;
    deleteDeviceUser)
    operation="deleteDeviceUser"
    ;;
    deleteDeviceUsers)
    operation="deleteDeviceUsers"
    ;;
    getDevice)
    operation="getDevice"
    ;;
    getDevices)
    operation="getDevices"
    ;;
    updateDevice)
    operation="updateDevice"
    ;;
    addDisposition)
    operation="addDisposition"
    ;;
    deleteDisposition)
    operation="deleteDisposition"
    ;;
    getDisposition)
    operation="getDisposition"
    ;;
    getDispositionCounts)
    operation="getDispositionCounts"
    ;;
    getDispositions)
    operation="getDispositions"
    ;;
    createFulfillmentType)
    operation="createFulfillmentType"
    ;;
    deleteFulfillmentType)
    operation="deleteFulfillmentType"
    ;;
    getFulfillmentType)
    operation="getFulfillmentType"
    ;;
    getFulfillmentTypes)
    operation="getFulfillmentTypes"
    ;;
    updateFulfillmentType)
    operation="updateFulfillmentType"
    ;;
    createAchievement)
    operation="createAchievement"
    ;;
    createAchievementTemplate)
    operation="createAchievementTemplate"
    ;;
    deleteAchievement)
    operation="deleteAchievement"
    ;;
    deleteAchievementTemplate)
    operation="deleteAchievementTemplate"
    ;;
    getAchievement)
    operation="getAchievement"
    ;;
    getAchievementTemplate)
    operation="getAchievementTemplate"
    ;;
    getAchievementTemplates)
    operation="getAchievementTemplates"
    ;;
    getAchievementTriggers)
    operation="getAchievementTriggers"
    ;;
    getAchievements)
    operation="getAchievements"
    ;;
    getDerivedAchievements)
    operation="getDerivedAchievements"
    ;;
    getUserAchievementProgress)
    operation="getUserAchievementProgress"
    ;;
    getUserAchievementsProgress)
    operation="getUserAchievementsProgress"
    ;;
    getUsersAchievementProgress)
    operation="getUsersAchievementProgress"
    ;;
    getUsersAchievementsProgress)
    operation="getUsersAchievementsProgress"
    ;;
    incrementAchievementProgress)
    operation="incrementAchievementProgress"
    ;;
    setAchievementProgress)
    operation="setAchievementProgress"
    ;;
    updateAchievement)
    operation="updateAchievement"
    ;;
    updateAchievementTemplate)
    operation="updateAchievementTemplate"
    ;;
    getLeaderboard)
    operation="getLeaderboard"
    ;;
    getLeaderboardRank)
    operation="getLeaderboardRank"
    ;;
    getLeaderboardStrategies)
    operation="getLeaderboardStrategies"
    ;;
    createLevel)
    operation="createLevel"
    ;;
    deleteLevel)
    operation="deleteLevel"
    ;;
    getLevel)
    operation="getLevel"
    ;;
    getLevelTriggers)
    operation="getLevelTriggers"
    ;;
    getLevels)
    operation="getLevels"
    ;;
    getUserLevel)
    operation="getUserLevel"
    ;;
    getUserLevels)
    operation="getUserLevels"
    ;;
    incrementProgress)
    operation="incrementProgress"
    ;;
    setProgress)
    operation="setProgress"
    ;;
    updateLevel)
    operation="updateLevel"
    ;;
    addMetric)
    operation="addMetric"
    ;;
    addQuestionAnswers)
    operation="addQuestionAnswers"
    ;;
    addQuestionTag)
    operation="addQuestionTag"
    ;;
    addTagToQuestionsBatch)
    operation="addTagToQuestionsBatch"
    ;;
    createImportJob)
    operation="createImportJob"
    ;;
    createQuestion)
    operation="createQuestion"
    ;;
    createQuestionTemplate)
    operation="createQuestionTemplate"
    ;;
    deleteImportJob)
    operation="deleteImportJob"
    ;;
    deleteQuestion)
    operation="deleteQuestion"
    ;;
    deleteQuestionAnswers)
    operation="deleteQuestionAnswers"
    ;;
    deleteQuestionTemplate)
    operation="deleteQuestionTemplate"
    ;;
    getImportJob)
    operation="getImportJob"
    ;;
    getImportJobs)
    operation="getImportJobs"
    ;;
    getQuestion)
    operation="getQuestion"
    ;;
    getQuestionAnswer)
    operation="getQuestionAnswer"
    ;;
    getQuestionAnswers)
    operation="getQuestionAnswers"
    ;;
    getQuestionDeltas)
    operation="getQuestionDeltas"
    ;;
    getQuestionTags)
    operation="getQuestionTags"
    ;;
    getQuestionTemplate)
    operation="getQuestionTemplate"
    ;;
    getQuestionTemplates)
    operation="getQuestionTemplates"
    ;;
    getQuestions)
    operation="getQuestions"
    ;;
    getQuestionsCount)
    operation="getQuestionsCount"
    ;;
    processImportJob)
    operation="processImportJob"
    ;;
    removeQuestionTag)
    operation="removeQuestionTag"
    ;;
    removeTagToQuestionsBatch)
    operation="removeTagToQuestionsBatch"
    ;;
    searchQuestionTags)
    operation="searchQuestionTags"
    ;;
    updateImportJob)
    operation="updateImportJob"
    ;;
    updateQuestion)
    operation="updateQuestion"
    ;;
    updateQuestionAnswer)
    operation="updateQuestionAnswer"
    ;;
    updateQuestionTemplate)
    operation="updateQuestionTemplate"
    ;;
    updateQuestionsInBulk)
    operation="updateQuestionsInBulk"
    ;;
    createInvoice)
    operation="createInvoice"
    ;;
    getFulFillmentStatuses)
    operation="getFulFillmentStatuses"
    ;;
    getInvoice)
    operation="getInvoice"
    ;;
    getInvoiceLogs)
    operation="getInvoiceLogs"
    ;;
    getInvoices)
    operation="getInvoices"
    ;;
    getPaymentStatuses)
    operation="getPaymentStatuses"
    ;;
    payInvoice)
    operation="payInvoice"
    ;;
    setBundledInvoiceItemFulfillmentStatus)
    operation="setBundledInvoiceItemFulfillmentStatus"
    ;;
    setExternalRef)
    operation="setExternalRef"
    ;;
    setInvoiceItemFulfillmentStatus)
    operation="setInvoiceItemFulfillmentStatus"
    ;;
    setOrderNotes)
    operation="setOrderNotes"
    ;;
    setPaymentStatus)
    operation="setPaymentStatus"
    ;;
    updateBillingInfo)
    operation="updateBillingInfo"
    ;;
    getCountries)
    operation="getCountries"
    ;;
    getCountryByGeoLocation)
    operation="getCountryByGeoLocation"
    ;;
    getCountryStates)
    operation="getCountryStates"
    ;;
    getCurrencyByGeoLocation)
    operation="getCurrencyByGeoLocation"
    ;;
    addUserLog)
    operation="addUserLog"
    ;;
    getBREEventLog)
    operation="getBREEventLog"
    ;;
    getBREEventLogs)
    operation="getBREEventLogs"
    ;;
    getBREForwardLog)
    operation="getBREForwardLog"
    ;;
    getBREForwardLogs)
    operation="getBREForwardLogs"
    ;;
    getUserLog)
    operation="getUserLog"
    ;;
    getUserLogs)
    operation="getUserLogs"
    ;;
    addArtist)
    operation="addArtist"
    ;;
    createArtistTemplate)
    operation="createArtistTemplate"
    ;;
    deleteArtist)
    operation="deleteArtist"
    ;;
    deleteArtistTemplate)
    operation="deleteArtistTemplate"
    ;;
    getArtist)
    operation="getArtist"
    ;;
    getArtistTemplate)
    operation="getArtistTemplate"
    ;;
    getArtistTemplates)
    operation="getArtistTemplates"
    ;;
    getArtists)
    operation="getArtists"
    ;;
    updateArtist)
    operation="updateArtist"
    ;;
    updateArtistTemplate)
    operation="updateArtistTemplate"
    ;;
    getModerationReport)
    operation="getModerationReport"
    ;;
    getModerationReports)
    operation="getModerationReports"
    ;;
    updateModerationReport)
    operation="updateModerationReport"
    ;;
    addUserToVideoWhitelist)
    operation="addUserToVideoWhitelist"
    ;;
    addVideo)
    operation="addVideo"
    ;;
    addVideoComment)
    operation="addVideoComment"
    ;;
    addVideoContributor)
    operation="addVideoContributor"
    ;;
    addVideoFlag)
    operation="addVideoFlag"
    ;;
    addVideoRelationships)
    operation="addVideoRelationships"
    ;;
    createVideoDisposition)
    operation="createVideoDisposition"
    ;;
    deleteVideo)
    operation="deleteVideo"
    ;;
    deleteVideoComment)
    operation="deleteVideoComment"
    ;;
    deleteVideoDisposition)
    operation="deleteVideoDisposition"
    ;;
    deleteVideoFlag)
    operation="deleteVideoFlag"
    ;;
    deleteVideoRelationship)
    operation="deleteVideoRelationship"
    ;;
    getUserVideos)
    operation="getUserVideos"
    ;;
    getVideo)
    operation="getVideo"
    ;;
    getVideoComments)
    operation="getVideoComments"
    ;;
    getVideoDispositions)
    operation="getVideoDispositions"
    ;;
    getVideoRelationships)
    operation="getVideoRelationships"
    ;;
    getVideos)
    operation="getVideos"
    ;;
    removeUserFromVideoWhitelist)
    operation="removeUserFromVideoWhitelist"
    ;;
    removeVideoContributor)
    operation="removeVideoContributor"
    ;;
    updateVideo)
    operation="updateVideo"
    ;;
    updateVideoComment)
    operation="updateVideoComment"
    ;;
    updateVideoRelationship)
    operation="updateVideoRelationship"
    ;;
    viewVideo)
    operation="viewVideo"
    ;;
    sendRawEmail)
    operation="sendRawEmail"
    ;;
    sendRawSMS)
    operation="sendRawSMS"
    ;;
    sendTemplatedEmail)
    operation="sendTemplatedEmail"
    ;;
    sendTemplatedSMS)
    operation="sendTemplatedSMS"
    ;;
    createPaymentMethod)
    operation="createPaymentMethod"
    ;;
    deletePaymentMethod)
    operation="deletePaymentMethod"
    ;;
    getPaymentMethod)
    operation="getPaymentMethod"
    ;;
    getPaymentMethods)
    operation="getPaymentMethods"
    ;;
    paymentAuthorization)
    operation="paymentAuthorization"
    ;;
    paymentCapture)
    operation="paymentCapture"
    ;;
    updatePaymentMethod)
    operation="updatePaymentMethod"
    ;;
    verifyAppleReceipt)
    operation="verifyAppleReceipt"
    ;;
    createOrUpdateFattMerchantPaymentMethod)
    operation="createOrUpdateFattMerchantPaymentMethod"
    ;;
    handleGooglePayment)
    operation="handleGooglePayment"
    ;;
    silentPostOptimal)
    operation="silentPostOptimal"
    ;;
    createPayPalBillingAgreementUrl)
    operation="createPayPalBillingAgreementUrl"
    ;;
    createPayPalExpressCheckout)
    operation="createPayPalExpressCheckout"
    ;;
    finalizePayPalBillingAgreement)
    operation="finalizePayPalBillingAgreement"
    ;;
    finalizePayPalCheckout)
    operation="finalizePayPalCheckout"
    ;;
    createStripePaymentMethod)
    operation="createStripePaymentMethod"
    ;;
    payStripeInvoice)
    operation="payStripeInvoice"
    ;;
    getTransaction)
    operation="getTransaction"
    ;;
    getTransactions)
    operation="getTransactions"
    ;;
    refundTransaction)
    operation="refundTransaction"
    ;;
    getUserWallet)
    operation="getUserWallet"
    ;;
    getUserWalletTransactions)
    operation="getUserWalletTransactions"
    ;;
    getUserWallets)
    operation="getUserWallets"
    ;;
    getWalletBalances)
    operation="getWalletBalances"
    ;;
    getWalletTransactions)
    operation="getWalletTransactions"
    ;;
    getWallets)
    operation="getWallets"
    ;;
    updateWalletBalance)
    operation="updateWalletBalance"
    ;;
    createXsollaTokenUrl)
    operation="createXsollaTokenUrl"
    ;;
    receiveXsollaNotification)
    operation="receiveXsollaNotification"
    ;;
    getChallengeEventLeaderboard)
    operation="getChallengeEventLeaderboard"
    ;;
    getChallengeEventParticipants)
    operation="getChallengeEventParticipants"
    ;;
    getInvoiceReports)
    operation="getInvoiceReports"
    ;;
    getItemRevenue)
    operation="getItemRevenue"
    ;;
    getRefundRevenue)
    operation="getRefundRevenue"
    ;;
    getRevenueByCountry)
    operation="getRevenueByCountry"
    ;;
    getRevenueByItem)
    operation="getRevenueByItem"
    ;;
    getSubscriptionRevenue)
    operation="getSubscriptionRevenue"
    ;;
    getSubscriptionReports)
    operation="getSubscriptionReports"
    ;;
    getUsageByDay)
    operation="getUsageByDay"
    ;;
    getUsageByHour)
    operation="getUsageByHour"
    ;;
    getUsageByMinute)
    operation="getUsageByMinute"
    ;;
    getUsageByMonth)
    operation="getUsageByMonth"
    ;;
    getUsageByYear)
    operation="getUsageByYear"
    ;;
    getUsageEndpoints)
    operation="getUsageEndpoints"
    ;;
    getUserRegistrations)
    operation="getUserRegistrations"
    ;;
    addSearchIndex)
    operation="addSearchIndex"
    ;;
    addSearchMappings)
    operation="addSearchMappings"
    ;;
    deleteSearchIndex)
    operation="deleteSearchIndex"
    ;;
    deleteSearchIndexes)
    operation="deleteSearchIndexes"
    ;;
    searchIndex)
    operation="searchIndex"
    ;;
    linkAccounts)
    operation="linkAccounts"
    ;;
    linkAccounts1)
    operation="linkAccounts1"
    ;;
    createItemTemplate)
    operation="createItemTemplate"
    ;;
    createStoreItem)
    operation="createStoreItem"
    ;;
    deleteItemTemplate)
    operation="deleteItemTemplate"
    ;;
    deleteStoreItem)
    operation="deleteStoreItem"
    ;;
    getBehaviors)
    operation="getBehaviors"
    ;;
    getItemTemplate)
    operation="getItemTemplate"
    ;;
    getItemTemplates)
    operation="getItemTemplates"
    ;;
    getStore)
    operation="getStore"
    ;;
    getStoreItem)
    operation="getStoreItem"
    ;;
    getStoreItems)
    operation="getStoreItems"
    ;;
    quickBuy)
    operation="quickBuy"
    ;;
    updateItemTemplate)
    operation="updateItemTemplate"
    ;;
    updateStoreItem)
    operation="updateStoreItem"
    ;;
    createBundleItem)
    operation="createBundleItem"
    ;;
    createBundleTemplate)
    operation="createBundleTemplate"
    ;;
    deleteBundleItem)
    operation="deleteBundleItem"
    ;;
    deleteBundleTemplate)
    operation="deleteBundleTemplate"
    ;;
    getBundleItem)
    operation="getBundleItem"
    ;;
    getBundleTemplate)
    operation="getBundleTemplate"
    ;;
    getBundleTemplates)
    operation="getBundleTemplates"
    ;;
    updateBundleItem)
    operation="updateBundleItem"
    ;;
    updateBundleTemplate)
    operation="updateBundleTemplate"
    ;;
    createCouponItem)
    operation="createCouponItem"
    ;;
    createCouponTemplate)
    operation="createCouponTemplate"
    ;;
    deleteCouponItem)
    operation="deleteCouponItem"
    ;;
    deleteCouponTemplate)
    operation="deleteCouponTemplate"
    ;;
    getCouponItem)
    operation="getCouponItem"
    ;;
    getCouponTemplate)
    operation="getCouponTemplate"
    ;;
    getCouponTemplates)
    operation="getCouponTemplates"
    ;;
    updateCouponItem)
    operation="updateCouponItem"
    ;;
    updateCouponTemplate)
    operation="updateCouponTemplate"
    ;;
    createCatalogSale)
    operation="createCatalogSale"
    ;;
    deleteCatalogSale)
    operation="deleteCatalogSale"
    ;;
    getCatalogSale)
    operation="getCatalogSale"
    ;;
    getCatalogSales)
    operation="getCatalogSales"
    ;;
    updateCatalogSale)
    operation="updateCatalogSale"
    ;;
    createShippingItem)
    operation="createShippingItem"
    ;;
    createShippingTemplate)
    operation="createShippingTemplate"
    ;;
    deleteShippingItem)
    operation="deleteShippingItem"
    ;;
    deleteShippingTemplate)
    operation="deleteShippingTemplate"
    ;;
    getShippingItem)
    operation="getShippingItem"
    ;;
    getShippingTemplate)
    operation="getShippingTemplate"
    ;;
    getShippingTemplates)
    operation="getShippingTemplates"
    ;;
    updateShippingItem)
    operation="updateShippingItem"
    ;;
    updateShippingTemplate)
    operation="updateShippingTemplate"
    ;;
    addCustomDiscount)
    operation="addCustomDiscount"
    ;;
    addDiscountToCart)
    operation="addDiscountToCart"
    ;;
    addItemToCart)
    operation="addItemToCart"
    ;;
    createCart)
    operation="createCart"
    ;;
    getCart)
    operation="getCart"
    ;;
    getCarts)
    operation="getCarts"
    ;;
    getShippable)
    operation="getShippable"
    ;;
    getShippingCountries)
    operation="getShippingCountries"
    ;;
    removeDiscountFromCart)
    operation="removeDiscountFromCart"
    ;;
    setCartCurrency)
    operation="setCartCurrency"
    ;;
    setCartOwner)
    operation="setCartOwner"
    ;;
    updateItemInCart)
    operation="updateItemInCart"
    ;;
    updateShippingAddress)
    operation="updateShippingAddress"
    ;;
    createSubscription)
    operation="createSubscription"
    ;;
    createSubscriptionTemplate)
    operation="createSubscriptionTemplate"
    ;;
    deleteSubscription)
    operation="deleteSubscription"
    ;;
    deleteSubscriptionTemplate)
    operation="deleteSubscriptionTemplate"
    ;;
    getSubscription)
    operation="getSubscription"
    ;;
    getSubscriptionTemplate)
    operation="getSubscriptionTemplate"
    ;;
    getSubscriptionTemplates)
    operation="getSubscriptionTemplates"
    ;;
    getSubscriptions)
    operation="getSubscriptions"
    ;;
    processSubscriptions)
    operation="processSubscriptions"
    ;;
    updateSubscription)
    operation="updateSubscription"
    ;;
    updateSubscriptionTemplate)
    operation="updateSubscriptionTemplate"
    ;;
    createVendor)
    operation="createVendor"
    ;;
    createVendorTemplate)
    operation="createVendorTemplate"
    ;;
    deleteVendor)
    operation="deleteVendor"
    ;;
    deleteVendorTemplate)
    operation="deleteVendorTemplate"
    ;;
    getVendor)
    operation="getVendor"
    ;;
    getVendorTemplate)
    operation="getVendorTemplate"
    ;;
    getVendorTemplates)
    operation="getVendorTemplates"
    ;;
    getVendors)
    operation="getVendors"
    ;;
    updateVendor)
    operation="updateVendor"
    ;;
    updateVendorTemplate)
    operation="updateVendorTemplate"
    ;;
    createCountryTax)
    operation="createCountryTax"
    ;;
    createStateTax)
    operation="createStateTax"
    ;;
    deleteCountryTax)
    operation="deleteCountryTax"
    ;;
    deleteStateTax)
    operation="deleteStateTax"
    ;;
    getCountryTax)
    operation="getCountryTax"
    ;;
    getCountryTaxes)
    operation="getCountryTaxes"
    ;;
    getStateTax)
    operation="getStateTax"
    ;;
    getStateTaxesForCountries)
    operation="getStateTaxesForCountries"
    ;;
    getStateTaxesForCountry)
    operation="getStateTaxesForCountry"
    ;;
    updateCountryTax)
    operation="updateCountryTax"
    ;;
    updateStateTax)
    operation="updateStateTax"
    ;;
    getTemplatePropertyType)
    operation="getTemplatePropertyType"
    ;;
    getTemplatePropertyTypes)
    operation="getTemplatePropertyTypes"
    ;;
    addUserTag)
    operation="addUserTag"
    ;;
    createUserTemplate)
    operation="createUserTemplate"
    ;;
    deleteUserTemplate)
    operation="deleteUserTemplate"
    ;;
    getUser)
    operation="getUser"
    ;;
    getUserTags)
    operation="getUserTags"
    ;;
    getUserTemplate)
    operation="getUserTemplate"
    ;;
    getUserTemplates)
    operation="getUserTemplates"
    ;;
    getUsers)
    operation="getUsers"
    ;;
    passwordReset)
    operation="passwordReset"
    ;;
    registerUser)
    operation="registerUser"
    ;;
    removeUserTag)
    operation="removeUserTag"
    ;;
    setPassword)
    operation="setPassword"
    ;;
    startPasswordReset)
    operation="startPasswordReset"
    ;;
    submitPasswordReset)
    operation="submitPasswordReset"
    ;;
    updateUser)
    operation="updateUser"
    ;;
    updateUserTemplate)
    operation="updateUserTemplate"
    ;;
    createAddress)
    operation="createAddress"
    ;;
    deleteAddress)
    operation="deleteAddress"
    ;;
    getAddress)
    operation="getAddress"
    ;;
    getAddresses)
    operation="getAddresses"
    ;;
    updateAddress)
    operation="updateAddress"
    ;;
    addFriend)
    operation="addFriend"
    ;;
    getFriends)
    operation="getFriends"
    ;;
    getInviteToken)
    operation="getInviteToken"
    ;;
    getInvites)
    operation="getInvites"
    ;;
    redeemFriendshipToken)
    operation="redeemFriendshipToken"
    ;;
    removeOrDeclineFriend)
    operation="removeOrDeclineFriend"
    ;;
    addMemberToGroup)
    operation="addMemberToGroup"
    ;;
    addMembersToGroup)
    operation="addMembersToGroup"
    ;;
    createGroup)
    operation="createGroup"
    ;;
    createGroupTemplate)
    operation="createGroupTemplate"
    ;;
    deleteGroup)
    operation="deleteGroup"
    ;;
    deleteGroupTemplate)
    operation="deleteGroupTemplate"
    ;;
    getGroup)
    operation="getGroup"
    ;;
    getGroupMember)
    operation="getGroupMember"
    ;;
    getGroupMembers)
    operation="getGroupMembers"
    ;;
    getGroupTemplate)
    operation="getGroupTemplate"
    ;;
    getGroupTemplates)
    operation="getGroupTemplates"
    ;;
    getGroupsForUser)
    operation="getGroupsForUser"
    ;;
    removeGroupMember)
    operation="removeGroupMember"
    ;;
    updateGroup)
    operation="updateGroup"
    ;;
    updateGroupMemberStatus)
    operation="updateGroupMemberStatus"
    ;;
    updateGroupTemplate)
    operation="updateGroupTemplate"
    ;;
    updateGroups)
    operation="updateGroups"
    ;;
    addItemToUserInventory)
    operation="addItemToUserInventory"
    ;;
    checkUserEntitlementItem)
    operation="checkUserEntitlementItem"
    ;;
    createEntitlementItem)
    operation="createEntitlementItem"
    ;;
    createEntitlementTemplate)
    operation="createEntitlementTemplate"
    ;;
    deleteEntitlementItem)
    operation="deleteEntitlementItem"
    ;;
    deleteEntitlementTemplate)
    operation="deleteEntitlementTemplate"
    ;;
    getEntitlementItem)
    operation="getEntitlementItem"
    ;;
    getEntitlementItems)
    operation="getEntitlementItems"
    ;;
    getEntitlementTemplate)
    operation="getEntitlementTemplate"
    ;;
    getEntitlementTemplates)
    operation="getEntitlementTemplates"
    ;;
    getUserInventories)
    operation="getUserInventories"
    ;;
    getUserInventory)
    operation="getUserInventory"
    ;;
    getUserInventoryLog)
    operation="getUserInventoryLog"
    ;;
    getUsersInventory)
    operation="getUsersInventory"
    ;;
    grantUserEntitlement)
    operation="grantUserEntitlement"
    ;;
    updateEntitlementItem)
    operation="updateEntitlementItem"
    ;;
    updateEntitlementTemplate)
    operation="updateEntitlementTemplate"
    ;;
    updateUserInventoryBehaviorData)
    operation="updateUserInventoryBehaviorData"
    ;;
    updateUserInventoryExpires)
    operation="updateUserInventoryExpires"
    ;;
    updateUserInventoryStatus)
    operation="updateUserInventoryStatus"
    ;;
    useUserEntitlementItem)
    operation="useUserEntitlementItem"
    ;;
    createUserRelationship)
    operation="createUserRelationship"
    ;;
    deleteUserRelationship)
    operation="deleteUserRelationship"
    ;;
    getUserRelationship)
    operation="getUserRelationship"
    ;;
    getUserRelationships)
    operation="getUserRelationships"
    ;;
    updateUserRelationship)
    operation="updateUserRelationship"
    ;;
    getUserSubscriptionDetails)
    operation="getUserSubscriptionDetails"
    ;;
    getUsersSubscriptionDetails)
    operation="getUsersSubscriptionDetails"
    ;;
    reactivateUserSubscription)
    operation="reactivateUserSubscription"
    ;;
    setSubscriptionBillDate)
    operation="setSubscriptionBillDate"
    ;;
    setSubscriptionPaymentMethod)
    operation="setSubscriptionPaymentMethod"
    ;;
    setSubscriptionStatus)
    operation="setSubscriptionStatus"
    ;;
    setUserSubscriptionPlan)
    operation="setUserSubscriptionPlan"
    ;;
    setUserSubscriptionPrice)
    operation="setUserSubscriptionPrice"
    ;;
    getBatch)
    operation="getBatch"
    ;;
    sendBatch)
    operation="sendBatch"
    ;;
    getHealth)
    operation="getHealth"
    ;;
    deleteMaintenance)
    operation="deleteMaintenance"
    ;;
    getMaintenance)
    operation="getMaintenance"
    ;;
    setMaintenance)
    operation="setMaintenance"
    ;;
    updateMaintenance)
    operation="updateMaintenance"
    ;;
    getUserLocationLog)
    operation="getUserLocationLog"
    ;;
    getUserTokenDetails)
    operation="getUserTokenDetails"
    ;;
    getVersion)
    operation="getVersion"
    ;;
    *==*)
    # Parse body arguments and convert them into top level
    # JSON properties passed in the body content as strings
    if [[ "$operation" ]]; then
        IFS='==' read body_key sep body_value <<< "$key"
        body_parameters[${body_key}]="\"${body_value}\""
    fi
    ;;
    *:=*)
    # Parse body arguments and convert them into top level
    # JSON properties passed in the body content without qoutes
    if [[ "$operation" ]]; then
        IFS=':=' read body_key sep body_value <<< "$key"
        body_parameters[${body_key}]=${body_value}
    fi
    ;;
    +([^=]):*)
    # Parse header arguments and convert them into curl
    # only after the operation argument
    if [[ "$operation" ]]; then
        IFS=':' read header_name header_value <<< "$key"
        header_arguments[$header_name]=$header_value
    else
        curl_arguments+=" $key"
    fi
    ;;
    -)
    body_content_temp_file=$(mktemp)
    cat - > $body_content_temp_file
    ;;
    *=*)
    # Parse operation arguments and convert them into curl
    # only after the operation argument
    if [[ "$operation" ]]; then
        IFS='=' read parameter_name parameter_value <<< "$key"
        if [[ -z "${operation_parameters[$parameter_name]+foo}" ]]; then
            operation_parameters[$parameter_name]=$(url_escape "${parameter_value}")
        else
            operation_parameters[$parameter_name]+=":::"$(url_escape "${parameter_value}")
        fi
    else
        curl_arguments+=" $key"
    fi
    ;;
    *)
    # If we are before the operation, treat the arguments as cURL arguments
    if [[ "x$operation" == "x" ]]; then
        # Maintain quotes around cURL arguments if necessary
        space_regexp="[[:space:]]"
        if [[ $key =~ $space_regexp ]]; then
            curl_arguments+=" \"$key\""
        else
            curl_arguments+=" $key"
        fi
    fi
    ;;
esac
done


# Check if user provided host name
if [[ -z "$host" ]]; then
    ERROR_MSG="ERROR: No hostname provided!!! You have to  provide on command line option '--host ...'"
    exit 1
fi

# Check if user specified operation ID
if [[ -z "$operation" ]]; then
    ERROR_MSG="ERROR: No operation specified!!!"
    exit 1
fi


# Run cURL command based on the operation ID
case $operation in
    getOAuthToken)
    call_getOAuthToken
    ;;
    createActivity)
    call_createActivity
    ;;
    createActivityOccurrence)
    call_createActivityOccurrence
    ;;
    createActivityTemplate)
    call_createActivityTemplate
    ;;
    deleteActivity)
    call_deleteActivity
    ;;
    deleteActivityTemplate)
    call_deleteActivityTemplate
    ;;
    getActivities)
    call_getActivities
    ;;
    getActivity)
    call_getActivity
    ;;
    getActivityTemplate)
    call_getActivityTemplate
    ;;
    getActivityTemplates)
    call_getActivityTemplates
    ;;
    setActivityOccurrenceResults)
    call_setActivityOccurrenceResults
    ;;
    updateActivity)
    call_updateActivity
    ;;
    updateActivityOccurrence)
    call_updateActivityOccurrence
    ;;
    updateActivityTemplate)
    call_updateActivityTemplate
    ;;
    getDownloadURL)
    call_getDownloadURL
    ;;
    getSignedS3URL)
    call_getSignedS3URL
    ;;
    createClient)
    call_createClient
    ;;
    deleteClient)
    call_deleteClient
    ;;
    getClient)
    call_getClient
    ;;
    getClientGrantTypes)
    call_getClientGrantTypes
    ;;
    getClients)
    call_getClients
    ;;
    setClientGrantTypes)
    call_setClientGrantTypes
    ;;
    setClientRedirectUris)
    call_setClientRedirectUris
    ;;
    updateClient)
    call_updateClient
    ;;
    createPermission)
    call_createPermission
    ;;
    deletePermission)
    call_deletePermission
    ;;
    getPermission)
    call_getPermission
    ;;
    getPermissions)
    call_getPermissions
    ;;
    updatePermission)
    call_updatePermission
    ;;
    createRole)
    call_createRole
    ;;
    deleteRole)
    call_deleteRole
    ;;
    getClientRoles)
    call_getClientRoles
    ;;
    getRole)
    call_getRole
    ;;
    getRoles)
    call_getRoles
    ;;
    getUserRoles)
    call_getUserRoles
    ;;
    setClientRoles)
    call_setClientRoles
    ;;
    setPermissionsForRole)
    call_setPermissionsForRole
    ;;
    setUserRoles)
    call_setUserRoles
    ;;
    updateRole)
    call_updateRole
    ;;
    deleteTokens)
    call_deleteTokens
    ;;
    getToken)
    call_getToken
    ;;
    getTokens)
    call_getTokens
    ;;
    getBREActions)
    call_getBREActions
    ;;
    createBRECategoryTemplate)
    call_createBRECategoryTemplate
    ;;
    deleteBRECategoryTemplate)
    call_deleteBRECategoryTemplate
    ;;
    getBRECategories)
    call_getBRECategories
    ;;
    getBRECategory)
    call_getBRECategory
    ;;
    getBRECategoryTemplate)
    call_getBRECategoryTemplate
    ;;
    getBRECategoryTemplates)
    call_getBRECategoryTemplates
    ;;
    updateBRECategory)
    call_updateBRECategory
    ;;
    updateBRECategoryTemplate)
    call_updateBRECategoryTemplate
    ;;
    sendBREEvent)
    call_sendBREEvent
    ;;
    getBREExpressions)
    call_getBREExpressions
    ;;
    createBREGlobal)
    call_createBREGlobal
    ;;
    deleteBREGlobal)
    call_deleteBREGlobal
    ;;
    getBREGlobal)
    call_getBREGlobal
    ;;
    getBREGlobals)
    call_getBREGlobals
    ;;
    updateBREGlobal)
    call_updateBREGlobal
    ;;
    createBRERule)
    call_createBRERule
    ;;
    deleteBRERule)
    call_deleteBRERule
    ;;
    getBREExpressionAsString)
    call_getBREExpressionAsString
    ;;
    getBRERule)
    call_getBRERule
    ;;
    getBRERules)
    call_getBRERules
    ;;
    setBRERule)
    call_setBRERule
    ;;
    updateBRERule)
    call_updateBRERule
    ;;
    createBRETrigger)
    call_createBRETrigger
    ;;
    deleteBRETrigger)
    call_deleteBRETrigger
    ;;
    getBRETrigger)
    call_getBRETrigger
    ;;
    getBRETriggers)
    call_getBRETriggers
    ;;
    updateBRETrigger)
    call_updateBRETrigger
    ;;
    getBREVariableTypes)
    call_getBREVariableTypes
    ;;
    getBREVariableValues)
    call_getBREVariableValues
    ;;
    addChallengeToCampaign)
    call_addChallengeToCampaign
    ;;
    createCampaign)
    call_createCampaign
    ;;
    createCampaignTemplate)
    call_createCampaignTemplate
    ;;
    deleteCampaign)
    call_deleteCampaign
    ;;
    deleteCampaignTemplate)
    call_deleteCampaignTemplate
    ;;
    getCampaign)
    call_getCampaign
    ;;
    getCampaignChallenges)
    call_getCampaignChallenges
    ;;
    getCampaignTemplate)
    call_getCampaignTemplate
    ;;
    getCampaignTemplates)
    call_getCampaignTemplates
    ;;
    getCampaigns)
    call_getCampaigns
    ;;
    removeChallengeFromCampaign)
    call_removeChallengeFromCampaign
    ;;
    updateCampaign)
    call_updateCampaign
    ;;
    updateCampaignTemplate)
    call_updateCampaignTemplate
    ;;
    createChallenge)
    call_createChallenge
    ;;
    createChallengeActivity)
    call_createChallengeActivity
    ;;
    createChallengeActivityTemplate)
    call_createChallengeActivityTemplate
    ;;
    createChallengeTemplate)
    call_createChallengeTemplate
    ;;
    deleteChallenge)
    call_deleteChallenge
    ;;
    deleteChallengeActivity)
    call_deleteChallengeActivity
    ;;
    deleteChallengeActivityTemplate)
    call_deleteChallengeActivityTemplate
    ;;
    deleteChallengeEvent)
    call_deleteChallengeEvent
    ;;
    deleteChallengeTemplate)
    call_deleteChallengeTemplate
    ;;
    getChallenge)
    call_getChallenge
    ;;
    getChallengeActivities)
    call_getChallengeActivities
    ;;
    getChallengeActivity)
    call_getChallengeActivity
    ;;
    getChallengeActivityTemplate)
    call_getChallengeActivityTemplate
    ;;
    getChallengeActivityTemplates)
    call_getChallengeActivityTemplates
    ;;
    getChallengeEvent)
    call_getChallengeEvent
    ;;
    getChallengeEvents)
    call_getChallengeEvents
    ;;
    getChallengeTemplate)
    call_getChallengeTemplate
    ;;
    getChallengeTemplates)
    call_getChallengeTemplates
    ;;
    getChallenges)
    call_getChallenges
    ;;
    updateChallenge)
    call_updateChallenge
    ;;
    updateChallengeActivity)
    call_updateChallengeActivity
    ;;
    updateChallengeActivityTemplate)
    call_updateChallengeActivityTemplate
    ;;
    updateChallengeTemplate)
    call_updateChallengeTemplate
    ;;
    createRewardSet)
    call_createRewardSet
    ;;
    deleteRewardSet)
    call_deleteRewardSet
    ;;
    getRewardSet)
    call_getRewardSet
    ;;
    getRewardSets)
    call_getRewardSets
    ;;
    updateRewardSet)
    call_updateRewardSet
    ;;
    createCategory)
    call_createCategory
    ;;
    createCategoryTemplate)
    call_createCategoryTemplate
    ;;
    deleteCategory)
    call_deleteCategory
    ;;
    deleteCategoryTemplate)
    call_deleteCategoryTemplate
    ;;
    getCategories)
    call_getCategories
    ;;
    getCategory)
    call_getCategory
    ;;
    getCategoryTemplate)
    call_getCategoryTemplate
    ;;
    getCategoryTemplates)
    call_getCategoryTemplates
    ;;
    getTags)
    call_getTags
    ;;
    updateCategory)
    call_updateCategory
    ;;
    updateCategoryTemplate)
    call_updateCategoryTemplate
    ;;
    createConfig)
    call_createConfig
    ;;
    deleteConfig)
    call_deleteConfig
    ;;
    getConfig)
    call_getConfig
    ;;
    getConfigs)
    call_getConfigs
    ;;
    updateConfig)
    call_updateConfig
    ;;
    createArticle)
    call_createArticle
    ;;
    createArticleTemplate)
    call_createArticleTemplate
    ;;
    deleteArticle)
    call_deleteArticle
    ;;
    deleteArticleTemplate)
    call_deleteArticleTemplate
    ;;
    getArticle)
    call_getArticle
    ;;
    getArticleTemplate)
    call_getArticleTemplate
    ;;
    getArticleTemplates)
    call_getArticleTemplates
    ;;
    getArticles)
    call_getArticles
    ;;
    updateArticle)
    call_updateArticle
    ;;
    updateArticleTemplate)
    call_updateArticleTemplate
    ;;
    addComment)
    call_addComment
    ;;
    deleteComment)
    call_deleteComment
    ;;
    getComment)
    call_getComment
    ;;
    getComments)
    call_getComments
    ;;
    searchComments)
    call_searchComments
    ;;
    updateComment)
    call_updateComment
    ;;
    answerPoll)
    call_answerPoll
    ;;
    createPoll)
    call_createPoll
    ;;
    createPollTemplate)
    call_createPollTemplate
    ;;
    deletePoll)
    call_deletePoll
    ;;
    deletePollTemplate)
    call_deletePollTemplate
    ;;
    getPoll)
    call_getPoll
    ;;
    getPollAnswer)
    call_getPollAnswer
    ;;
    getPollTemplate)
    call_getPollTemplate
    ;;
    getPollTemplates)
    call_getPollTemplates
    ;;
    getPolls)
    call_getPolls
    ;;
    updatePoll)
    call_updatePoll
    ;;
    updatePollTemplate)
    call_updatePollTemplate
    ;;
    createCurrency)
    call_createCurrency
    ;;
    deleteCurrency)
    call_deleteCurrency
    ;;
    getCurrencies)
    call_getCurrencies
    ;;
    getCurrency)
    call_getCurrency
    ;;
    updateCurrency)
    call_updateCurrency
    ;;
    addDeviceUsers)
    call_addDeviceUsers
    ;;
    createDevice)
    call_createDevice
    ;;
    deleteDevice)
    call_deleteDevice
    ;;
    deleteDeviceUser)
    call_deleteDeviceUser
    ;;
    deleteDeviceUsers)
    call_deleteDeviceUsers
    ;;
    getDevice)
    call_getDevice
    ;;
    getDevices)
    call_getDevices
    ;;
    updateDevice)
    call_updateDevice
    ;;
    addDisposition)
    call_addDisposition
    ;;
    deleteDisposition)
    call_deleteDisposition
    ;;
    getDisposition)
    call_getDisposition
    ;;
    getDispositionCounts)
    call_getDispositionCounts
    ;;
    getDispositions)
    call_getDispositions
    ;;
    createFulfillmentType)
    call_createFulfillmentType
    ;;
    deleteFulfillmentType)
    call_deleteFulfillmentType
    ;;
    getFulfillmentType)
    call_getFulfillmentType
    ;;
    getFulfillmentTypes)
    call_getFulfillmentTypes
    ;;
    updateFulfillmentType)
    call_updateFulfillmentType
    ;;
    createAchievement)
    call_createAchievement
    ;;
    createAchievementTemplate)
    call_createAchievementTemplate
    ;;
    deleteAchievement)
    call_deleteAchievement
    ;;
    deleteAchievementTemplate)
    call_deleteAchievementTemplate
    ;;
    getAchievement)
    call_getAchievement
    ;;
    getAchievementTemplate)
    call_getAchievementTemplate
    ;;
    getAchievementTemplates)
    call_getAchievementTemplates
    ;;
    getAchievementTriggers)
    call_getAchievementTriggers
    ;;
    getAchievements)
    call_getAchievements
    ;;
    getDerivedAchievements)
    call_getDerivedAchievements
    ;;
    getUserAchievementProgress)
    call_getUserAchievementProgress
    ;;
    getUserAchievementsProgress)
    call_getUserAchievementsProgress
    ;;
    getUsersAchievementProgress)
    call_getUsersAchievementProgress
    ;;
    getUsersAchievementsProgress)
    call_getUsersAchievementsProgress
    ;;
    incrementAchievementProgress)
    call_incrementAchievementProgress
    ;;
    setAchievementProgress)
    call_setAchievementProgress
    ;;
    updateAchievement)
    call_updateAchievement
    ;;
    updateAchievementTemplate)
    call_updateAchievementTemplate
    ;;
    getLeaderboard)
    call_getLeaderboard
    ;;
    getLeaderboardRank)
    call_getLeaderboardRank
    ;;
    getLeaderboardStrategies)
    call_getLeaderboardStrategies
    ;;
    createLevel)
    call_createLevel
    ;;
    deleteLevel)
    call_deleteLevel
    ;;
    getLevel)
    call_getLevel
    ;;
    getLevelTriggers)
    call_getLevelTriggers
    ;;
    getLevels)
    call_getLevels
    ;;
    getUserLevel)
    call_getUserLevel
    ;;
    getUserLevels)
    call_getUserLevels
    ;;
    incrementProgress)
    call_incrementProgress
    ;;
    setProgress)
    call_setProgress
    ;;
    updateLevel)
    call_updateLevel
    ;;
    addMetric)
    call_addMetric
    ;;
    addQuestionAnswers)
    call_addQuestionAnswers
    ;;
    addQuestionTag)
    call_addQuestionTag
    ;;
    addTagToQuestionsBatch)
    call_addTagToQuestionsBatch
    ;;
    createImportJob)
    call_createImportJob
    ;;
    createQuestion)
    call_createQuestion
    ;;
    createQuestionTemplate)
    call_createQuestionTemplate
    ;;
    deleteImportJob)
    call_deleteImportJob
    ;;
    deleteQuestion)
    call_deleteQuestion
    ;;
    deleteQuestionAnswers)
    call_deleteQuestionAnswers
    ;;
    deleteQuestionTemplate)
    call_deleteQuestionTemplate
    ;;
    getImportJob)
    call_getImportJob
    ;;
    getImportJobs)
    call_getImportJobs
    ;;
    getQuestion)
    call_getQuestion
    ;;
    getQuestionAnswer)
    call_getQuestionAnswer
    ;;
    getQuestionAnswers)
    call_getQuestionAnswers
    ;;
    getQuestionDeltas)
    call_getQuestionDeltas
    ;;
    getQuestionTags)
    call_getQuestionTags
    ;;
    getQuestionTemplate)
    call_getQuestionTemplate
    ;;
    getQuestionTemplates)
    call_getQuestionTemplates
    ;;
    getQuestions)
    call_getQuestions
    ;;
    getQuestionsCount)
    call_getQuestionsCount
    ;;
    processImportJob)
    call_processImportJob
    ;;
    removeQuestionTag)
    call_removeQuestionTag
    ;;
    removeTagToQuestionsBatch)
    call_removeTagToQuestionsBatch
    ;;
    searchQuestionTags)
    call_searchQuestionTags
    ;;
    updateImportJob)
    call_updateImportJob
    ;;
    updateQuestion)
    call_updateQuestion
    ;;
    updateQuestionAnswer)
    call_updateQuestionAnswer
    ;;
    updateQuestionTemplate)
    call_updateQuestionTemplate
    ;;
    updateQuestionsInBulk)
    call_updateQuestionsInBulk
    ;;
    createInvoice)
    call_createInvoice
    ;;
    getFulFillmentStatuses)
    call_getFulFillmentStatuses
    ;;
    getInvoice)
    call_getInvoice
    ;;
    getInvoiceLogs)
    call_getInvoiceLogs
    ;;
    getInvoices)
    call_getInvoices
    ;;
    getPaymentStatuses)
    call_getPaymentStatuses
    ;;
    payInvoice)
    call_payInvoice
    ;;
    setBundledInvoiceItemFulfillmentStatus)
    call_setBundledInvoiceItemFulfillmentStatus
    ;;
    setExternalRef)
    call_setExternalRef
    ;;
    setInvoiceItemFulfillmentStatus)
    call_setInvoiceItemFulfillmentStatus
    ;;
    setOrderNotes)
    call_setOrderNotes
    ;;
    setPaymentStatus)
    call_setPaymentStatus
    ;;
    updateBillingInfo)
    call_updateBillingInfo
    ;;
    getCountries)
    call_getCountries
    ;;
    getCountryByGeoLocation)
    call_getCountryByGeoLocation
    ;;
    getCountryStates)
    call_getCountryStates
    ;;
    getCurrencyByGeoLocation)
    call_getCurrencyByGeoLocation
    ;;
    addUserLog)
    call_addUserLog
    ;;
    getBREEventLog)
    call_getBREEventLog
    ;;
    getBREEventLogs)
    call_getBREEventLogs
    ;;
    getBREForwardLog)
    call_getBREForwardLog
    ;;
    getBREForwardLogs)
    call_getBREForwardLogs
    ;;
    getUserLog)
    call_getUserLog
    ;;
    getUserLogs)
    call_getUserLogs
    ;;
    addArtist)
    call_addArtist
    ;;
    createArtistTemplate)
    call_createArtistTemplate
    ;;
    deleteArtist)
    call_deleteArtist
    ;;
    deleteArtistTemplate)
    call_deleteArtistTemplate
    ;;
    getArtist)
    call_getArtist
    ;;
    getArtistTemplate)
    call_getArtistTemplate
    ;;
    getArtistTemplates)
    call_getArtistTemplates
    ;;
    getArtists)
    call_getArtists
    ;;
    updateArtist)
    call_updateArtist
    ;;
    updateArtistTemplate)
    call_updateArtistTemplate
    ;;
    getModerationReport)
    call_getModerationReport
    ;;
    getModerationReports)
    call_getModerationReports
    ;;
    updateModerationReport)
    call_updateModerationReport
    ;;
    addUserToVideoWhitelist)
    call_addUserToVideoWhitelist
    ;;
    addVideo)
    call_addVideo
    ;;
    addVideoComment)
    call_addVideoComment
    ;;
    addVideoContributor)
    call_addVideoContributor
    ;;
    addVideoFlag)
    call_addVideoFlag
    ;;
    addVideoRelationships)
    call_addVideoRelationships
    ;;
    createVideoDisposition)
    call_createVideoDisposition
    ;;
    deleteVideo)
    call_deleteVideo
    ;;
    deleteVideoComment)
    call_deleteVideoComment
    ;;
    deleteVideoDisposition)
    call_deleteVideoDisposition
    ;;
    deleteVideoFlag)
    call_deleteVideoFlag
    ;;
    deleteVideoRelationship)
    call_deleteVideoRelationship
    ;;
    getUserVideos)
    call_getUserVideos
    ;;
    getVideo)
    call_getVideo
    ;;
    getVideoComments)
    call_getVideoComments
    ;;
    getVideoDispositions)
    call_getVideoDispositions
    ;;
    getVideoRelationships)
    call_getVideoRelationships
    ;;
    getVideos)
    call_getVideos
    ;;
    removeUserFromVideoWhitelist)
    call_removeUserFromVideoWhitelist
    ;;
    removeVideoContributor)
    call_removeVideoContributor
    ;;
    updateVideo)
    call_updateVideo
    ;;
    updateVideoComment)
    call_updateVideoComment
    ;;
    updateVideoRelationship)
    call_updateVideoRelationship
    ;;
    viewVideo)
    call_viewVideo
    ;;
    sendRawEmail)
    call_sendRawEmail
    ;;
    sendRawSMS)
    call_sendRawSMS
    ;;
    sendTemplatedEmail)
    call_sendTemplatedEmail
    ;;
    sendTemplatedSMS)
    call_sendTemplatedSMS
    ;;
    createPaymentMethod)
    call_createPaymentMethod
    ;;
    deletePaymentMethod)
    call_deletePaymentMethod
    ;;
    getPaymentMethod)
    call_getPaymentMethod
    ;;
    getPaymentMethods)
    call_getPaymentMethods
    ;;
    paymentAuthorization)
    call_paymentAuthorization
    ;;
    paymentCapture)
    call_paymentCapture
    ;;
    updatePaymentMethod)
    call_updatePaymentMethod
    ;;
    verifyAppleReceipt)
    call_verifyAppleReceipt
    ;;
    createOrUpdateFattMerchantPaymentMethod)
    call_createOrUpdateFattMerchantPaymentMethod
    ;;
    handleGooglePayment)
    call_handleGooglePayment
    ;;
    silentPostOptimal)
    call_silentPostOptimal
    ;;
    createPayPalBillingAgreementUrl)
    call_createPayPalBillingAgreementUrl
    ;;
    createPayPalExpressCheckout)
    call_createPayPalExpressCheckout
    ;;
    finalizePayPalBillingAgreement)
    call_finalizePayPalBillingAgreement
    ;;
    finalizePayPalCheckout)
    call_finalizePayPalCheckout
    ;;
    createStripePaymentMethod)
    call_createStripePaymentMethod
    ;;
    payStripeInvoice)
    call_payStripeInvoice
    ;;
    getTransaction)
    call_getTransaction
    ;;
    getTransactions)
    call_getTransactions
    ;;
    refundTransaction)
    call_refundTransaction
    ;;
    getUserWallet)
    call_getUserWallet
    ;;
    getUserWalletTransactions)
    call_getUserWalletTransactions
    ;;
    getUserWallets)
    call_getUserWallets
    ;;
    getWalletBalances)
    call_getWalletBalances
    ;;
    getWalletTransactions)
    call_getWalletTransactions
    ;;
    getWallets)
    call_getWallets
    ;;
    updateWalletBalance)
    call_updateWalletBalance
    ;;
    createXsollaTokenUrl)
    call_createXsollaTokenUrl
    ;;
    receiveXsollaNotification)
    call_receiveXsollaNotification
    ;;
    getChallengeEventLeaderboard)
    call_getChallengeEventLeaderboard
    ;;
    getChallengeEventParticipants)
    call_getChallengeEventParticipants
    ;;
    getInvoiceReports)
    call_getInvoiceReports
    ;;
    getItemRevenue)
    call_getItemRevenue
    ;;
    getRefundRevenue)
    call_getRefundRevenue
    ;;
    getRevenueByCountry)
    call_getRevenueByCountry
    ;;
    getRevenueByItem)
    call_getRevenueByItem
    ;;
    getSubscriptionRevenue)
    call_getSubscriptionRevenue
    ;;
    getSubscriptionReports)
    call_getSubscriptionReports
    ;;
    getUsageByDay)
    call_getUsageByDay
    ;;
    getUsageByHour)
    call_getUsageByHour
    ;;
    getUsageByMinute)
    call_getUsageByMinute
    ;;
    getUsageByMonth)
    call_getUsageByMonth
    ;;
    getUsageByYear)
    call_getUsageByYear
    ;;
    getUsageEndpoints)
    call_getUsageEndpoints
    ;;
    getUserRegistrations)
    call_getUserRegistrations
    ;;
    addSearchIndex)
    call_addSearchIndex
    ;;
    addSearchMappings)
    call_addSearchMappings
    ;;
    deleteSearchIndex)
    call_deleteSearchIndex
    ;;
    deleteSearchIndexes)
    call_deleteSearchIndexes
    ;;
    searchIndex)
    call_searchIndex
    ;;
    linkAccounts)
    call_linkAccounts
    ;;
    linkAccounts1)
    call_linkAccounts1
    ;;
    createItemTemplate)
    call_createItemTemplate
    ;;
    createStoreItem)
    call_createStoreItem
    ;;
    deleteItemTemplate)
    call_deleteItemTemplate
    ;;
    deleteStoreItem)
    call_deleteStoreItem
    ;;
    getBehaviors)
    call_getBehaviors
    ;;
    getItemTemplate)
    call_getItemTemplate
    ;;
    getItemTemplates)
    call_getItemTemplates
    ;;
    getStore)
    call_getStore
    ;;
    getStoreItem)
    call_getStoreItem
    ;;
    getStoreItems)
    call_getStoreItems
    ;;
    quickBuy)
    call_quickBuy
    ;;
    updateItemTemplate)
    call_updateItemTemplate
    ;;
    updateStoreItem)
    call_updateStoreItem
    ;;
    createBundleItem)
    call_createBundleItem
    ;;
    createBundleTemplate)
    call_createBundleTemplate
    ;;
    deleteBundleItem)
    call_deleteBundleItem
    ;;
    deleteBundleTemplate)
    call_deleteBundleTemplate
    ;;
    getBundleItem)
    call_getBundleItem
    ;;
    getBundleTemplate)
    call_getBundleTemplate
    ;;
    getBundleTemplates)
    call_getBundleTemplates
    ;;
    updateBundleItem)
    call_updateBundleItem
    ;;
    updateBundleTemplate)
    call_updateBundleTemplate
    ;;
    createCouponItem)
    call_createCouponItem
    ;;
    createCouponTemplate)
    call_createCouponTemplate
    ;;
    deleteCouponItem)
    call_deleteCouponItem
    ;;
    deleteCouponTemplate)
    call_deleteCouponTemplate
    ;;
    getCouponItem)
    call_getCouponItem
    ;;
    getCouponTemplate)
    call_getCouponTemplate
    ;;
    getCouponTemplates)
    call_getCouponTemplates
    ;;
    updateCouponItem)
    call_updateCouponItem
    ;;
    updateCouponTemplate)
    call_updateCouponTemplate
    ;;
    createCatalogSale)
    call_createCatalogSale
    ;;
    deleteCatalogSale)
    call_deleteCatalogSale
    ;;
    getCatalogSale)
    call_getCatalogSale
    ;;
    getCatalogSales)
    call_getCatalogSales
    ;;
    updateCatalogSale)
    call_updateCatalogSale
    ;;
    createShippingItem)
    call_createShippingItem
    ;;
    createShippingTemplate)
    call_createShippingTemplate
    ;;
    deleteShippingItem)
    call_deleteShippingItem
    ;;
    deleteShippingTemplate)
    call_deleteShippingTemplate
    ;;
    getShippingItem)
    call_getShippingItem
    ;;
    getShippingTemplate)
    call_getShippingTemplate
    ;;
    getShippingTemplates)
    call_getShippingTemplates
    ;;
    updateShippingItem)
    call_updateShippingItem
    ;;
    updateShippingTemplate)
    call_updateShippingTemplate
    ;;
    addCustomDiscount)
    call_addCustomDiscount
    ;;
    addDiscountToCart)
    call_addDiscountToCart
    ;;
    addItemToCart)
    call_addItemToCart
    ;;
    createCart)
    call_createCart
    ;;
    getCart)
    call_getCart
    ;;
    getCarts)
    call_getCarts
    ;;
    getShippable)
    call_getShippable
    ;;
    getShippingCountries)
    call_getShippingCountries
    ;;
    removeDiscountFromCart)
    call_removeDiscountFromCart
    ;;
    setCartCurrency)
    call_setCartCurrency
    ;;
    setCartOwner)
    call_setCartOwner
    ;;
    updateItemInCart)
    call_updateItemInCart
    ;;
    updateShippingAddress)
    call_updateShippingAddress
    ;;
    createSubscription)
    call_createSubscription
    ;;
    createSubscriptionTemplate)
    call_createSubscriptionTemplate
    ;;
    deleteSubscription)
    call_deleteSubscription
    ;;
    deleteSubscriptionTemplate)
    call_deleteSubscriptionTemplate
    ;;
    getSubscription)
    call_getSubscription
    ;;
    getSubscriptionTemplate)
    call_getSubscriptionTemplate
    ;;
    getSubscriptionTemplates)
    call_getSubscriptionTemplates
    ;;
    getSubscriptions)
    call_getSubscriptions
    ;;
    processSubscriptions)
    call_processSubscriptions
    ;;
    updateSubscription)
    call_updateSubscription
    ;;
    updateSubscriptionTemplate)
    call_updateSubscriptionTemplate
    ;;
    createVendor)
    call_createVendor
    ;;
    createVendorTemplate)
    call_createVendorTemplate
    ;;
    deleteVendor)
    call_deleteVendor
    ;;
    deleteVendorTemplate)
    call_deleteVendorTemplate
    ;;
    getVendor)
    call_getVendor
    ;;
    getVendorTemplate)
    call_getVendorTemplate
    ;;
    getVendorTemplates)
    call_getVendorTemplates
    ;;
    getVendors)
    call_getVendors
    ;;
    updateVendor)
    call_updateVendor
    ;;
    updateVendorTemplate)
    call_updateVendorTemplate
    ;;
    createCountryTax)
    call_createCountryTax
    ;;
    createStateTax)
    call_createStateTax
    ;;
    deleteCountryTax)
    call_deleteCountryTax
    ;;
    deleteStateTax)
    call_deleteStateTax
    ;;
    getCountryTax)
    call_getCountryTax
    ;;
    getCountryTaxes)
    call_getCountryTaxes
    ;;
    getStateTax)
    call_getStateTax
    ;;
    getStateTaxesForCountries)
    call_getStateTaxesForCountries
    ;;
    getStateTaxesForCountry)
    call_getStateTaxesForCountry
    ;;
    updateCountryTax)
    call_updateCountryTax
    ;;
    updateStateTax)
    call_updateStateTax
    ;;
    getTemplatePropertyType)
    call_getTemplatePropertyType
    ;;
    getTemplatePropertyTypes)
    call_getTemplatePropertyTypes
    ;;
    addUserTag)
    call_addUserTag
    ;;
    createUserTemplate)
    call_createUserTemplate
    ;;
    deleteUserTemplate)
    call_deleteUserTemplate
    ;;
    getUser)
    call_getUser
    ;;
    getUserTags)
    call_getUserTags
    ;;
    getUserTemplate)
    call_getUserTemplate
    ;;
    getUserTemplates)
    call_getUserTemplates
    ;;
    getUsers)
    call_getUsers
    ;;
    passwordReset)
    call_passwordReset
    ;;
    registerUser)
    call_registerUser
    ;;
    removeUserTag)
    call_removeUserTag
    ;;
    setPassword)
    call_setPassword
    ;;
    startPasswordReset)
    call_startPasswordReset
    ;;
    submitPasswordReset)
    call_submitPasswordReset
    ;;
    updateUser)
    call_updateUser
    ;;
    updateUserTemplate)
    call_updateUserTemplate
    ;;
    createAddress)
    call_createAddress
    ;;
    deleteAddress)
    call_deleteAddress
    ;;
    getAddress)
    call_getAddress
    ;;
    getAddresses)
    call_getAddresses
    ;;
    updateAddress)
    call_updateAddress
    ;;
    addFriend)
    call_addFriend
    ;;
    getFriends)
    call_getFriends
    ;;
    getInviteToken)
    call_getInviteToken
    ;;
    getInvites)
    call_getInvites
    ;;
    redeemFriendshipToken)
    call_redeemFriendshipToken
    ;;
    removeOrDeclineFriend)
    call_removeOrDeclineFriend
    ;;
    addMemberToGroup)
    call_addMemberToGroup
    ;;
    addMembersToGroup)
    call_addMembersToGroup
    ;;
    createGroup)
    call_createGroup
    ;;
    createGroupTemplate)
    call_createGroupTemplate
    ;;
    deleteGroup)
    call_deleteGroup
    ;;
    deleteGroupTemplate)
    call_deleteGroupTemplate
    ;;
    getGroup)
    call_getGroup
    ;;
    getGroupMember)
    call_getGroupMember
    ;;
    getGroupMembers)
    call_getGroupMembers
    ;;
    getGroupTemplate)
    call_getGroupTemplate
    ;;
    getGroupTemplates)
    call_getGroupTemplates
    ;;
    getGroupsForUser)
    call_getGroupsForUser
    ;;
    removeGroupMember)
    call_removeGroupMember
    ;;
    updateGroup)
    call_updateGroup
    ;;
    updateGroupMemberStatus)
    call_updateGroupMemberStatus
    ;;
    updateGroupTemplate)
    call_updateGroupTemplate
    ;;
    updateGroups)
    call_updateGroups
    ;;
    addItemToUserInventory)
    call_addItemToUserInventory
    ;;
    checkUserEntitlementItem)
    call_checkUserEntitlementItem
    ;;
    createEntitlementItem)
    call_createEntitlementItem
    ;;
    createEntitlementTemplate)
    call_createEntitlementTemplate
    ;;
    deleteEntitlementItem)
    call_deleteEntitlementItem
    ;;
    deleteEntitlementTemplate)
    call_deleteEntitlementTemplate
    ;;
    getEntitlementItem)
    call_getEntitlementItem
    ;;
    getEntitlementItems)
    call_getEntitlementItems
    ;;
    getEntitlementTemplate)
    call_getEntitlementTemplate
    ;;
    getEntitlementTemplates)
    call_getEntitlementTemplates
    ;;
    getUserInventories)
    call_getUserInventories
    ;;
    getUserInventory)
    call_getUserInventory
    ;;
    getUserInventoryLog)
    call_getUserInventoryLog
    ;;
    getUsersInventory)
    call_getUsersInventory
    ;;
    grantUserEntitlement)
    call_grantUserEntitlement
    ;;
    updateEntitlementItem)
    call_updateEntitlementItem
    ;;
    updateEntitlementTemplate)
    call_updateEntitlementTemplate
    ;;
    updateUserInventoryBehaviorData)
    call_updateUserInventoryBehaviorData
    ;;
    updateUserInventoryExpires)
    call_updateUserInventoryExpires
    ;;
    updateUserInventoryStatus)
    call_updateUserInventoryStatus
    ;;
    useUserEntitlementItem)
    call_useUserEntitlementItem
    ;;
    createUserRelationship)
    call_createUserRelationship
    ;;
    deleteUserRelationship)
    call_deleteUserRelationship
    ;;
    getUserRelationship)
    call_getUserRelationship
    ;;
    getUserRelationships)
    call_getUserRelationships
    ;;
    updateUserRelationship)
    call_updateUserRelationship
    ;;
    getUserSubscriptionDetails)
    call_getUserSubscriptionDetails
    ;;
    getUsersSubscriptionDetails)
    call_getUsersSubscriptionDetails
    ;;
    reactivateUserSubscription)
    call_reactivateUserSubscription
    ;;
    setSubscriptionBillDate)
    call_setSubscriptionBillDate
    ;;
    setSubscriptionPaymentMethod)
    call_setSubscriptionPaymentMethod
    ;;
    setSubscriptionStatus)
    call_setSubscriptionStatus
    ;;
    setUserSubscriptionPlan)
    call_setUserSubscriptionPlan
    ;;
    setUserSubscriptionPrice)
    call_setUserSubscriptionPrice
    ;;
    getBatch)
    call_getBatch
    ;;
    sendBatch)
    call_sendBatch
    ;;
    getHealth)
    call_getHealth
    ;;
    deleteMaintenance)
    call_deleteMaintenance
    ;;
    getMaintenance)
    call_getMaintenance
    ;;
    setMaintenance)
    call_setMaintenance
    ;;
    updateMaintenance)
    call_updateMaintenance
    ;;
    getUserLocationLog)
    call_getUserLocationLog
    ;;
    getUserTokenDetails)
    call_getUserTokenDetails
    ;;
    getVersion)
    call_getVersion
    ;;
    *)
    ERROR_MSG="ERROR: Unknown operation: $operation"
    exit 1
esac
